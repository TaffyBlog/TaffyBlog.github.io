<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿飞</title>
  
  <subtitle>Taffy Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://taffyblog.github.io/"/>
  <updated>2022-03-08T07:51:05.911Z</updated>
  <id>https://taffyblog.github.io/</id>
  
  <author>
    <name>Taffy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Centos7安装nginx</title>
    <link href="https://taffyblog.github.io/2019/01/12/installNg/"/>
    <id>https://taffyblog.github.io/2019/01/12/installNg/</id>
    <published>2019-01-12T10:37:16.000Z</published>
    <updated>2022-03-08T07:51:05.911Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接<a href="https://www.linuxidc.com/Linux/2016-09/134907.htm" target="_blank" rel="noopener">mafly</a></p><h2 id="安装所需环境"><a href="#安装所需环境" class="headerlink" title="安装所需环境"></a>安装所需环境</h2><p>Nginx 是 C语言 开发，建议在 Linux 上运行，当然，也可以安装 Windows 版本，本篇则使用 CentOS 7 作为安装环境。</p><h3 id="一-gcc-安装"><a href="#一-gcc-安装" class="headerlink" title="一. gcc 安装"></a>一. gcc 安装</h3><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二-PCRE-pcre-devel-安装"><a href="#二-PCRE-pcre-devel-安装" class="headerlink" title="二. PCRE pcre-devel 安装"></a>二. PCRE pcre-devel 安装</h3><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> -y pcre pcre-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三-zlib-安装"><a href="#三-zlib-安装" class="headerlink" title="三. zlib 安装"></a>三. zlib 安装</h3><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> -y zlib zlib-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四-OpenSSL-安装"><a href="#四-OpenSSL-安装" class="headerlink" title="四. OpenSSL 安装"></a>四. OpenSSL 安装</h3><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> -y openssl openssl-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h2><ol><li>直接下载.tar.gz安装包，地址：<a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">https://nginx.org/en/download.html</a></li></ol><ol start="2"><li>使用wget命令下载（推荐）。</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> -c https://nginx.org/download/nginx-1.10.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我下载的是1.10.1版本，这个是目前的稳定版。</p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>依然是直接命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf nginx-1.10.1.tar.gz<span class="token function">cd</span> nginx-1.10.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>其实在 nginx-1.10.1 版本中你就不需要去配置相关东西，默认就可以了。当然，如果你要自己配置目录也是可以的。</p><ol><li>使用默认配置<pre class="line-numbers language-bash"><code class="language-bash">./configure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>自定义配置（不推荐）</li></ol><pre class="line-numbers language-bash"><code class="language-bash">./configure \--prefix<span class="token operator">=</span>/usr/local/nginx \--conf-path<span class="token operator">=</span>/usr/local/nginx/conf/nginx.conf \--pid-path<span class="token operator">=</span>/usr/local/nginx/conf/nginx.pid \--lock-path<span class="token operator">=</span>/var/lock/nginx.lock \--error-log-path<span class="token operator">=</span>/var/log/nginx/error.log \--http-log-path<span class="token operator">=</span>/var/log/nginx/access.log \--with-http_gzip_static_module \--http-client-body-temp-path<span class="token operator">=</span>/var/temp/nginx/client \--http-proxy-temp-path<span class="token operator">=</span>/var/temp/nginx/proxy \--http-fastcgi-temp-path<span class="token operator">=</span>/var/temp/nginx/fastcgi \--http-uwsgi-temp-path<span class="token operator">=</span>/var/temp/nginx/uwsgi \--http-scgi-temp-path<span class="token operator">=</span>/var/temp/nginx/scgi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录</p><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="启动、停止nginx"><a href="#启动、停止nginx" class="headerlink" title="启动、停止nginx"></a>启动、停止nginx</h2><h3 id="查找安装路径"><a href="#查找安装路径" class="headerlink" title="查找安装路径"></a>查找安装路径</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">whereis</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="停启"><a href="#停启" class="headerlink" title="停启"></a>停启</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/nginx/sbin/./nginx ./nginx -s stop./nginx -s quit./nginx -s reload./nginx -s quit:此方式停止步骤是待nginx进程处理任务完毕进行停止。./nginx -s stop:此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询nginx进程"><a href="#查询nginx进程" class="headerlink" title="查询nginx进程"></a>查询nginx进程</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">grep</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="重启-nginx"><a href="#重启-nginx" class="headerlink" title="重启 nginx"></a>重启 nginx</h3><ol><li>先停止再启动（推荐）：<br>对 nginx 进行重启相当于先停止再启动，即先执行停止命令再执行启动命令。如下：</li></ol><pre class="line-numbers language-bash"><code class="language-bash">./nginx -s quit./nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>重新加载配置文件：<br>当 ngin x的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，使用-s reload不用先停止 ngin x再启动 nginx 即可将配置信息在 nginx 中生效，如下：</li></ol><pre class="line-numbers language-bash"><code class="language-bash">./nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h2><p>即在rc.local增加启动代码就可以了。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/rc.local增加一行 /usr/local/nginx/sbin/nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置执行权限：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> 755 rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到这里，nginx就安装完毕了，启动、停止、重启操作也都完成了，当然，你也可以添加为系统服务，我这里就不在演示了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文链接&lt;a href=&quot;https://www.linuxidc.com/Linux/2016-09/134907.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mafly&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装所需环境&quot;&gt;&lt;a href=&quot;#安装
      
    
    </summary>
    
      <category term="Linux" scheme="https://taffyblog.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>nginx实现二级域名转发</title>
    <link href="https://taffyblog.github.io/2019/01/12/nginxTurn/"/>
    <id>https://taffyblog.github.io/2019/01/12/nginxTurn/</id>
    <published>2019-01-12T09:37:16.000Z</published>
    <updated>2022-03-08T07:51:05.931Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://blog.csdn.net/Metropolis_cn/article/details/73613022" target="_blank" rel="noopener">Metropolis_cn</a></p><p>目的：解决只有一个服务器和域名，同时为几个应用提供服务的问题</p><p>举例：比如说你现在有 abc.com 的主域名，你又划分了 shop.abc.com 和 mail.abc.com 两个二级域名来实现不同的功能，并希望两个二级域名使用同一个IP地址和端口访问，但是提供不同的服务，nginx则可以监听指定的端口，根据域名的不同将请求转发给相应的端口。</p><p>实现：</p><p>1.打开nginx的配置文件，打开  /安装路径/conf/nginx.conf，进行如下配置</p><pre class="line-numbers language-conf"><code class="language-conf">server {        listen       80;        server_name  *.abc.com;        if ($http_host ~* "^(.*?)\.abc\.com$") {    #正则表达式                set $domain $1;                     #设置变量        }        location / {            if ($domain ~* "shop") {               proxy_pass http://abc.com:3001;      #域名中有shop，转发到3001端口            }            if ($domain ~* "mail") {               proxy_pass http://abc.com:3002;      #域名中有mail，转发到3002端口            }            tcp_nodelay     on;            proxy_set_header Host            $host;            proxy_set_header X-Real-IP       $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            #以上三行，目的是将代理服务器收到的用户的信息传到真实服务器上            root   html;            index  index.html index.htm;            #默认情况        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.命令行输入 /安装路径/sbin/nginx -t 查看nginx配置是否正确<br>3.命令行输入 /安装路径/sbin/nginx -s reload 重新加载nginx<br>4.如果相应端口上有对应的服务，那么我们的目的就达到了</p><hr><p>作者：Metropolis_cn<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/Metropolis_cn/article/details/73613022" target="_blank" rel="noopener">https://blog.csdn.net/Metropolis_cn/article/details/73613022</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文链接：&lt;a href=&quot;https://blog.csdn.net/Metropolis_cn/article/details/73613022&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Metropolis_cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目的：解决
      
    
    </summary>
    
      <category term="Linux" scheme="https://taffyblog.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker 容器镜像删除</title>
    <link href="https://taffyblog.github.io/2018/11/04/dockerImageDel/"/>
    <id>https://taffyblog.github.io/2018/11/04/dockerImageDel/</id>
    <published>2018-11-04T13:42:19.000Z</published>
    <updated>2022-03-08T07:51:05.903Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/q4486233/p/6482711.html" target="_blank" rel="noopener">参考链接</a></p><p>1.停止所有的container，这样才能够删除其中的images：</p><pre class="line-numbers language-bash"><code class="language-bash">docker stop <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -a -q<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想要删除所有container的话再加一个指令：</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -a -q<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.查看当前有些什么images</p><pre class="line-numbers language-bash"><code class="language-bash">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.删除images，通过image的id来指定删除谁</p><pre class="line-numbers language-bash"><code class="language-bash">docker rmi <span class="token operator">&lt;</span>image id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>想要删除untagged images，也就是那些id为<none>的image的话可以用</none></p><pre class="line-numbers language-bash"><code class="language-bash">docker rmi <span class="token punctuation">$(</span>docker images <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"^&lt;none>"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">"{print <span class="token variable">$3</span>}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要删除全部image的话</p><pre class="line-numbers language-bash"><code class="language-bash">docker rmi <span class="token variable"><span class="token variable">$(</span>docker images -q<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/q4486233/p/6482711.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.停止所有的container，这样才能够删除其中的image
      
    
    </summary>
    
      <category term=".Net Core" scheme="https://taffyblog.github.io/categories/Net-Core/"/>
    
    
  </entry>
  
  <entry>
    <title>ASP.NET Core发布到Docker遇到的问题</title>
    <link href="https://taffyblog.github.io/2018/11/04/aspnetDockerError/"/>
    <id>https://taffyblog.github.io/2018/11/04/aspnetDockerError/</id>
    <published>2018-11-04T12:42:19.000Z</published>
    <updated>2022-03-08T07:51:05.898Z</updated>
    
    <content type="html"><![CDATA[<ol><li>创建镜像时发生错误</li></ol><pre class="line-numbers language-bash"><code class="language-bash">Error:  An assembly specified <span class="token keyword">in</span> the application dependencies manifest <span class="token punctuation">(</span>YTF.Blog.Service.deps.json<span class="token punctuation">)</span> was not found:    package: <span class="token string">'SQLitePCLRaw.lib.e_sqlite3.linux'</span>, version: <span class="token string">'1.1.11'</span>    path: <span class="token string">'runtimes/linux-x64/native/libe_sqlite3.so'</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题是asp.net runtime没有把服务器需要的包全部发布出来，它认为是目标系统带着有，而实际上目标系统中没有。<br>增加如下一行到 <code>csproj</code>文件中即可：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PublishWithAspNetCoreTargetManifest</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PublishWithAspNetCoreTargetManifest</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后<code>csproj</code>文件看上去像这个样子</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Project</span> <span class="token attr-name">Sdk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Microsoft.NET.Sdk.Web<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PropertyGroup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TargetFramework</span><span class="token punctuation">></span></span>netcoreapp2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TargetFramework</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PublishWithAspNetCoreTargetManifest</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PublishWithAspNetCoreTargetManifest</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PropertyGroup</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/lihongzhai/article/details/79039160" target="_blank" rel="noopener">参考链接–五角大寨</a></p><ol start="2"><li>创建镜像pull dotnet镜像时出现错误：<pre class="line-numbers language-bash"><code class="language-bash">error pulling image configuration: Get https://production.cloudflare.docker.com/registry-v2/docker/registry/v2/blobs/sha256/1f/1fe6774e5e9e4be6904e2f0b61658c67225aa36b65f76b2949e386e8da124cde/data?verify<span class="token operator">=</span>1541342525-ulZ5ck1zqnMHaRlexfo79WRZ1gQ%3D: dial tcp: lookup production.cloudflare.docker.com: no such host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>解决办法：<br>解析<code>production.cloudflare.docker.com</code>的IP地址并加入<code>/etc/hosts</code>文件中，命令如下：<pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'104.18.121.25 production.cloudflare.docker.com'</span> <span class="token operator">>></span> /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;创建镜像时发生错误&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;line-numbers language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Error:
  An assembly specified &lt;span class
      
    
    </summary>
    
      <category term=".Net Core" scheme="https://taffyblog.github.io/categories/Net-Core/"/>
    
    
  </entry>
  
  <entry>
    <title>ASP.NET管道模型</title>
    <link href="https://taffyblog.github.io/2018/10/11/aspnetPipleline/"/>
    <id>https://taffyblog.github.io/2018/10/11/aspnetPipleline/</id>
    <published>2018-10-11T12:42:19.000Z</published>
    <updated>2022-03-08T07:51:05.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="访问一个网页的全过程"><a href="#访问一个网页的全过程" class="headerlink" title="访问一个网页的全过程"></a>访问一个网页的全过程</h2><p><a href="https://blog.csdn.net/u012862311/article/details/78753232?utm_source=copy" target="_blank" rel="noopener">参考toumingren527</a></p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><blockquote><p>从浏览器输入一个网址，首先要做的是域名解析，将网址解析成IP+端口，定位到网站所在的服务器。</p></blockquote><ul><li><p>域名解析是把域名指向网站空间IP，让人们通过注册的域名可以方便地访问到网站的一种服务。IP地址是网络上标识站点的数字地址，为了方便记忆，采用域名来代替IP地址标识站点地址。域名解析就是域名到IP地址的转换过程。域名的解析工作由DNS服务器完成。</p></li><li><p>域名解析也叫域名指向、服务器设置、域名配置以及反向IP登记等等。说得简单点就是将好记的域名解析成IP，服务由DNS服务器完成，是把域名解析到一个IP地址，然后在此IP地址的主机上将一个子目录与域名绑定。</p></li><li><p>互联网中的地址是数字的IP地址，域名解析的作用主要就是为了便于记忆。</p></li></ul><p>DNS域名解析时用的是UDP协议。整个域名解析的过程如下：</p><ol><li><p>浏览器向本机DNS模块发出DNS请求，DNS模块生成相关的DNS报文；</p></li><li><p>DNS模块将生成的DNS报文传递给传输层的UDP协议单元；</p></li><li>UDP协议单元将该数据封装成UDP数据报，传递给网络层的IP协议单元；</li><li><p>IP协议单元将该数据封装成IP数据包，其目的IP地址为DNS服务器的IP地址；</p></li><li><p>封装好的IP数据包将传递给数据链路层的协议单元进行发送；</p></li><li>发送时在ARP缓存中查询相关数据，如果没有，就发送ARP广播（包含待查询的IP地址，收到广播的主机检查自己的IP，符合条件的主机将含有自己MAC地址的ARP包发送给ARP广播的主机）请求，等待ARP回应；</li><li>得到ARP回应后，将IP地址与路由的下一跳MAC地址对应的信息写入ARP缓存表；</li><li>写入缓存后，以路由下一跳的地址填充目的MAC地址，以数据帧形式转发；转发可能进行多次；</li><li>DNS请求到达DNS服务器的数据链路层协议单元；</li><li>DNS服务器的数据链路层协议单元解析数据帧，将内部的IP数据包传递给网络层IP协议单元；</li><li>DNS服务器的IP协议单元解析IP数据包，将内部的UDP数据报传递给传输层UDP协议单元；</li><li>DNS服务器的UDP协议单元解析收到的UDP数据报，将内部的DNS报文传递给DNS服务单元；</li><li>DNS服务单元将域名解析成对应IP地址，产生DNS回应报文；</li><li>DNS回应报文-&gt;UDP-&gt;IP-&gt;MAC-&gt;我的主机；</li><li>我的主机收到数据帧，将数据帧-&gt;IP-&gt;UDP-&gt;浏览器；</li><li>将域名解析结果以域名和IP地址对应的形式写入DNS缓存表。</li></ol><hr><h3 id="与目的主机进行TCP连接（三次握手）"><a href="#与目的主机进行TCP连接（三次握手）" class="headerlink" title="与目的主机进行TCP连接（三次握手）"></a>与目的主机进行TCP连接（三次握手）</h3><ol><li><p>向目的主机发送TCP连接请求报文；</p></li><li><p>该TCP报文中SYN标志位设为1，表示连接请求；</p></li><li>该TCP报文通过IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;目的主机；</li><li>目的主机收到数据帧，通过IP-&gt;TCP，TCP协议单元回应请求应答报文；</li><li>该报文中SYN和ACK标志设为1，表示连接请求应答；</li><li>该TCP报文通过IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;我的主机；</li><li>我的主机收到数据帧，通过IP-&gt;TCP，TCP协议单元回应请求确认报文；</li><li>该TCP报文通过IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;目的主机；</li><li>目的主机收到数据帧，通过IP-&gt;TCP，连接建立完成。</li></ol><h3 id="发送与收取数据（浏览器与目的主机开始HTTP访问过程）"><a href="#发送与收取数据（浏览器与目的主机开始HTTP访问过程）" class="headerlink" title="发送与收取数据（浏览器与目的主机开始HTTP访问过程）"></a>发送与收取数据（浏览器与目的主机开始HTTP访问过程）</h3><p>只有建立连接后才能开始传输数据。</p><ol><li>浏览器向域名发出GET方法报文（HTTP请求）；</li><li>该GET方法报文通过TCP-&gt;IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;目的主机；</li><li><p>目的主机收到数据帧，通过IP-&gt;TCP-&gt;HTTP，HTTP协议单元会回应HTTP协议格式封装好的HTML形式数据（HTTP响应）；[从请求信息中获得客户机想访问的主机名。从请求信息中获取客户机想要访问的web应用（web应用程序指提供浏览器访问的程序，简称web应用）。从请求信息中获取客户机要访问的web资源。（web资源，即各种文件，图片，视频，文本等）读取相应的主机下的web应用，web资源。用读取到的web资源数据，创建一个HTTP响应。]</p></li><li><p>该HTML数据通过TCP-&gt;IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;我的主机；</p></li><li>我的主机收到数据帧，通过IP-&gt;TCP-&gt;HTTP-&gt;浏览器，浏览器以网页形式显示HTML内容。</li></ol><hr><h3 id="与目的主机断开TCP连接（四次挥手）"><a href="#与目的主机断开TCP连接（四次挥手）" class="headerlink" title="与目的主机断开TCP连接（四次挥手）"></a>与目的主机断开TCP连接（四次挥手）</h3><p>TCP连接释放过程：</p><ol><li>浏览器向目的主机发出TCP连接结束请求报文，此时进入FIN WAIT状态；</li><li>该报文FIN标志位设为1，表示结束请求；</li><li>TCP结束请求报文通过IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;目的主机；</li><li>目的主机收到数据帧，通过IP-&gt;TCP，TCP协议单元回应结束应答报文；</li><li>当前只是进行回应，因为目的主机可能还有数据要传，并不急着断开连接；</li><li>该报文中ACK标志位设为1，表示收到结束请求；</li><li>目的数据发送完所有数据后，向我的主机发出TCP连接结束请求报文；</li><li>该报文FIN标志位设为1，表示结束请求；</li><li>TCP结束请求报文通过IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;我的主机；</li><li>我的主机收到数据帧，通过IP-&gt;TCP，TCP协议单元回应结束应答报文，此时进入TIME WAIT状态，因为不相信网络是可靠的，如果目的主机没收到还可以重发；</li><li>该报文中的FIN标志位均设为1，表示结束应答；</li><li>该TCP回应报文通过IP（DNS）-&gt;MAC（ARP）-&gt;网关-&gt;目的主机；</li><li>目的主机关闭连接；</li><li>TIME WAIT等待结束后，没有收到回复，说明目的正常关闭了，我的主机也关闭连接。</li></ol><hr><h2 id="Http请求到达管道模型"><a href="#Http请求到达管道模型" class="headerlink" title="Http请求到达管道模型"></a>Http请求到达管道模型</h2><h3 id="请求到达管道模型之前"><a href="#请求到达管道模型之前" class="headerlink" title="请求到达管道模型之前"></a>请求到达管道模型之前</h3><p>图示如下：</p><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/pip1.png" alt="图片"></p><p>经过域名解析和三次握手之后，便开始正式发送Http请求数据，请求到达IIS服务器后:</p><ol><li>首先是<code>HTTP.SYS</code>接收到请求，转发给<code>ISAPI</code>扩展器<code>aspnet_isapi</code>;</li><li><code>aspnet_isapi</code>将请求包装成<code>HttpWorkerRequest</code>对象。</li><li>调用<code>HttpRuntime</code>类的<code>ProcessRequest</code>方法并将封装的<code>HttpWorkerRequest</code>对象传入。</li><li><code>HttpRuntime</code>中将请求放入队列。</li><li>从队列中取出第一个请求并创建<code>HttpContext</code>对象。</li><li><code>HttpApplicationFactory</code>从对象池中创建<code>HttpApplication</code>对象&lt;每次请求都创建一次&gt;</li></ol><p>反编译代码如下：</p><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/pip2.png" alt="图片"></p><blockquote><p><code>HttpApplication</code>便是Asp.Net管道模型的核心，我们在网站程序中最常用的便是扩展它，<code>HttpModule</code>便是专门用于扩展<code>HttpApplication</code>的。</p></blockquote><h3 id="HttpApplication类的请求处理流程"><a href="#HttpApplication类的请求处理流程" class="headerlink" title="HttpApplication类的请求处理流程"></a><code>HttpApplication</code>类的请求处理流程</h3><p>在<code>HttpApplication</code>类中定义了一系列处理Http请求的事件，按照<code>.Net Framework</code>既定的顺序处理逻辑，并按此顺序触发事件。</p><p>所有事件如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs just before ASP.NET sends HTTP headers to the client.</span><span class="token keyword">public</span> event EventHandler PreSendRequestHeaders<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when the handler is selected to respond to the request.</span><span class="token keyword">public</span> event EventHandler MapRequestHandler<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when the application is disposed.</span><span class="token keyword">public</span> event EventHandler Disposed<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs as the first event in the HTTP pipeline chain of execution when ASP.NET</span><span class="token comment" spellcheck="true">//     responds to a request.</span><span class="token keyword">public</span> event EventHandler BeginRequest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when a security module has established the identity of the user.</span><span class="token keyword">public</span> event EventHandler AuthenticateRequest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when a security module has established the identity of the user.</span><span class="token keyword">public</span> event EventHandler PostAuthenticateRequest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when a security module has verified user authorization.</span><span class="token keyword">public</span> event EventHandler AuthorizeRequest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when the user for the current request has been authorized.</span><span class="token keyword">public</span> event EventHandler PostAuthorizeRequest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when ASP.NET finishes an authorization event to let the caching modules</span><span class="token comment" spellcheck="true">//     serve requests from the cache, bypassing execution of the event handler (for</span><span class="token comment" spellcheck="true">//     example, a page or an XML Web service).</span><span class="token keyword">public</span> event EventHandler ResolveRequestCache<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when ASP.NET bypasses execution of the current event handler and allows</span><span class="token comment" spellcheck="true">//     a caching module to serve a request from the cache.</span><span class="token keyword">public</span> event EventHandler PostResolveRequestCache<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs just before ASP.NET sends content to the client.</span><span class="token keyword">public</span> event EventHandler PreSendRequestContent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when ASP.NET has mapped the current request to the appropriate event handler.</span><span class="token keyword">public</span> event EventHandler PostMapRequestHandler<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when ASP.NET has completed processing all the event handlers for the System.Web.HttpApplication.LogRequest</span><span class="token comment" spellcheck="true">//     event.</span><span class="token keyword">public</span> event EventHandler PostLogRequest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when the managed objects that are associated with the request have been</span><span class="token comment" spellcheck="true">//     released.</span><span class="token keyword">public</span> event EventHandler RequestCompleted<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when the request state (for example, session state) that is associated</span><span class="token comment" spellcheck="true">//     with the current request has been obtained.</span><span class="token keyword">public</span> event EventHandler PostAcquireRequestState<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs just before ASP.NET starts executing an event handler (for example, a</span><span class="token comment" spellcheck="true">//     page or an XML Web service).</span><span class="token keyword">public</span> event EventHandler PreRequestHandlerExecute<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when the ASP.NET event handler (for example, a page or an XML Web service)</span><span class="token comment" spellcheck="true">//     finishes execution.</span><span class="token keyword">public</span> event EventHandler PostRequestHandlerExecute<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs after ASP.NET finishes executing all request event handlers. This event</span><span class="token comment" spellcheck="true">//     causes state modules to save the current state data.</span><span class="token keyword">public</span> event EventHandler ReleaseRequestState<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when ASP.NET has completed executing all request event handlers and the</span><span class="token comment" spellcheck="true">//     request state data has been stored.</span><span class="token keyword">public</span> event EventHandler PostReleaseRequestState<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when ASP.NET finishes executing an event handler in order to let caching</span><span class="token comment" spellcheck="true">//     modules store responses that will be used to serve subsequent requests from the</span><span class="token comment" spellcheck="true">//     cache.</span><span class="token keyword">public</span> event EventHandler UpdateRequestCache<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when ASP.NET finishes updating caching modules and storing responses that</span><span class="token comment" spellcheck="true">//     are used to serve subsequent requests from the cache.</span><span class="token keyword">public</span> event EventHandler PostUpdateRequestCache<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs just before ASP.NET performs any logging for the current request.</span><span class="token keyword">public</span> event EventHandler LogRequest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when ASP.NET acquires the current state (for example, session state) that</span><span class="token comment" spellcheck="true">//     is associated with the current request.</span><span class="token keyword">public</span> event EventHandler AcquireRequestState<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs as the last event in the HTTP pipeline chain of execution when ASP.NET</span><span class="token comment" spellcheck="true">//     responds to a request.</span><span class="token keyword">public</span> event EventHandler EndRequest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Occurs when an unhandled exception is thrown.</span><span class="token keyword">public</span> event EventHandler Error<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行顺序如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*BeginRequest              Asp.net处理的第一个事件，表示处理的开始AuthenticateRequest          验证请求，一般用来取得请求用户的信息PostAuthenticateRequest      已经获取请求用户的信息AuthorizeRequest          授权，一般用来检查用户的请求是否获得权限PostAuthorizeRequest      用户请求已经得到授权ResolveRequestCache          获取以前处理缓存的处理结果，如果以前缓存过，那么，不必再进行请求的处理工作，直接返回缓存结果PostResolveRequestCache      已经完成缓存的获取操作PostMapRequestHandler      已经根据用户的请求，创建了处理请求的处理器对象AcquireRequestState          取得请求的状态，一般用于SessionPostAcquireRequestState      已经取得了SessionPreRequestHandlerExecute  准备执行处理程序PostRequestHandlerExecute 已经执行了处理程序ReleaseRequestState         释放请求的状态PostReleaseRequestState     已经释放了请求的状态UpdateRequestCache         更新缓存PostUpdateRequestCache    已经更新了缓存LogRequest                请求的日志操作PostLogRequest            已经完成了请求的日志操作EndRequest                本次请求处理完成*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求并非所有事件都会执行，例如<code>Error</code>。</p><h2 id="HttpModule"><a href="#HttpModule" class="headerlink" title="HttpModule"></a>HttpModule</h2><p><code>ASP.NET</code> 请求处理过程是基于管道模型的，这个管道模型是由多个<code>HttpModule</code>和<code>HttpHandler</code>组成，<code>ASP.NET</code> 把<code>http</code>请求依次传递给管道中各个<code>HttpModule</code>，最终被<code>HttpHandler</code>处理，处理完成后，再次经过管道中的<code>HTTP</code>模块，把结果返回给客户端。我们可以在每个<code>HttpModule</code>中都可以干预请求的处理过程。</p><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/pip3.gif" alt="图片"></p><p>当请求到达<code>HttpModule</code>的时候，系统还没有对这个请求真正处理，但是我们可以在这个请求传递到处理中心（<code>HttpHandler</code>）之前附加一些其它信息，或者截获的这个请求并作一些额外的工作，也或者终止请求等。在<code>HttpHandler</code>处理完请求之后，我们可以再在相应的<code>HttpModule</code>中把请求处理的结果进行再次加工返回客户端。</p><h3 id="系统自带的HttpModule"><a href="#系统自带的HttpModule" class="headerlink" title="系统自带的HttpModule"></a>系统自带的HttpModule</h3><ol><li><p><code>OutputCacheModule</code>完成Asp.net的输出缓存管理工作：<br><code>OutputCacheModule</code>的配置参数通过<code>system.we</code>b配置元素的<code>caching</code>子元素的<code>outputCache</code>元素进行定义。当启用输出缓存之后(启用还是通过配置文件，下同)，<code>OutputCacheModule</code>将注册<code>HttpApplication</code>的<code>ResolveRequestCache</code>和<code>UpdateRequestCache</code>两个事件完成输出缓存的管理。</p></li><li><p>SessionStateModule完成Session的管理工作：<br>这个<code>Module</code>的配置参数通过配置文件中的<code>system.web</code>配置元素的<code>sessionState</code>子元素进行配置。当启用<code>Session</code>状态管理之后，<code>SessionStateModule</code>将注册<code>HttpApplication</code>的<code>AcquireRequestState、ReleaseRequestState、EndRequest</code>三个事件完成<code>Session</code>状态的管理工作。</p></li><li><code>ProfileModule</code>提供个性化数据管理：<br>这是一个自定义的类似于<code>Session</code>的会话状态管理，但是，个性化数据的读取和保存可以由程序员完全控制，并且提供了强类型的数据访问方式。这个<code>Module</code>的配置参数在<code>system.web</code>的子元素<code>profile</code>中进行说明。当启用了个性化数据管理之后，<code>Module</code>将注册<code>HttpApplication</code>的<code>AcquireRequestState</code>和<code>EndRequest</code>事件处理。</li><li><code>AnonymousIdentificationModule</code>提供匿名用户的标志：<br>是否启用匿名用户标志在配置文件的<code>system.web</code>配置元素的子元素<code>anonymousIdentification</code>中定义，还可以配置匿名标识的管理方式。由于在<code>AuthenticateRequest</code>事件中将验证用户，获取用户名，所以这个<code>Module</code>注册了<code>PostAuthenticateRequest</code>的事件处理，当用户没有经过验证的时候，为用户分配一个唯一的匿名标识。</li><li><p><code>WindowsAuthenticationModule、FormsAuthenticationModule</code>和<code>PassportAuthenticationModule</code>用来完成用户的验证工作。<br> 它们通过配置文件中<code>system.web</code>的子元素<code>authentication</code>子元素定义，<code>mode</code>属性用来指定网站当前使用的验证方式，也就是哪一个<code>Module</code>将被用来完成验证工作。在启用验证的情况下，<code>FormsAuthenticationModule</code>和<code>PassportAuthenticationModule</code>将注册<code>HttpApplication</code>的<code>AuthenticateRequest</code>和<code>EndRequest</code>事件进行用户的验证处理。<code>WindowsAuthenticationModule</code>将注册<code>AuthenticateRequest</code>的事件处理。</p><ol start="6"><li><code>RoleManagerModule、UrlAuthorizationModule、FileAuthorizationModule</code>用来完成用户的授权管理：<br>授权管理的配置参数来自<code>system.web</code>的<code>authorization</code>子元素。<code>UrlAuthorizationModule</code>和<code>FileAuthorizationModule</code>注册了<code>HttpApplication</code>的<code>AuthorizeRequest</code>事件处理，用来检查<code>Url</code>和文件的访问授权。<code>RoleManagerModule</code>在<code>Url</code>和文件访问授权检查通过之后，通过用户的标识和角色来完成用户的授权检查，<code>RoleManagerModule</code>注册了<code>HttpApplication</code>的<code>PostAuthenticateRequest</code>和<code>EndRequest</code>事件处理。</li></ol></li></ol><h3 id="自定义HttpModule"><a href="#自定义HttpModule" class="headerlink" title="自定义HttpModule"></a>自定义HttpModule</h3><ol><li>编写一个类实现IHttpModule接口。</li><li>在<code>Init</code>事件中注册事件，并实现事件处理方法。</li><li>在<code>Web.Conofig</code>中注册这个<code>HttpModule</code>模块。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 防盗链</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageHandler</span> <span class="token operator">:</span> IHttpHandler<span class="token punctuation">{</span>    #region IHttpHandler Members    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ProcessRequest</span><span class="token punctuation">(</span>HttpContext context<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果UrlReferrer为空，则显示一张默认的禁止盗链的图片</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>UrlReferrer <span class="token operator">==</span> null <span class="token operator">||</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>UrlReferrer<span class="token punctuation">.</span>Host <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">"image/JPEG"</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token string">"/Content/Image/Forbidden.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果 UrlReferrer中不包含自己站点主机域名，则显示一张默认的禁止盗链的图片</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>UrlReferrer<span class="token punctuation">.</span>Host<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取文件服务器端物理路径</span>                string FileName <span class="token operator">=</span> context<span class="token punctuation">.</span>Server<span class="token punctuation">.</span><span class="token function">MapPath</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>FilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">"image/JPEG"</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">"image/JPEG"</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token string">"/Content/Image/Forbidden.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    #endregion<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;访问一个网页的全过程&quot;&gt;&lt;a href=&quot;#访问一个网页的全过程&quot; class=&quot;headerlink&quot; title=&quot;访问一个网页的全过程&quot;&gt;&lt;/a&gt;访问一个网页的全过程&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u012862
      
    
    </summary>
    
      <category term="Web相关" scheme="https://taffyblog.github.io/categories/Web%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>Oracle创建表空间和用户</title>
    <link href="https://taffyblog.github.io/2018/09/17/oracleCreadUser/"/>
    <id>https://taffyblog.github.io/2018/09/17/oracleCreadUser/</id>
    <published>2018-09-17T03:54:26.000Z</published>
    <updated>2022-03-08T07:51:05.933Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--创建表空间</span><span class="token keyword">create</span> <span class="token keyword">tablespace</span> DOTNET datafile <span class="token string">'D:\DOTNET\DOTNET.DBF'</span> size 200mautoextend <span class="token keyword">on</span><span class="token keyword">next</span> 32m maxsize 2048mextent management <span class="token keyword">local</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--创建临时表空间</span><span class="token keyword">create</span> <span class="token keyword">temporary</span> <span class="token keyword">tablespace</span> DOTNET_TEMP tempfile <span class="token string">'D:\DOTNET\DOTNET_TEMP.dbf'</span> size 50M autoextend <span class="token keyword">ON</span> <span class="token keyword">next</span> 10M maxsize 100M<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--创建用户</span><span class="token keyword">create</span> <span class="token keyword">user</span> datamanage identified <span class="token keyword">by</span> datamanage<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--分配表空间和临时表空间</span><span class="token keyword">alter</span> <span class="token keyword">user</span> datamanage <span class="token keyword">default</span> <span class="token keyword">tablespace</span> DOTNET <span class="token keyword">temporary</span> <span class="token keyword">tablespace</span> DOTNET_TEMP<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--给用户分配权限</span><span class="token keyword">grant</span> <span class="token keyword">create</span> <span class="token keyword">session</span><span class="token punctuation">,</span><span class="token keyword">create</span> <span class="token keyword">table</span><span class="token punctuation">,</span><span class="token keyword">create</span> <span class="token keyword">view</span><span class="token punctuation">,</span><span class="token keyword">create</span> sequence<span class="token punctuation">,</span>unlimited <span class="token keyword">tablespace</span> <span class="token keyword">to</span> datamanage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">---授予dba权限</span><span class="token keyword">grant</span> <span class="token keyword">connect</span><span class="token punctuation">,</span>resource<span class="token punctuation">,</span><span class="token number">dba</span> <span class="token keyword">to</span> wmlt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre class=&quot;line-numbers language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;--创建表空间&lt;/span&gt;
&lt;span class=&quot;
      
    
    </summary>
    
      <category term="数据库" scheme="https://taffyblog.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Oracle" scheme="https://taffyblog.github.io/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>EF Core连接Oracle</title>
    <link href="https://taffyblog.github.io/2018/09/17/efcoreLinkOracle/"/>
    <id>https://taffyblog.github.io/2018/09/17/efcoreLinkOracle/</id>
    <published>2018-09-17T02:54:26.000Z</published>
    <updated>2022-03-08T07:51:05.905Z</updated>
    
    <content type="html"><![CDATA[<p><strong>仅适用于<code>.Net Core 2.0及以下</code></strong></p><h4 id="新建Core项目"><a href="#新建Core项目" class="headerlink" title="新建Core项目"></a>新建Core项目</h4><p>略</p><h4 id="安装NuGet"><a href="#安装NuGet" class="headerlink" title="安装NuGet"></a>安装NuGet</h4><blockquote><p>官方尚不支持Ef Core连接Oracle,目前只有bate版</p></blockquote><p>安装 <code>Citms.EntityFrameworkCore.Oracle</code>。</p><p>nuget地址:<a href="https://www.nuget.org/packages/Citms.EntityFrameworkCore.Oracle" target="_blank" rel="noopener">https://www.nuget.org/packages/Citms.EntityFrameworkCore.Oracle</a></p><p>github:<a href="https://github.com/CrazyJson/Citms.EntityFrameworkCore.Oracle" target="_blank" rel="noopener">https://github.com/CrazyJson/Citms.EntityFrameworkCore.Oracle</a></p><pre class="line-numbers language-bash"><code class="language-bash">Install-Package Citms.EntityFrameworkCore.Oracle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="新建DBContext"><a href="#新建DBContext" class="headerlink" title="新建DBContext"></a>新建DBContext</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonDBContext</span> <span class="token operator">:</span> DbContext<span class="token punctuation">{</span>    <span class="token keyword">protected</span> override <span class="token keyword">void</span> <span class="token function">OnConfiguring</span><span class="token punctuation">(</span>DbContextOptionsBuilder optionsBuilder<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        var logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">AddConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        optionsBuilder<span class="token punctuation">.</span><span class="token function">UseLoggerFactory</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span><span class="token punctuation">;</span>        optionsBuilder<span class="token punctuation">.</span><span class="token function">UseOracle</span><span class="token punctuation">(</span><span class="token string">"DATA SOURCE=127.0.0.1:1521/tjims;PASSWORD=test;PERSIST SECURITY INFO=True;USER ID=test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        base<span class="token punctuation">.</span><span class="token function">OnConfiguring</span><span class="token punctuation">(</span>optionsBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>Spotting<span class="token operator">></span> Spotting <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;仅适用于&lt;code&gt;.Net Core 2.0及以下&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;新建Core项目&quot;&gt;&lt;a href=&quot;#新建Core项目&quot; class=&quot;headerlink&quot; title=&quot;新建Core项目&quot;&gt;&lt;/a&gt;新建Co
      
    
    </summary>
    
      <category term="DotNet Core" scheme="https://taffyblog.github.io/categories/DotNet-Core/"/>
    
    
      <category term="EF6" scheme="https://taffyblog.github.io/tags/EF6/"/>
    
  </entry>
  
  <entry>
    <title>解决WebApp手机返回键直接退出问题</title>
    <link href="https://taffyblog.github.io/2018/09/11/webappback/"/>
    <id>https://taffyblog.github.io/2018/09/11/webappback/</id>
    <published>2018-09-11T13:16:16.000Z</published>
    <updated>2022-03-08T07:51:05.964Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装vue-awesome-mui"><a href="#安装vue-awesome-mui" class="headerlink" title="安装vue-awesome-mui"></a>安装<code>vue-awesome-mui</code></h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-awesome-mui --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="更改main-js"><a href="#更改main-js" class="headerlink" title="更改main.js"></a>更改<code>main.js</code></h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Mui <span class="token keyword">from</span> <span class="token string">'vue-awesome-mui'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Mui<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="更改index-html"><a href="#更改index-html" class="headerlink" title="更改index.html"></a>更改<code>index.html</code></h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>    mui.init({      keyEventBind: {        backbutton: true //关闭back按键监听      }    });     //首页返回键处理     //处理逻辑：1秒内，连续两次按返回键，则退出应用；    var first = null;mui.back = function () {    //首次按键，提示 再按一次退出应用    if (!first) {    first = new Date().getTime();//记录第一次按下回退键的时间    mui.toast('再按一次退出应用');//给出提示    history.go(-1)//回退到上一页面    setTimeout(function () {//1s中后清除        first = null;    }, 1000);    } else {    if (new Date().getTime() - first &lt; 1000) {//如果两次按下的时间小于1s，        plus.runtime.quit();//那么就退出app    }    }};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装vue-awesome-mui&quot;&gt;&lt;a href=&quot;#安装vue-awesome-mui&quot; class=&quot;headerlink&quot; title=&quot;安装vue-awesome-mui&quot;&gt;&lt;/a&gt;安装&lt;code&gt;vue-awesome-mui&lt;/code&gt;&lt;/h3&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VueJs" scheme="https://taffyblog.github.io/tags/VueJs/"/>
    
  </entry>
  
  <entry>
    <title>VueJs路由入门</title>
    <link href="https://taffyblog.github.io/2018/08/14/vueJsRoute/"/>
    <id>https://taffyblog.github.io/2018/08/14/vueJsRoute/</id>
    <published>2018-08-14T13:15:16.000Z</published>
    <updated>2022-03-08T07:51:05.958Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">官方API</a></p><h2 id="第一步-引入vue-router包"><a href="#第一步-引入vue-router包" class="headerlink" title="第一步 引入vue-router包"></a>第一步 引入vue-router包</h2><p><code>npm install vue-router --save</code></p><h2 id="第二步-配置路由"><a href="#第二步-配置路由" class="headerlink" title="第二步 配置路由"></a>第二步 配置路由</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//配置路由</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Home<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/news'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> News<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> redirect<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//重定向  {path: '/*', redirect: '/home'}   //重定向</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三步-实例化VueRouter对象"><a href="#第三步-实例化VueRouter对象" class="headerlink" title="第三步 实例化VueRouter对象"></a>第三步 实例化<code>VueRouter</code>对象</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            routes<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//routes:routes</span>            linkActiveClass<span class="token punctuation">:</span> <span class="token string">'active'</span>  <span class="token comment" spellcheck="true">//路由激活时的样式</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<strong><code>VueRouter</code>中的<code>routes</code>如果省略k-v格式，则必须叫<code>routes</code>，如果不省略，则key必须叫<code>routes</code></strong></p><h2 id="第四步-在组件vue实例中引入路由"><a href="#第四步-在组件vue实例中引入路由" class="headerlink" title="第四步 在组件vue实例中引入路由"></a>第四步 在组件<code>vue</code>实例中引入路由</h2><pre class="line-numbers language-javascript"><code class="language-javascript">vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">'#my'</span><span class="token punctuation">,</span>        router<span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五步-配置HTML"><a href="#第五步-配置HTML" class="headerlink" title="第五步 配置HTML"></a>第五步 配置HTML</h2><pre class="line-numbers language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!-- 使用 router-link 组件来导航. --></span><span class="token comment" spellcheck="true">&lt;!-- 通过传入 `to` 属性指定链接. --></span><span class="token comment" spellcheck="true">&lt;!-- &lt;router-link> 默认会被渲染成一个 `&lt;a>` 标签 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/news<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>news<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 路由出口 --></span><span class="token comment" spellcheck="true">&lt;!-- 路由匹配到的组件将渲染在这里 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整示例如下"><a href="#完整示例如下" class="headerlink" title="完整示例如下"></a>完整示例如下</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>vue-router<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./node_modules/vue-router/dist/vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token comment" spellcheck="true">/*.router-link-active {            color: #f60;        }*/</span>        <span class="token selector"><span class="token class">.active</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#f60</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>        // 定义组件        var Home = {            template: '#home'        }        var News = {            template: '#news'        }        //配置路由        const routes = [            {path: '/home', component: Home},            {path: '/news', component: News},            {path: '/', redirect: '/home'}   //重定向  {path: '/*', redirect: '/home'}   //重定向        ];        const router = new VueRouter({            routes,//routes:routes            linkActiveClass: 'active'         });        var vm = null;        window.onload=function(){            vm = new Vue({                el:'#my',                router,                data:{                }            });        }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>组件home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>news<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>组件news<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/news<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>news<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://router.vuejs.org/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方API&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;第一步-引入vue-router包&quot;&gt;&lt;a href=&quot;#第一步-引入vue-router
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VueJs" scheme="https://taffyblog.github.io/tags/VueJs/"/>
    
  </entry>
  
  <entry>
    <title>VueJs组件间的数据交换</title>
    <link href="https://taffyblog.github.io/2018/07/31/vueJsCompoentData/"/>
    <id>https://taffyblog.github.io/2018/07/31/vueJsCompoentData/</id>
    <published>2018-07-31T13:11:16.000Z</published>
    <updated>2022-03-08T07:51:05.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="父组件传递数据到子组件"><a href="#父组件传递数据到子组件" class="headerlink" title="父组件传递数据到子组件"></a>父组件传递数据到子组件</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#my'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 2.0不允许挂载到html,body元素上</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        flag<span class="token punctuation">:</span><span class="token string">'my-hello'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//局部组件</span>        <span class="token string">'my-parent'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">'#parent'</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    page<span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">,</span>                    pname<span class="token punctuation">:</span><span class="token string">'parent'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token string">'my-child'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//子组件</span>                    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token punctuation">{</span>                            cage<span class="token punctuation">:</span><span class="token string">'10'</span><span class="token punctuation">,</span>                            cname<span class="token punctuation">:</span><span class="token string">'child'</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    template<span class="token punctuation">:</span><span class="token string">'#child'</span><span class="token punctuation">,</span>                    props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">,</span><span class="token string">'message2'</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//父传到子</span>                    <span class="token comment" spellcheck="true">/*props:{ //也可以是对象，允许配置高级设置，如类型判断、数据校验、设置默认值                        message:String,   //指定类型                        message2:String,                        name:{                            type:String,                            required:false                        },                        age:{                  //传的参数进行校验                            type:Number,                            required:false,   //是否必须                            default:10,       //默认值                            validator:function(value){   //是否进行校验                                return value>=0;                            }                        },                        user:{                            type:Object,                            default:function(){                                return {id:111}                            }                        }                    },*/</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>我是父组件，访问自己的数据：姓名-{{pname}},年龄-{{page}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 父调用子 父传入子 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-child</span> <span class="token attr-name">:message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span> <span class="token attr-name">:message2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pname<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-child</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>我是子组件，访问父的数据：姓名-{{message2}} ,年龄-{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>我是子组件，访问自己的数据：年龄-{{cage}}, 姓名-{{cname}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/comp2.png" alt="图片"></p><p>在本例中：</p><ol><li>在子组件中定义<code>props</code>,声明<code>message</code>、<code>message2</code></li><li>在父组件的<code>template</code>中调用子组件时，使用<code>message</code>、<code>message2</code>用于传递<code>page</code>、<code>pname</code>。</li><li>子组件中直接使用<code>message</code>和<code>message2</code>即可。</li></ol><blockquote><p>一个组件默认可以拥有任意数量的 <code>prop</code>，任何值都可以传递给任何 <code>prop</code>。在上述示例中，你会发现我们能够在组件实例中访问这个值，就像访问 <code>data</code> 中的值一样</p></blockquote><h2 id="子组件传递数据到父组件"><a href="#子组件传递数据到父组件" class="headerlink" title="子组件传递数据到父组件"></a>子组件传递数据到父组件</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#my'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 2.0不允许挂载到html,body元素上</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        flag<span class="token punctuation">:</span><span class="token string">'my-hello'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//局部组件</span>        <span class="token string">'my-parent'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">'#parent'</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    page<span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">,</span>                    pname<span class="token punctuation">:</span><span class="token string">'parent'</span><span class="token punctuation">,</span>                    cage<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>                    cname<span class="token punctuation">:</span><span class="token string">''</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token function">getSubData</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>cage <span class="token operator">=</span> age<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>cname <span class="token operator">=</span> name<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token string">'my-child'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//子组件</span>                    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token punctuation">{</span>                            cage<span class="token punctuation">:</span><span class="token string">'10'</span><span class="token punctuation">,</span>                            cname<span class="token punctuation">:</span><span class="token string">'child'</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    template<span class="token punctuation">:</span><span class="token string">'#child'</span><span class="token punctuation">,</span>                    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                        <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 此时this为子组件实例</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'e-child'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cname<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发送数据  emit发射/发送</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//常用  挂载结束状态  完成挂载</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>我是父组件，访问自己的数据：姓名-{{pname}},年龄-{{page}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token punctuation">></span></span>我是父组件，接收子的数据：姓名-{{cname}}, 年龄-{{cage}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 子调用父  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-child</span> <span class="token attr-name">@e-child</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getSubData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-child</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>我是子组件，访问自己的数据：年龄-{{cage}}, 姓名-{{cname}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>手动将子组件的数据向上传递给父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/comp2.png" alt="图片"></p><p>在本例中：</p><ol><li>子组件被挂载完毕时(<code>mounted</code>),执行了子组件中的<code>send</code>方法。</li><li>在<code>send</code>方法中，触发了<code>e-child</code>事件，而在父组件的<code>template</code>中将<code>e-child</code>指向了<code>getSubData</code>方法,并将<code>cname</code>、<code>cage</code>传递了过去。</li><li>父组件的<code>getSubData</code>接收到数据并向自身<code>data</code>赋值，数据展示完毕。</li><li>除了挂载完毕时自动传递，还可以点击按钮手动传递。</li></ol><h2 id="非父子组件间的数据传递"><a href="#非父子组件间的数据传递" class="headerlink" title="非父子组件间的数据传递"></a>非父子组件间的数据传递</h2><p>与子传父类似，通过<code>emit</code>向另一个组件的方法发送数据。</p><p>用<code>vm.$on</code>接收数据</p><p><strong>vm.$on:</strong>监听当前实例上的自定义事件。事件可以由<code>vm.$emit</code>触发。回调函数会接收所有传入事件触发函数的额外参数。</p><p>示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>非父子组件间的通信<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>        // 定义一个空对象，用于触发和监听实例        var Bus = new Vue();        var A = {            template: '#a',            data(){                return {                    name:'aaa'                }            },            methods:{                send(){                    Bus.$emit('data-a', this.name);                }            }        }        var B = {            template: '#b',            data(){                return {                    age:33                }            },            methods:{                send(){                    Bus.$emit('data-b', this.age);                }            }            // mounted(){            //     Bus.$emit('data-b', this.age)            // }        }        var C = {            template: '#c',            data(){                return {                    name:'',                    age:''                }            },            mounted(){                //这种写法取不到值 因为this指向Bus                 Bus.$on('data-a', function(name){                     this.name = name;                 });                 //箭头函数this总是指向函数定义生效时所在的对象                // 注意：箭头函数内部不会产生新的this，即就是当前实例，回调会                // 回调函数内部this为上面的空vue实例对象                /*Bus.$on('data-a', name =>{                    this.name = name;                });*/                Bus.$on('data-b', age =>{    //$on接收                    this.age = age;                });            }        }        var vm = null;        window.onload=function(){            vm = new Vue({                el:'#my',                data:{                },                components: { //局部组件                    'my-a': A,                    'my-b': B,                    'my-c': C                }            });        }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>组件a：{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数据发给C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>组件b：{{age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数据发给C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>组件c：{{name}} {{age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-c</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-c</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;父组件传递数据到子组件&quot;&gt;&lt;a href=&quot;#父组件传递数据到子组件&quot; class=&quot;headerlink&quot; title=&quot;父组件传递数据到子组件&quot;&gt;&lt;/a&gt;父组件传递数据到子组件&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-jav
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VueJs" scheme="https://taffyblog.github.io/tags/VueJs/"/>
    
  </entry>
  
  <entry>
    <title>VueJs组件插槽、动态组件、缓存组件</title>
    <link href="https://taffyblog.github.io/2018/07/30/vueJsComponentSendData/"/>
    <id>https://taffyblog.github.io/2018/07/30/vueJsComponentSendData/</id>
    <published>2018-07-30T12:16:16.000Z</published>
    <updated>2022-03-08T07:51:05.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在组件中插入自定义内容-slot"><a href="#在组件中插入自定义内容-slot" class="headerlink" title="在组件中插入自定义内容 slot"></a>在组件中插入自定义内容 <code>slot</code></h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myslot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-slot</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-slot'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span><span class="token string">'#myslot'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终生成的<code>html</code>代码为:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>slot</code>可以将<code>html</code>插入到<code>template</code>中指定<code>name</code>的<code>slot</code>标签处，将<code>slot</code>标签替换掉。</p></blockquote><h2 id="动态组件-is"><a href="#动态组件-is" class="headerlink" title="动态组件 :is"></a>动态组件 <code>:is</code></h2><p>有的时候，在不同组件之间进行动态切换是非常有用的，比如在一个多标签的界面里：</p><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/comp1.png" alt="图片"></p><p>上述内容可以通过 <code>Vue</code> 的 <code>&lt;component&gt;</code> 元素加一个特殊的 is 特性来实现：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 组件会在 `currentTabComponent` 改变时改变 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentTabComponent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在上述示例中，<code>currentTabComponent</code> 可以包括</p><ol><li>已注册组件的名字，或</li><li>一个组件的选项对象</li></ol><p>示例如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dynamic-component-demo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>    <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab in tabs<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>tab-button<span class="token punctuation">'</span>, { active: currentTab <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> tab }]<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentTab <span class="token punctuation">=</span> tab<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>{{ tab }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span>    <span class="token attr-name"><span class="token namespace">v-bind:</span>is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentTabComponent<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'tab-home'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>     template<span class="token punctuation">:</span> <span class="token string">'&lt;div>Home component&lt;/div>'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'tab-posts'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>     template<span class="token punctuation">:</span> <span class="token string">'&lt;div>Posts component&lt;/div>'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'tab-archive'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>     template<span class="token punctuation">:</span> <span class="token string">'&lt;div>Archive component&lt;/div>'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#dynamic-component-demo'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    currentTab<span class="token punctuation">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span>    tabs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Home'</span><span class="token punctuation">,</span> <span class="token string">'Posts'</span><span class="token punctuation">,</span> <span class="token string">'Archive'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    currentTabComponent<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">'tab-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentTab<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://jsfiddle.net/chrisvfritz/o3nycadu/" target="_blank" rel="noopener">完整代码</a></p><p><a href="https://cn.vuejs.org/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6" target="_blank" rel="noopener">API地址</a></p><h2 id="缓存动态组件-keep-alive"><a href="#缓存动态组件-keep-alive" class="headerlink" title="缓存动态组件 keep-alive"></a>缓存动态组件 <code>keep-alive</code></h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ol><li><code>include</code> - 字符串或正则表达式。只有匹配的组件会被缓存。</li><li><code>exclude</code> - 字符串或正则表达式。任何匹配的组件都不会被缓存。</li></ol><blockquote><p><code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <code>&lt;transition&gt;</code> 相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。</p></blockquote><p>当组件在 <code>&lt;keep-alive&gt;</code> 内被切换，它的 <code>activated</code> 和 <code>deactivated</code> 这两个生命周期钩子函数将会被对应执行。</p><p>主要用于保留组件状态或避免重新渲染。</p><p>基本用法：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 基本 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 多个条件判断的子组件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comp-a</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a <span class="token punctuation">></span> 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comp-a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comp-b</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comp-b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 和 `&lt;transition>` 一起使用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在组件中插入自定义内容-slot&quot;&gt;&lt;a href=&quot;#在组件中插入自定义内容-slot&quot; class=&quot;headerlink&quot; title=&quot;在组件中插入自定义内容 slot&quot;&gt;&lt;/a&gt;在组件中插入自定义内容 &lt;code&gt;slot&lt;/code&gt;&lt;/h2&gt;&lt;pre
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VueJs" scheme="https://taffyblog.github.io/tags/VueJs/"/>
    
  </entry>
  
  <entry>
    <title>VueJs通过webpack启服务运行VUE模块文件</title>
    <link href="https://taffyblog.github.io/2018/07/26/vueJswebpack/"/>
    <id>https://taffyblog.github.io/2018/07/26/vueJswebpack/</id>
    <published>2018-07-26T12:13:16.000Z</published>
    <updated>2022-03-08T07:51:05.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><pre class="line-numbers language-bash"><code class="language-bash">cnpm initcnpm i vue –s   cnpm i -g webpack-cli<span class="token function">npm</span> i -D webpack webpack-cli cnpm i -D webpack webpack-dev-server <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>I install    -s –save</p></blockquote><p>预编译模板：</p><pre class="line-numbers language-bash"><code class="language-bash">cnpm i -D vue-loader vue-html-loader vue-style-loader　vue-template-compilercnpm i -D css-loader file-loader style-loader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">cnpm i -D babel-loader babel-core babel-preset-env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>使用<code>-D</code>会安装到<code>devDependencies</code>,使用<code>-S</code>会安装到<code>dependencies</code>，分别表示生产环境和开发环境的依赖。例如<code>jquery</code>，<code>vue</code>属于项目运行的依赖插件，需要放入<code>dependencies</code>中，像<code>gulp</code>，<code>webpack</code>等打包工具，在开发时发挥作用，存在开发环境即可。</p></blockquote><h3 id="配置package-json"><a href="#配置package-json" class="headerlink" title="配置package.json"></a>配置package.json</h3><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"^2.5.16"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"babel-core"</span><span class="token operator">:</span> <span class="token string">"^6.26.3"</span><span class="token punctuation">,</span>    <span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"^7.1.5"</span><span class="token punctuation">,</span>    <span class="token property">"babel-preset-env"</span><span class="token operator">:</span> <span class="token string">"^1.7.0"</span><span class="token punctuation">,</span>    <span class="token property">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"file-loader"</span><span class="token operator">:</span> <span class="token string">"^1.1.11"</span><span class="token punctuation">,</span>    <span class="token property">"style-loader"</span><span class="token operator">:</span> <span class="token string">"^0.21.0"</span><span class="token punctuation">,</span>    <span class="token property">"vue-html-loader"</span><span class="token operator">:</span> <span class="token string">"^1.2.4"</span><span class="token punctuation">,</span>    <span class="token property">"vue-loader"</span><span class="token operator">:</span> <span class="token string">"^15.2.6"</span><span class="token punctuation">,</span>    <span class="token property">"vue-style-loader"</span><span class="token operator">:</span> <span class="token string">"^4.1.1"</span><span class="token punctuation">,</span>    <span class="token property">"vue-template-compiler"</span><span class="token operator">:</span> <span class="token string">"^2.5.16"</span><span class="token punctuation">,</span>    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^4.16.3"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^3.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.1.5"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"webpack-vue"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --open"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意<code>main</code>节点配置了入口;<code>scripts</code>的<code>dev</code>配置了服务启动的快捷命令(可以不叫<code>dev</code>);</p></blockquote><blockquote><p><code>dependencies</code>是开发时需要依赖的模块，<code>devDependencies</code>是部署到生产环境需要的模块。</p></blockquote><h2 id="配置webpack-webpack-config-js"><a href="#配置webpack-webpack-config-js" class="headerlink" title="配置webpack  webpack.config.js"></a>配置<code>webpack</code>  webpack.config.js</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//模块</span>    entry<span class="token punctuation">:</span> <span class="token string">'./main.js'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//入口文件</span>    output<span class="token punctuation">:</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//将VUE文件编译输出</span>        path<span class="token punctuation">:</span> __dirname<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//项目根路径 是node.js中的一个全局变量,它指向当前执行脚本所在的目录</span>        filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span>   <span class="token comment" spellcheck="true">//所有的JS放入build.js</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">// make sure to include the plugin for the magic</span>        <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    module<span class="token punctuation">:</span><span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//加载规则</span>            test<span class="token punctuation">:</span><span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//vue文件</span>            loader<span class="token punctuation">:</span><span class="token string">'vue-loader'</span>    <span class="token comment" spellcheck="true">//加载器</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            test<span class="token punctuation">:</span><span class="token regex">/\.js$/</span><span class="token punctuation">,</span>            loader<span class="token punctuation">:</span><span class="token string">'babel-loader'</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//ES6转换，所有的ES6文件加载及转换</span>            exclude<span class="token punctuation">:</span> <span class="token operator">/</span>node_modules<span class="token operator">/</span>     <span class="token comment" spellcheck="true">//排除这个目录</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">//vue-loader@15.*之后除了必须带有VueLoaderPlugin 之外，还需另外单独配置css-loader。</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>    <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写-babelrc"><a href="#编写-babelrc" class="headerlink" title="编写.babelrc"></a>编写<code>.babelrc</code></h2><p>babel是什么?</p><blockquote><p>babel官网正中间一行黄色大字写着“babel is a javascript compiler”，翻译一下就是babel是一个javascript转译器。为什么会有babel存在呢？原因是javascript在不断的发展，但是浏览器的发展速度跟不上。以es6为例，es6中为javascript增加了箭头函数、块级作用域等新的语法和Symbol、Promise等新的数据类型，但是这些语法和数据类型并不能够马上被现在的浏览器全部支持，为了能在现有的浏览器上使用js新的语法和新的数据类型，就需要使用一个转译器，将javascript中新增的特性转为现代浏览器能理解的形式。babel就是做这个方面的转化工作。</p></blockquote><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">"module"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编写入口文件-main-js"><a href="#编写入口文件-main-js" class="headerlink" title="编写入口文件 main.js"></a>编写入口文件 <code>main.js</code></h2><blockquote><p>main.js是入口文件 webpack编译会通过根目录文件打包到build.js</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//渲染App.vue</span>    <span class="token comment" spellcheck="true">//render:function(createElement) {</span>        <span class="token comment" spellcheck="true">//return createElement(App);</span>    <span class="token comment" spellcheck="true">//}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="建立-index-html-引用-build-js"><a href="#建立-index-html-引用-build-js" class="headerlink" title="建立 index.html 引用 build.js"></a>建立 index.html 引用 build.js</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>vue-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>build.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时<code>webpack</code> 将<code>js/vue</code>打包到<code>build.js</code>。<br>先执行<code>npm install</code> 或者<code>cnpm install</code>。</p><h2 id="建立Vue模块文件"><a href="#建立Vue模块文件" class="headerlink" title="建立Vue模块文件"></a>建立Vue模块文件</h2><ol><li>App.vue</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome to<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;user-list>&lt;/user-list> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>User</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>User</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>  import User from './components/User.vue'  export default {    data(){      return {        name: 'jack'      }    },    methods:{      change(){        this.name = 'tom';      }    },    components:{      // 'user-list':User      User  //相当于User:User    }  }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token punctuation">></span></span><span class="token style language-css">   <span class="token selector"><span class="token id">#app</span></span><span class="token punctuation">{</span>     <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#ccc</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>User.vue</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>用户列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>v in users<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{v}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>  console.log(111);  export default {    data(){      return {        users:['tom', 'jack', 'mike']      }    }  }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- scoped表示该样式只在当前组件中有效 --></span><span class="token comment" spellcheck="true">&lt;!-- 加了scoped后，就不影响app.vue中的h1，否则影响 --></span><span class="token comment" spellcheck="true">&lt;!-- 注意：修改style后，页面热加载有问题，需手动刷新 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">   <span class="token selector">h1</span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>   <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码结构如下：</p><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/webpack.png" alt="图片"></p><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>执行<code>npm run dev</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h2&gt;&lt;h3 id=&quot;安装命令&quot;&gt;&lt;a href=&quot;#安装命令&quot; class=&quot;headerlink&quot; title=&quot;安装命令&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VueJs" scheme="https://taffyblog.github.io/tags/VueJs/"/>
    
  </entry>
  
  <entry>
    <title>VueJs自定义指令和组件</title>
    <link href="https://taffyblog.github.io/2018/07/25/vuejscmd/"/>
    <id>https://taffyblog.github.io/2018/07/25/vuejscmd/</id>
    <published>2018-07-25T13:16:16.000Z</published>
    <updated>2022-03-08T07:51:05.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>除了核心功能默认内置的指令 (<code>v-model</code> 和 <code>v-show</code>)，<code>Vue</code> 也允许注册自定义指令。注意，在 <code>Vue2.0</code> 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 <code>DOM</code> 元素进行底层操作，这时候就会用到自定义指令。</p><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 自定义指定可操作DOM 注：必须加前缀，v-</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 可以有参数el binding, binding中包括一些属性：name,value,</span>    <span class="token comment" spellcheck="true">// binding.vlaue => 绑定的变量</span>    <span class="token comment" spellcheck="true">// binding.expression => 表达式  v-my-directive="1+1"</span>    <span class="token comment" spellcheck="true">// binding.arg => 传参 v-on:click </span>    <span class="token comment" spellcheck="true">// binding.modifiers => 如: v-on:click.prevent 修饰符可以有多个</span>    <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//常用</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">.</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"指令第一次绑定到元素上时调用，只调用一次，可执行初始化操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"被绑定元素插入到dom中时调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"被绑定元素所在模板更新时调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">componentUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"被绑定元素所在模板完成一次更新周期时调用"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"指令与元素解绑时调用，只调用一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-hello</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">v-hello:</span>foo</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    bind<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">)</span><span class="token punctuation">{</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>binding<span class="token punctuation">.</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/cmd1.png" alt="图片"></p><p>控制台输出：</p><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/cmd2.png" alt="图片"></p><blockquote><p><code>v-hello:foo</code>，冒号后面表示要传递的参数。</p></blockquote><p><a href="https://cn.vuejs.org/v2/guide/custom-directive.html#ad" target="_blank" rel="noopener">API地址</a></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3><h4 id="外部组件"><a href="#外部组件" class="headerlink" title="外部组件"></a>外部组件</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//创建方式一</span><span class="token keyword">var</span> myComponent<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token string">"&lt;h2>Hello world&lt;/h2>"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"firstcom"</span><span class="token punctuation">,</span>myComponent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建方式二</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"myvue"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span><span class="token string">"&lt;h2>你好 VUE&lt;/h2>"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>myvue</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>myvue</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>firstcom</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>firstcom</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/comon1.png" alt="图片"></p><h4 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">"firstcom"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>             template<span class="token punctuation">:</span><span class="token string">"&lt;h2>Hello world&lt;/h2>"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"myvue"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">"&lt;h2>你好 VUE&lt;/h2>"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意有<code>s</code></p></blockquote><h3 id="使用数据"><a href="#使用数据" class="headerlink" title="使用数据"></a>使用数据</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">"myvue"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">"&lt;h2>{{name}}&lt;/h2>"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span><span class="token string">"张三"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>每个组件都是独立的，不能直接使用<code>vue</code>实例中的数据。<strong>一个组件的 <code>data</code> 选项必须是一个函数</strong></p></blockquote><h3 id="使用HTML模板"><a href="#使用HTML模板" class="headerlink" title="使用HTML模板"></a>使用HTML模板</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">"myvue"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span><span class="token string">"#mytemp"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span> arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mytemp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in arr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>myvue</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>myvue</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意<code>template</code>需要写在<code>body</code>外部。</p></blockquote><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/comon2.png" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自定义指令&quot;&gt;&lt;a href=&quot;#自定义指令&quot; class=&quot;headerlink&quot; title=&quot;自定义指令&quot;&gt;&lt;/a&gt;自定义指令&lt;/h2&gt;&lt;h3 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VueJs" scheme="https://taffyblog.github.io/tags/VueJs/"/>
    
  </entry>
  
  <entry>
    <title>VueJs实例属性</title>
    <link href="https://taffyblog.github.io/2018/07/25/vueAttr/"/>
    <id>https://taffyblog.github.io/2018/07/25/vueAttr/</id>
    <published>2018-07-25T12:10:16.000Z</published>
    <updated>2022-03-08T07:51:05.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取data中的属性"><a href="#获取data中的属性" class="headerlink" title="获取data中的属性"></a>获取data中的属性</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!哈哈哈哈哈哈哈哈哈'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">Hello Vue<span class="token operator">!</span>哈哈哈哈哈哈哈哈哈<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取实例关联的DOM"><a href="#获取实例关联的DOM" class="headerlink" title="获取实例关联的DOM"></a>获取实例关联的DOM</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!哈哈哈哈哈哈哈哈哈'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取自定义属性"><a href="#获取自定义属性" class="headerlink" title="获取自定义属性"></a>获取自定义属性</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!哈哈哈哈哈哈哈哈哈'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span><span class="token string">"我是自定义属性"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//我是自定义属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ref-获取单个标签或组件"><a href="#ref-获取单个标签或组件" class="headerlink" title="ref 获取单个标签或组件"></a>ref 获取单个标签或组件</h2><p>ref 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- `vm.$refs.p` will be the DOM node --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- `vm.$refs.child` will be the child component instance --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-component</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-component</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>vm.$refs.child</code>获取<code>child-component</code>标签。</p><blockquote><p>关于 ref 注册时间的重要说明：因为 ref 本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！$refs 也不是响应式的，因此你不应该试图用它在模板中做数据绑定。</p></blockquote><h2 id="手动挂载VUE实例-mount"><a href="#手动挂载VUE实例-mount" class="headerlink" title="手动挂载VUE实例 $mount"></a>手动挂载VUE实例 <code>$mount</code></h2><blockquote><p>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在页面加载完成时得到DOM值"><a href="#在页面加载完成时得到DOM值" class="headerlink" title="在页面加载完成时得到DOM值"></a>在页面加载完成时得到DOM值</h2><p><code>vm.$nextTick( [callback] )</code></p><blockquote><p>将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 <code>Vue.nextTick</code> 一样，不同的是回调的 this 自动绑定到调用它的实例上。</p></blockquote><p>直接获取DOM:</p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span> {{ show() }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span>    <span class="token punctuation">{</span>        show<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash"><code class="language-bash">null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加上<code>$nextTick</code>:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span>    <span class="token punctuation">{</span>        show<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash"><code class="language-bash">Hello Vue<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>防止页面未渲染导致DOM数据获取失败。</p></blockquote><h2 id="动态添加和删除数据对象的属性"><a href="#动态添加和删除数据对象的属性" class="headerlink" title="动态添加和删除数据对象的属性"></a>动态添加和删除数据对象的属性</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>show<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>        user<span class="token punctuation">:</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span><span class="token number">18</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        add<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>hobby<span class="token operator">=</span><span class="token string">"game"</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        show<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依次点击<code>add</code>和<code>show</code>按钮，输出如下：</p><pre class="line-numbers language-bash"><code class="language-bash">oknull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由此可见，对于对象类型的数据，直接扩展属性是不行的。</p><h3 id="set-delete-增加和删除数据对象属性"><a href="#set-delete-增加和删除数据对象属性" class="headerlink" title="set delete 增加和删除数据对象属性"></a>set delete 增加和删除数据对象属性</h3><blockquote><p>受现代 <code>JavaScript</code> 的限制 (以及废弃 <code>Object.observe</code>)，<code>Vue</code> 不能检测到对象属性的添加或删除。由于 <code>Vue</code> 会在初始化实例时对属性执行 <code>getter/setter</code> 转化过程，所以属性必须在 <code>data</code> 对象上存在才能让 <code>Vue</code> 转换它，这样才能让它是响应的。</p></blockquote><p>如果直接增加属性：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{user.hobby}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>        user<span class="token punctuation">:</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span><span class="token number">18</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        add<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>hobby<span class="token operator">=</span><span class="token string">"game"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击<code>add</code>按钮，毫无反应：</p><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/att1.png" alt="图片"></p><h4 id="使用-set增加属性"><a href="#使用-set增加属性" class="headerlink" title="使用$set增加属性"></a>使用<code>$set</code>增加属性</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>        user<span class="token punctuation">:</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span><span class="token number">18</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        add<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">,</span><span class="token string">"hobby"</span><span class="token punctuation">,</span><span class="token string">"game"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击<code>add</code>按钮，顺利显示<code>hobby</code>属性：</p><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/att2.png" alt="图片"></p><h4 id="使用-delete删除属性"><a href="#使用-delete删除属性" class="headerlink" title="使用$delete删除属性"></a>使用<code>$delete</code>删除属性</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>        user<span class="token punctuation">:</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span><span class="token number">18</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        add<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://cn.vuejs.org/v2/api/#vm-options" target="_blank" rel="noopener">API地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;获取data中的属性&quot;&gt;&lt;a href=&quot;#获取data中的属性&quot; class=&quot;headerlink&quot; title=&quot;获取data中的属性&quot;&gt;&lt;/a&gt;获取data中的属性&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-javascr
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VueJs" scheme="https://taffyblog.github.io/tags/VueJs/"/>
    
  </entry>
  
  <entry>
    <title>VueJs生命周期、计算属性和侦听器</title>
    <link href="https://taffyblog.github.io/2018/07/20/vueLifeCycle/"/>
    <id>https://taffyblog.github.io/2018/07/20/vueLifeCycle/</id>
    <published>2018-07-20T13:13:16.000Z</published>
    <updated>2022-03-08T07:51:05.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VUE生命周期"><a href="#VUE生命周期" class="headerlink" title="VUE生命周期"></a>VUE生命周期</h2><h3 id="生命周期说明"><a href="#生命周期说明" class="headerlink" title="生命周期说明"></a>生命周期说明</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#my'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 2.0不允许挂载到html,body元素上</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        msg<span class="token punctuation">:</span><span class="token string">'welcome'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">=</span><span class="token string">"欢迎"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//销毁实例</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'loading'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'组件实例刚刚创建，还未进行数据观测和事件配置'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建前状态  el和data并未初始化</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//常用  创建完毕状态   完成了data数据的初始化  el没有</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"实例已经创建完成，并且已经进行数据观测和事件配置"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//挂载前状态 完成了el和data初始化</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">=</span><span class="token string">"112233"</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"模板编译之前，还没挂载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//常用  挂载结束状态  完成挂载</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"模板编译之后，已经挂载，此时才会有渲染页面，才能看到页面上数据的显示"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//更新前状态</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"组件更新之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//更新完成状态   由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"组件更新之后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//销毁前状态</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"组件销毁之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//销毁完成状态</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'组件销毁之后'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">API地址</a></p><p>图示：</p><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/life.png" alt="图片"></p><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><blockquote><p>计算属性可用于存储和处理数据。对于任何复杂逻辑，都应当使用计算属性。</p></blockquote><h3 id="简单使用示例-反转字符串"><a href="#简单使用示例-反转字符串" class="headerlink" title="简单使用示例(反转字符串)"></a>简单使用示例(反转字符串)</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span><span class="token punctuation">{</span>        reverseMsg<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ reverseMsg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/computed1.png" alt="图片"></p><blockquote><p>计算属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。注意，如果某个依赖 (比如非响应式属性) 在该实例范畴之外，则计算属性是不会被更新的。也就是说，<strong>如果需要更改计算属性的值，则必须使用<code>getter</code>和<code>setter</code>的方式，不能直接更改计算属性</strong>。</p></blockquote><h3 id="使用getter-setter"><a href="#使用getter-setter" class="headerlink" title="使用getter setter"></a>使用getter setter</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 仅读取</span>    aDouble<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">*</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 读取和设置</span>    aPlus<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token number">1</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> v <span class="token operator">-</span> <span class="token number">1</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>vm<span class="token punctuation">.</span>aPlus   <span class="token comment" spellcheck="true">// => 2</span>vm<span class="token punctuation">.</span>aPlus <span class="token operator">=</span> <span class="token number">3</span>vm<span class="token punctuation">.</span>a       <span class="token comment" spellcheck="true">// => 2</span>vm<span class="token punctuation">.</span>aDouble <span class="token comment" spellcheck="true">// => 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a>计算属性缓存 vs 方法</h3><blockquote><p>你可能已经注意到我们可以通过在表达式中调用方法来达到同样的效果;我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的依赖进行缓存的</strong>。计算属性只有在它的相关依赖发生改变时才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p></blockquote><blockquote><p>相比之下，每当触发重新渲染时，调用方法将总会再次执行函数。我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 A，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 A 。如果没有缓存，我们将不可避免的多次执行 A 的 getter！<strong>如果你不希望有缓存，请用方法来替代</strong>。</p></blockquote><p><a href="https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7" target="_blank" rel="noopener">API地址</a></p><h2 id="watch侦听器"><a href="#watch侦听器" class="headerlink" title="watch侦听器"></a>watch侦听器</h2><blockquote><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 <code>Vue</code> 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p></blockquote><p>官方示例:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    d<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    e<span class="token punctuation">:</span> <span class="token punctuation">{</span>      f<span class="token punctuation">:</span> <span class="token punctuation">{</span>        g<span class="token punctuation">:</span> <span class="token number">5</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'new: %s, old: %s'</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 方法名</span>    b<span class="token punctuation">:</span> <span class="token string">'someMethod'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 深度 watcher</span>    c<span class="token punctuation">:</span> <span class="token punctuation">{</span>      handler<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      deep<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 该回调将会在侦听开始之后被立即调用</span>    d<span class="token punctuation">:</span> <span class="token punctuation">{</span>      handler<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      immediate<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    e<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token keyword">function</span> handle1 <span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">function</span> handle2 <span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// watch vm.e.f's value: {g: 5}</span>    <span class="token string">'e.f'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>vm<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// => new: 2, old: 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意事项：</p><blockquote><p>注意，<em>不应该使用箭头函数来定义 watcher 函数</em> (例如 <code>searchQuery: newValue =&gt; this.updateAutocomplete(newValue))</code>。理由是箭头函数绑定了父级作用域的上下文，所以 <code>this</code> 将不会按照期望指向 <code>Vue</code> 实例，<code>this.updateAutocomplete</code> 将是 <code>undefined</code>。</p></blockquote><h3 id="外部定义watch"><a href="#外部定义watch" class="headerlink" title="外部定义watch"></a>外部定义<code>watch</code></h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//方式2</span>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name被修改了'</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="watch-VS-computed"><a href="#watch-VS-computed" class="headerlink" title="watch VS computed"></a><code>watch</code> VS <code>computed</code></h2><p>在vue的 模板内（{{}}）是可以写一些简单的js表达式的 ，很便利。但是如果在页面中使用大量或是复杂的表达式去处理数据，对页面的维护会有很大的影响。这个时候就需要用到<code>computed</code> 计算属性来处理复杂的逻辑运算。</p><p><code>computed</code>优点： </p><ul><li>在数据未发生变化时，优先读取缓存。<code>computed</code> 计算属性只有在相关的<strong>数据发生变化时</strong>才会改变要计算的属性，当相关数据没有变化是，它会<strong>读取缓存</strong>。而不必像 <code>motheds</code>方法 和 <code>watch</code> 方法是的每次都去执行函数。</li></ul><p>demo:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>名字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{computedAge}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span><span class="token string">"sdf"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>        text<span class="token punctuation">:</span><span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>newvalue<span class="token punctuation">,</span>oldvalue<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'watch》》》'</span><span class="token operator">+</span><span class="token string">"我的名字改成了："</span><span class="token operator">+</span>newvalue<span class="token operator">+</span><span class="token string">",原来的名字叫："</span><span class="token operator">+</span>oldvalue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span><span class="token punctuation">{</span>        computedAge<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token keyword">get</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                 <span class="token keyword">return</span> <span class="token string">'computed》》》'</span><span class="token operator">+</span><span class="token string">'我的年龄'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">'我的姓名'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初次加载效果：</p><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/wc1.png" alt="图片"></p><p>更改<code>age</code>值之后：</p><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/wc2.png" alt="图片"></p><p>更改<code>name</code>值之后:</p><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/wc3.png" alt="图片"></p><h2 id="watch监视对象变化"><a href="#watch监视对象变化" class="headerlink" title="watch监视对象变化"></a><code>watch</code>监视对象变化</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>        user<span class="token punctuation">:</span><span class="token punctuation">{</span>             name<span class="token punctuation">:</span><span class="token string">"sdf"</span><span class="token punctuation">,</span>             age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        text<span class="token punctuation">:</span><span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span><span class="token punctuation">{</span>        user<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">handler</span><span class="token punctuation">(</span>newvalue<span class="token punctuation">,</span>oldvalue<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'watch》》》'</span><span class="token operator">+</span><span class="token string">"我的名字改成了："</span><span class="token operator">+</span>newvalue<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">",原来的名字叫："</span><span class="token operator">+</span>oldvalue<span class="token punctuation">.</span>age<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            deep<span class="token punctuation">:</span><span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>handler表示默认执行的函数。</p></li><li><p>表示监视对象的属性变化,false则handler函数不执行,但此时看不到<code>newValue</code>与<code>oldValue</code>区别, 为了发现对象内部值的变化，可以在选项参数中指定 <code>deep: true</code> 。注意:监听数组的变动不需要这么做。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;VUE生命周期&quot;&gt;&lt;a href=&quot;#VUE生命周期&quot; class=&quot;headerlink&quot; title=&quot;VUE生命周期&quot;&gt;&lt;/a&gt;VUE生命周期&lt;/h2&gt;&lt;h3 id=&quot;生命周期说明&quot;&gt;&lt;a href=&quot;#生命周期说明&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VueJs" scheme="https://taffyblog.github.io/tags/VueJs/"/>
    
  </entry>
  
  <entry>
    <title>VueJs过滤器</title>
    <link href="https://taffyblog.github.io/2018/07/17/vueJsFilter/"/>
    <id>https://taffyblog.github.io/2018/07/17/vueJsFilter/</id>
    <published>2018-07-17T13:15:16.000Z</published>
    <updated>2022-03-08T07:51:05.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内部过滤器"><a href="#内部过滤器" class="headerlink" title="内部过滤器"></a>内部过滤器</h2><p><code>Vue.js</code> 允许你自定义过滤器，可被用于一些常见的文本格式化。</p><p>简单示例如下:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{ 3.1415926 | number(2)}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    filters<span class="token punctuation">:</span><span class="token punctuation">{</span>        number<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/filter1.png" alt="图片"></p><p>以上是对数字进行保留两位小数的四舍五入，<code>data</code>是数据,<code>n</code>是传入参数。</p><h2 id="外部过滤器"><a href="#外部过滤器" class="headerlink" title="外部过滤器"></a>外部过滤器</h2><blockquote><p>当过滤器定义为内部过滤器时，则只能在当前实例中使用，定义为外部过滤器则在所有实例中可以公用。</p></blockquote><p>使用<code>Vue.filter</code>即可：</p><pre class="line-numbers language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>     <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span><span class="token punctuation">,</span>        currentTime<span class="token punctuation">:</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    filters<span class="token punctuation">:</span><span class="token punctuation">{</span>        number<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{currentTime | date}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/filter2.png" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;内部过滤器&quot;&gt;&lt;a href=&quot;#内部过滤器&quot; class=&quot;headerlink&quot; title=&quot;内部过滤器&quot;&gt;&lt;/a&gt;内部过滤器&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Vue.js&lt;/code&gt; 允许你自定义过滤器，可被用于一些常见的文本格式化。&lt;/p&gt;
&lt;p&gt;简单示例如
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VueJs" scheme="https://taffyblog.github.io/tags/VueJs/"/>
    
  </entry>
  
  <entry>
    <title>VueJs事件操作</title>
    <link href="https://taffyblog.github.io/2018/07/16/vueJsEvent/"/>
    <id>https://taffyblog.github.io/2018/07/16/vueJsEvent/</id>
    <published>2018-07-16T13:15:16.000Z</published>
    <updated>2022-03-08T07:51:05.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h2><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p><code>HTML</code>的事件会按照<code>DOM</code>的结构由内向外冒泡触发，如下所示：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show3()<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show2()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A2        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show1()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        show1<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        show2<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        show3<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击<code>A1</code>之后的输出如下：</p><pre class="line-numbers language-bash"><code class="language-bash">111222333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="普通方式阻止事件冒泡"><a href="#普通方式阻止事件冒泡" class="headerlink" title="普通方式阻止事件冒泡"></a>普通方式阻止事件冒泡</h3><blockquote><p><code>stopPropagation()</code>方法可以阻止事件冒泡。</p></blockquote><p>将<code>button</code>的事件加上<code>$event</code>参数：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show3()<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show2()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A2        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show1($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>event</code>参数调用<code>stopPropagation</code>方法。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        show1<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        show2<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        show3<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-bash"><code class="language-bash">111<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用vue的方式阻止事件冒泡"><a href="#使用vue的方式阻止事件冒泡" class="headerlink" title="使用vue的方式阻止事件冒泡"></a>使用vue的方式阻止事件冒泡</h3><blockquote><p>只需在事件后面加上<code>.stop</code>即可</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show3()<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show2()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A2        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show1()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="取消默认动作"><a href="#取消默认动作" class="headerlink" title="取消默认动作"></a>取消默认动作</h2><p><code>html</code>标签都有一些默认的行为，比如<code>form</code>的提交，<code>a</code>标签的跳转,<br>原生js可以使用<code>preventDefault</code>取消默认动作，用法和阻止事件冒泡一样。</p><p>vuejs的用法：</p><p>只需在事件后加上<code>.prevent</code>即可</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show1()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>点击<code>A1</code>标签不会跳转到百度。</p><h2 id="只触发一次"><a href="#只触发一次" class="headerlink" title="只触发一次"></a>只触发一次</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">@click.once</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show1()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>多次点击<code>A1</code>标签，<code>show1</code>也只会被触发一次。</p><p><a href="https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6" target="_blank" rel="noopener">API地址</a></p><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Alt + C --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.alt.67</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Ctrl + Click --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click.ctrl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Do something<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://cn.vuejs.org/v2/guide/events.html#%E7%B3%BB%E7%BB%9F%E4%BF%AE%E9%A5%B0%E9%94%AE" target="_blank" rel="noopener">API地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;阻止事件冒泡&quot;&gt;&lt;a href=&quot;#阻止事件冒泡&quot; class=&quot;headerlink&quot; title=&quot;阻止事件冒泡&quot;&gt;&lt;/a&gt;阻止事件冒泡&lt;/h2&gt;&lt;h3 id=&quot;事件冒泡&quot;&gt;&lt;a href=&quot;#事件冒泡&quot; class=&quot;headerlink&quot; title=&quot;事
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VueJs" scheme="https://taffyblog.github.io/tags/VueJs/"/>
    
  </entry>
  
  <entry>
    <title>VueJs表单数据操作</title>
    <link href="https://taffyblog.github.io/2018/07/12/vuejstemplete/"/>
    <id>https://taffyblog.github.io/2018/07/12/vuejstemplete/</id>
    <published>2018-07-12T13:13:16.000Z</published>
    <updated>2022-03-08T07:51:05.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现根据条件禁用DOM"><a href="#实现根据条件禁用DOM" class="headerlink" title="实现根据条件禁用DOM"></a>实现根据条件禁用DOM</h2><p>示例如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        value<span class="token punctuation">:</span> <span class="token string">'a'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>b<span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="获取设置复选框和单选按钮值"><a href="#获取设置复选框和单选按钮值" class="headerlink" title="获取设置复选框和单选按钮值"></a>获取设置复选框和单选按钮值</h2><h3 id="复选框示例"><a href="#复选框示例" class="headerlink" title="复选框示例"></a>复选框示例</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        values<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>values<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>a    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>values<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>b    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>values<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>c    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>values<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>d    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{values}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/ck.png" alt="图片"></p><h3 id="单选按钮示例"><a href="#单选按钮示例" class="headerlink" title="单选按钮示例"></a>单选按钮示例</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        values<span class="token punctuation">:</span><span class="token string">'0'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>values<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>男    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>values<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>女    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{values}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取下拉列表值"><a href="#获取下拉列表值" class="headerlink" title="获取下拉列表值"></a>获取下拉列表值</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        items<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>text<span class="token punctuation">:</span><span class="token string">"老师"</span><span class="token punctuation">,</span>value<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>text<span class="token punctuation">:</span><span class="token string">"学生"</span><span class="token punctuation">,</span>value<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>text<span class="token punctuation">:</span><span class="token string">"家长"</span><span class="token punctuation">,</span>value<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        selectvalue<span class="token punctuation">:</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectvalue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item.text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{selectvalue}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/TaffyBlog/TaffyBlog.github.io/master/images/select.png" alt="图片"></p><h2 id="常用修饰符"><a href="#常用修饰符" class="headerlink" title="常用修饰符"></a>常用修饰符</h2><h3 id="不允许输入空格"><a href="#不允许输入空格" class="headerlink" title="不允许输入空格"></a>不允许输入空格</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加上<code>trim</code>，输入空格会被自动移除</p><h2 id="引用多个样式"><a href="#引用多个样式" class="headerlink" title="引用多个样式"></a>引用多个样式</h2><h3 id="数组方式"><a href="#数组方式" class="headerlink" title="数组方式"></a>数组方式</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        aa<span class="token punctuation">:</span><span class="token string">'aa-class'</span><span class="token punctuation">,</span>        bb<span class="token punctuation">:</span><span class="token string">'bb-class'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[aa,bb]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="对象方式"><a href="#对象方式" class="headerlink" title="对象方式"></a>对象方式</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        aa<span class="token punctuation">:</span><span class="token string">'aa-class'</span><span class="token punctuation">,</span>        bb<span class="token punctuation">:</span><span class="token string">'bb-class'</span><span class="token punctuation">,</span>        flag<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{aa:flag,bb:flag}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实现根据条件禁用DOM&quot;&gt;&lt;a href=&quot;#实现根据条件禁用DOM&quot; class=&quot;headerlink&quot; title=&quot;实现根据条件禁用DOM&quot;&gt;&lt;/a&gt;实现根据条件禁用DOM&lt;/h2&gt;&lt;p&gt;示例如下：&lt;/p&gt;
&lt;pre class=&quot;line-numbers
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VueJs" scheme="https://taffyblog.github.io/tags/VueJs/"/>
    
  </entry>
  
  <entry>
    <title>VueJs内置指令入门</title>
    <link href="https://taffyblog.github.io/2018/07/10/vuejsInInstruct/"/>
    <id>https://taffyblog.github.io/2018/07/10/vuejsInInstruct/</id>
    <published>2018-07-10T13:13:16.000Z</published>
    <updated>2022-03-08T07:51:05.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p><code>v-model</code> 可用于双向数据绑定 ，主要用于表单，表单值发生变化，数据也会变化。同样的，数据发生变化，表单值也会发生变化。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'你好 Vue!'</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span><span class="token string">'xxx'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span>        work<span class="token punctuation">:</span><span class="token string">'设计师'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{ msg }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>    名字：{{name}}    年龄：{{age}}    工作：{{work}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>v-model</code>的值指向data中的一项数据即可。</p><p><a href="https://cn.vuejs.org/v2/api/#v-model" target="_blank" rel="noopener">API地址</a></p><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p><code>v-for</code>可以循环操作数组或者对象</p><p>简单示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in arr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取键的写法</p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in arr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}===={{index}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>index</code>如果是数组则是索引，如果是对象则是<code>key</code></p></blockquote><p><a href="https://cn.vuejs.org/v2/api/#v-for" target="_blank" rel="noopener">API地址</a></p><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p><code>v-on</code> 用于绑定事件处理函数。</p><p><code>click</code>事件示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myclick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'是啥'</span><span class="token punctuation">,</span>        arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        myclick<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 方法处理器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 内联语句 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThat(<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>, $event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 缩写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 停止冒泡 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 阻止默认行为 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 阻止默认行为，没有表达式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  串联修饰符 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.stop.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 键修饰符，键别名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onEnter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 键修饰符，键代码 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.13</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onEnter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 点击回调只会触发一次 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.once</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 对象语法 (2.4.0+) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ mousedown: doThis, mouseup: doThat }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://cn.vuejs.org/v2/api/#v-on" target="_blank" rel="noopener">API地址</a></p><h2 id="v-show-v-if-v-else-v-else-if"><a href="#v-show-v-if-v-else-v-else-if" class="headerlink" title="v-show v-if v-else v-else-if"></a>v-show v-if v-else v-else-if</h2><p><code>v-show</code>根据表达式之真假值，切换元素的 display CSS 属性。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Math.random() <span class="token punctuation">></span> 0.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Now you see me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>  Now you don't<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p></blockquote><h3 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a>v-if vs v-show</h3><p>不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 <code>DOM</code> 中。<code>v-show</code> 只是简单地切换元素的 <code>CSS</code> 属性 <code>display</code>。</p><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;v-model&quot;&gt;&lt;a href=&quot;#v-model&quot; class=&quot;headerlink&quot; title=&quot;v-model&quot;&gt;&lt;/a&gt;v-model&lt;/h2&gt;&lt;p&gt;&lt;code&gt;v-model&lt;/code&gt; 可用于双向数据绑定 ，主要用于表单，表单值发生变化，数据也
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VueJs" scheme="https://taffyblog.github.io/tags/VueJs/"/>
    
  </entry>
  
  <entry>
    <title>Promise 异步优化</title>
    <link href="https://taffyblog.github.io/2018/06/26/jsPromise/"/>
    <id>https://taffyblog.github.io/2018/06/26/jsPromise/</id>
    <published>2018-06-26T08:16:13.000Z</published>
    <updated>2022-03-08T07:51:05.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试浏览器是否支持promise"><a href="#测试浏览器是否支持promise" class="headerlink" title="测试浏览器是否支持promise."></a>测试浏览器是否支持<code>promise</code>.</h2><p>在浏览器控制台输入:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出<code>ok</code>则表示支持。</p><h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h2><p>示例如下：</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> fun<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>type<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//resolve 表示执行成功  reject表示失败</span>    <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState<span class="token operator">!==</span><span class="token number">4</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//XHR的状态，从0-4发生变化(0请求尚未初始化，1服务器链接已成功，2请求已接收，3请求处理中，4请求已完成，响应就绪)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token number">200</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>respose<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span>handler<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当readyState属性改变时，就会触发</span>        client<span class="token punctuation">.</span>responseType<span class="token operator">=</span><span class="token string">"json"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">toUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            client<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span>application<span class="token operator">/</span>json<span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> add <span class="token operator">=</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"/map/add"</span><span class="token punctuation">,</span><span class="token string">"post"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span>name<span class="token punctuation">,</span>message<span class="token punctuation">:</span>message<span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>json<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//成功后逻辑</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>error<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//失败后逻辑</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'发生错误'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种写法:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> add <span class="token operator">=</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"/map/add"</span><span class="token punctuation">,</span><span class="token string">"post"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span>name<span class="token punctuation">,</span>message<span class="token punctuation">:</span>message<span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>json<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//成功后逻辑</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//失败后逻辑</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'发生错误'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="串行执行"><a href="#串行执行" class="headerlink" title="串行执行"></a>串行执行</h2><p><code>then</code>关键字可以串行执行异步操作。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 0.5秒后返回input*input的计算结果:</span><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'calculating '</span> <span class="token operator">+</span> input <span class="token operator">+</span> <span class="token string">' x '</span> <span class="token operator">+</span> input <span class="token operator">+</span> <span class="token string">'...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> input <span class="token operator">*</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 0.5秒后返回input+input的计算结果:</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'calculating '</span> <span class="token operator">+</span> input <span class="token operator">+</span> <span class="token string">' + '</span> <span class="token operator">+</span> input <span class="token operator">+</span> <span class="token string">'...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> input <span class="token operator">+</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start new Promise...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>multiply<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>multiply<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Got value: '</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果:</p><pre class="line-numbers language-c"><code class="language-c">start new Promise<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>calculating <span class="token number">123</span> x <span class="token number">123</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>calculating <span class="token number">15129</span> <span class="token operator">+</span> <span class="token number">15129</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>calculating <span class="token number">30258</span> x <span class="token number">30258</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>calculating <span class="token number">915546564</span> <span class="token operator">+</span> <span class="token number">915546564</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Got value<span class="token punctuation">:</span> <span class="token number">1831093128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h2><p>除了串行执行若干异步任务外，<code>Promise</code>还可以并行执行异步任务。</p><p>试想一个页面聊天系统，我们需要从两个不同的URL分别获得用户的个人信息和好友列表，这两个任务是可以并行执行的，用<code>Promise.all()</code>实现如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">'P1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token string">'P2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 同时执行p1和p2，并在它们都完成后执行then:</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得一个Array: ['P1', 'P2']</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有些时候，多个异步任务是为了容错。比如，同时向两个URL读取用户的个人信息，只需要获得先返回的结果即可。这种情况下，用Promise.race()实现：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">'P1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token string">'P2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'P1'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于p1执行较快，<code>Promise</code>的<code>then()</code>将获得结果’P1’。p2仍在继续执行，但执行结果将被丢弃。</p><h2 id="JQuery的用法"><a href="#JQuery的用法" class="headerlink" title="JQuery的用法"></a>JQuery的用法</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><pre class="line-numbers language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span><span class="token string">"/rest/add"</span><span class="token punctuation">,</span>type<span class="token punctuation">:</span><span class="token string">"POST"</span><span class="token punctuation">,</span>datatype<span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行成功的逻辑</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//发生错误</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链式写法"><a href="#链式写法" class="headerlink" title="链式写法"></a>链式写法</h3><pre class="line-numbers language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span><span class="token string">"/rest/add"</span><span class="token punctuation">,</span>type<span class="token punctuation">:</span><span class="token string">"POST"</span><span class="token punctuation">,</span>datatype<span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>   <span class="token keyword">return</span> $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span><span class="token string">"/rest/add1"</span><span class="token punctuation">,</span>type<span class="token punctuation">:</span><span class="token string">"POST"</span><span class="token punctuation">,</span>datatype<span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">,</span>data<span class="token punctuation">:</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>     <span class="token keyword">return</span> $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span><span class="token string">"/rest/add2"</span><span class="token punctuation">,</span>type<span class="token punctuation">:</span><span class="token string">"POST"</span><span class="token punctuation">,</span>datatype<span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">,</span>data<span class="token punctuation">:</span>data<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="并行执行-1"><a href="#并行执行-1" class="headerlink" title="并行执行"></a>并行执行</h3><pre class="line-numbers language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span><span class="token string">"/rest/add"</span><span class="token punctuation">,</span>type<span class="token punctuation">:</span><span class="token string">"POST"</span><span class="token punctuation">,</span>datatype<span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span><span class="token string">"/rest/add1"</span><span class="token punctuation">,</span>type<span class="token punctuation">:</span><span class="token string">"POST"</span><span class="token punctuation">,</span>datatype<span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span><span class="token string">"/rest/add2"</span><span class="token punctuation">,</span>type<span class="token punctuation">:</span><span class="token string">"POST"</span><span class="token punctuation">,</span>datatype<span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data1<span class="token punctuation">,</span>data2<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//成功</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//失败</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000" target="_blank" rel="noopener">参考资料</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;测试浏览器是否支持promise&quot;&gt;&lt;a href=&quot;#测试浏览器是否支持promise&quot; class=&quot;headerlink&quot; title=&quot;测试浏览器是否支持promise.&quot;&gt;&lt;/a&gt;测试浏览器是否支持&lt;code&gt;promise&lt;/code&gt;.&lt;/h2&gt;&lt;p
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>JS变量提升</title>
    <link href="https://taffyblog.github.io/2018/06/22/varPromote/"/>
    <id>https://taffyblog.github.io/2018/06/22/varPromote/</id>
    <published>2018-06-22T08:16:13.000Z</published>
    <updated>2022-03-08T07:51:05.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-中，函数及变量的声明都将被提升到函数的最顶部。"><a href="#JavaScript-中，函数及变量的声明都将被提升到函数的最顶部。" class="headerlink" title="JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。"></a>JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。</h2><h2 id="JavaScript-中，变量可以在使用后声明，也就是变量可以先使用再声明。"><a href="#JavaScript-中，变量可以在使用后声明，也就是变量可以先使用再声明。" class="headerlink" title="JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。"></a>JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。</h2><p>以下两个实例将获得相同的结果：</p><p>例1</p><pre class="line-numbers language-javascript"><code class="language-javascript">x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 变量 x 设置为 5</span>elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查找元素 </span>elem<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> x<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 在元素中显示 x</span><span class="token keyword">var</span> x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明 x</span><span class="token comment" spellcheck="true">//例2</span><span class="token keyword">var</span> x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明 x</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 变量 x 设置为 5</span>elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查找元素 </span>elem<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> x<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 在元素中显示 x</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript-只有声明的变量会提升，初始化的不会。"><a href="#JavaScript-只有声明的变量会提升，初始化的不会。" class="headerlink" title="JavaScript 只有声明的变量会提升，初始化的不会。"></a>JavaScript 只有声明的变量会提升，初始化的不会。</h2><p>以下两个实例结果结果不相同：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化 x</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化 y</span>elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查找元素 </span>elem<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> y<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 显示 x 和 y</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化 x</span>elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查找元素 </span>elem<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> y<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 显示 x 和 y</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化 y</span><span class="token comment" spellcheck="true">//实例 2 的 y 输出了 undefined，这是因为变量声明 (var y) 提升了，但是初始化(y = 7) 并不会提升，所以 y 变量是一个未定义的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="容易引发的问题"><a href="#容易引发的问题" class="headerlink" title="容易引发的问题"></a>容易引发的问题</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'6546'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上例子会输出undefined,虽然函数外部声明了一个str,但是在函数内部再次声明了一个str,所以str的声明被提升到函数顶部，并且未赋值，会覆盖外部声明的str，所以输出undefined</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JavaScript-中，函数及变量的声明都将被提升到函数的最顶部。&quot;&gt;&lt;a href=&quot;#JavaScript-中，函数及变量的声明都将被提升到函数的最顶部。&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 中，函数及变量的声明都将被
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Javascript解构赋值</title>
    <link href="https://taffyblog.github.io/2018/06/22/DestructuringAssignment/"/>
    <id>https://taffyblog.github.io/2018/06/22/DestructuringAssignment/</id>
    <published>2018-06-22T04:10:16.000Z</published>
    <updated>2022-03-08T07:51:05.889Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>解构赋值语法是一个 Javascript 表达式，这使得可以将值从数组或属性从对象提取到不同的变量中。</p></blockquote><h2 id="解构数组"><a href="#解构数组" class="headerlink" title="解构数组"></a>解构数组</h2><h3 id="变量声明并赋值时的解构"><a href="#变量声明并赋值时的解构" class="headerlink" title="变量声明并赋值时的解构"></a>变量声明并赋值时的解构</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">]</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "one"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "two"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>three<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "three"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量先声明后赋值时的解构"><a href="#变量先声明后赋值时的解构" class="headerlink" title="变量先声明后赋值时的解构"></a>变量先声明后赋值时的解构</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//为了防止从数组中取出一个值为undefined的对象，可以为这个对象设置默认值。</span><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token punctuation">[</span>a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a>交换变量</h3><ol><li><p>在一个解构表达式中可以交换两个变量的值。</p></li><li><p>没有解构赋值的情况下，交换两个变量需要一个临时变量。</p></li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解析一个从函数返回的数组"><a href="#解析一个从函数返回的数组" class="headerlink" title="解析一个从函数返回的数组"></a>解析一个从函数返回的数组</h3><blockquote><p>从一个函数返回一个数组是十分常见的情况.。解构使得处理返回值为数组时更加方便。</p></blockquote><p>在下面例子中，<code>[1, 2]</code> 作为函数的<code>f()</code> 的输出值，可以使用解构用一句话完成解析:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="忽略某些返回值"><a href="#忽略某些返回值" class="headerlink" title="忽略某些返回值"></a>忽略某些返回值</h4><blockquote><p>你也可以忽略你不感兴趣的返回值：<br><code>`</code>javascript<br>function f() {<br>    return [1, 2, 3];<br>}</p></blockquote><p>var [a, , b] = f();<br>console.log(a); // 1<br>console.log(b); // 3</p><pre><code>### 将剩余数组赋值给一个变量&gt; 当解构一个数组时，可以使用剩余模式，将数组剩余部分赋值给一个变量。```javascriptvar [a, ...b] = [1, 2, 3];console.log(a); // 1console.log(b); // [2, 3]</code></pre><blockquote><p>注意：如果剩余元素右侧有一个逗号，会抛出SyntaxError，因为剩余元素必须是数组的最后一个元素。</p></blockquote><h3 id="用正则表达式匹配提取值"><a href="#用正则表达式匹配提取值" class="headerlink" title="用正则表达式匹配提取值"></a>用正则表达式匹配提取值</h3><blockquote><p>用正则表达式方法exec()匹配字符串会返回一个数组，该数组第一个值是完全匹配正则表达式的字符串，然后的值是匹配正则表达式括号内内容部分。解构赋值允许你轻易地提取出需要的部分，忽略完全匹配的字符串——如果不需要的话<br><code>`</code>javascript<br>var url = “<a href="https://developer.mozilla.org/en-US/Web/JavaScript&quot;" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Web/JavaScript&quot;</a>;</p></blockquote><p>var parsedURL = /^(\w+)\:\/\/([^\/]+)\/(.*)$/.exec(url);<br>console.log(parsedURL); // [“<a href="https://developer.mozilla.org/en-US/Web/JavaScript&quot;" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Web/JavaScript&quot;</a>, “https”, “developer.mozilla.org”, “en-US/Web/JavaScript”]</p><p>var [, protocol, fullhost, fullpath] = parsedURL;</p><p>console.log(protocol); // “https”</p><pre><code>## 解构对象### 基本赋值```javascriptvar o = { p: 42, q: true };var { p, q } = o;console.log(p); // 42console.log(q); // true</code></pre><h3 id="无声明赋值"><a href="#无声明赋值" class="headerlink" title="无声明赋值"></a>无声明赋值</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>赋值语句周围的( .. ) 是使用对象字面解构赋值时不需要声明的语法。</li><li>{ a, b } = { a: 1, b: 2 } 不是有效的独立语法，因为左边的{a, b }</li><li>被认为是一个块而不是对象字面量。然而，({ a, b } = { a: 1, b: 2 })</li><li>是有效的，正如 var { a, b } = { a: 1, b: 2 }</li><li>注意：你的( .. ) 表达式需要一个分号在它前面，否则它也许会被当成上一行中的函数来执行。</li></ol><h3 id="给新的变量名赋值"><a href="#给新的变量名赋值" class="headerlink" title="给新的变量名赋值"></a>给新的变量名赋值</h3><blockquote><p>可以从一个对象中提取变量并赋值给和对象属性名不同的新的变量名。自定义变量名/重新定义变量名</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//p和q只是一个模式匹配</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> p<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span> q<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">{</span> p<span class="token punctuation">:</span> foo<span class="token punctuation">,</span> q<span class="token punctuation">:</span> bar <span class="token punctuation">}</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 42 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h3><blockquote><p>变量可以先赋予默认值。当要提取的对象没有对应的属性，变量就被赋予默认值。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="给新的变量命名并提供默认值"><a href="#给新的变量命名并提供默认值" class="headerlink" title="给新的变量命名并提供默认值"></a>给新的变量命名并提供默认值</h4><blockquote><p>一个属性可以是从一个对象解构，并分配给一个不同名称的变量，分配一个默认值，以防未解构的值是undefined。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> aa <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> bb <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ES5版本</span><span class="token keyword">function</span> <span class="token function">drawES5Chart</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    options <span class="token operator">=</span> options <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">:</span> options<span class="token punctuation">;</span>    <span class="token keyword">var</span> size <span class="token operator">=</span> options<span class="token punctuation">.</span>size <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token string">'big'</span> <span class="token punctuation">:</span> options<span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token keyword">var</span> cords <span class="token operator">=</span> options<span class="token punctuation">.</span>cords <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">:</span> options<span class="token punctuation">.</span>cords<span class="token punctuation">;</span>    <span class="token keyword">var</span> radius <span class="token operator">=</span> options<span class="token punctuation">.</span>radius <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token number">25</span> <span class="token punctuation">:</span> options<span class="token punctuation">.</span>radius<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> cords<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// now finally do some chart drawing</span><span class="token punctuation">}</span><span class="token function">drawES5Chart</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    cords<span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    radius<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ES6版本</span><span class="token keyword">function</span> <span class="token function">drawES2015Chart</span><span class="token punctuation">(</span><span class="token punctuation">{</span> size <span class="token operator">=</span> <span class="token string">'big'</span><span class="token punctuation">,</span> cords <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> radius <span class="token operator">=</span> <span class="token number">25</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> cords<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// do some chart drawing</span><span class="token punctuation">}</span><span class="token function">drawES2015Chart</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    cords<span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    radius<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在上面的drawES2015Chart的函数签名中，解构的左手边被分配给右手边的空对象字面值：{ size = ‘big’, cords = { x: 0, y: 0 }, radius = 25 } = { } 。</li><li>你也可以在没有右侧分配的情况下编写函数。</li><li>但是，如果你忽略了右边的赋值，那么函数会在被调用的时候查找至少一个被提供的参数，而在当前的形式下，你可以直接调用drawES2015Chart()而不提供任何参数。</li><li>如果你希望能够在不提供任何参数的情况下调用该函数，则当前的设计非常有用，而另一种方法在您确保将对象传递给函数时非常有用。</li></ol><h2 id="解构嵌套对象和数组"><a href="#解构嵌套对象和数组" class="headerlink" title="解构嵌套对象和数组"></a>解构嵌套对象和数组</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> metadata <span class="token operator">=</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">"Scratchpad"</span><span class="token punctuation">,</span>    translations<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            locale<span class="token punctuation">:</span> <span class="token string">"de"</span><span class="token punctuation">,</span>            localization_tags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            last_edit<span class="token punctuation">:</span> <span class="token string">"2014-04-14T08:43:37"</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span> <span class="token string">"/de/docs/Tools/Scratchpad"</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span> <span class="token string">"JavaScript-Umgebung"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span> <span class="token string">"/en-US/docs/Tools/Scratchpad"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> englishTitle<span class="token punctuation">,</span> translations<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> title<span class="token punctuation">:</span> localeTitle <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> metadata<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>englishTitle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Scratchpad"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localeTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "JavaScript-Umgebung"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="For-of-迭代和解构"><a href="#For-of-迭代和解构" class="headerlink" title="For of 迭代和解构"></a>For of 迭代和解构</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"Mike Smith"</span><span class="token punctuation">,</span>        family<span class="token punctuation">:</span> <span class="token punctuation">{</span>            mother<span class="token punctuation">:</span> <span class="token string">"Jane Smith"</span><span class="token punctuation">,</span>            father<span class="token punctuation">:</span> <span class="token string">"Harry Smith"</span><span class="token punctuation">,</span>            sister<span class="token punctuation">:</span> <span class="token string">"Samantha Smith"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">35</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"Tom Jones"</span><span class="token punctuation">,</span>        family<span class="token punctuation">:</span> <span class="token punctuation">{</span>            mother<span class="token punctuation">:</span> <span class="token string">"Norah Jones"</span><span class="token punctuation">,</span>            father<span class="token punctuation">:</span> <span class="token string">"Richard Jones"</span><span class="token punctuation">,</span>            brother<span class="token punctuation">:</span> <span class="token string">"Howard Jones"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">25</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> n<span class="token punctuation">,</span> family<span class="token punctuation">:</span> <span class="token punctuation">{</span> father<span class="token punctuation">:</span> f <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">of</span> people<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Name: "</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">", Father: "</span> <span class="token operator">+</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// "Name: Mike Smith, Father: Harry Smith"</span><span class="token comment" spellcheck="true">// "Name: Tom Jones, Father: Richard Jones"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="从作为函数实参的对象中提取数据"><a href="#从作为函数实参的对象中提取数据" class="headerlink" title="从作为函数实参的对象中提取数据"></a>从作为函数实参的对象中提取数据</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">userId</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">whois</span><span class="token punctuation">(</span><span class="token punctuation">{</span> displayName<span class="token punctuation">:</span> displayName<span class="token punctuation">,</span> fullName<span class="token punctuation">:</span> <span class="token punctuation">{</span> firstName<span class="token punctuation">:</span> name <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>displayName <span class="token operator">+</span> <span class="token string">" is "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span>    displayName<span class="token punctuation">:</span> <span class="token string">"jdoe"</span><span class="token punctuation">,</span>    fullName<span class="token punctuation">:</span> <span class="token punctuation">{</span>        firstName<span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span> <span class="token string">"Doe"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"userId: "</span> <span class="token operator">+</span> <span class="token function">userId</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "userId: 42"</span><span class="token function">whois</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "jdoe is John"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这段代码从user对象中提取并输出id、displayName和firstName。</p></blockquote><h2 id="对象属性名和解构"><a href="#对象属性名和解构" class="headerlink" title="对象属性名和解构"></a>对象属性名和解构</h2><blockquote><p>属性名，如object literals，可以被解构。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token string">"z"</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">:</span> foo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> z<span class="token punctuation">:</span> <span class="token string">"bar"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "bar"</span><span class="token comment" spellcheck="true">//对象解构中的Rest</span><span class="token comment" spellcheck="true">//Rest 属性收集尚未被解构模式拾取的剩余可枚举属性键。</span><span class="token keyword">let</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> d<span class="token punctuation">:</span> <span class="token number">40</span> <span class="token punctuation">}</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10 </span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20 </span>rest<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { c: 30, d: 40 }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;解构赋值语法是一个 Javascript 表达式，这使得可以将值从数组或属性从对象提取到不同的变量中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;解构数组&quot;&gt;&lt;a href=&quot;#解构数组&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="https://taffyblog.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>.NET平台常用的框架整理</title>
    <link href="https://taffyblog.github.io/2018/05/21/DotNetCommonFramework/"/>
    <id>https://taffyblog.github.io/2018/05/21/DotNetCommonFramework/</id>
    <published>2018-05-21T12:13:16.000Z</published>
    <updated>2022-03-08T07:51:05.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式缓存框架"><a href="#分布式缓存框架" class="headerlink" title="分布式缓存框架"></a>分布式缓存框架</h2><p><code>Microsoft Velocity</code>：微软自家分布式缓存服务框架。</p><p><code>Memcahed</code>：一套分布式的高速缓存系统，目前被许多网站使用以提升网站的访问速度。</p><p><code>Redis</code>：是一个高性能的KV数据库。 它的出现很大程度补偿了Memcached在某些方面的不足。</p><p><code>EnyimMemcached</code>：访问Memcached最优秀的.NET客户端，集成不错的分布式均衡算法。</p><h2 id="开源的-NET系统推荐"><a href="#开源的-NET系统推荐" class="headerlink" title="开源的.NET系统推荐"></a>开源的.NET系统推荐</h2><p><code>OXITE</code>：微软ASP.NET MVC案例演示框架。</p><p><code>PetShop</code>：微软ASP.Net宠物商店。</p><p><code>Orchard</code>：国外一个MVC开源的博客系统。</p><p><code>SSCLI</code>：微软在NET Framework 2.0时代的开源代码。</p><p><code>DasBlog</code>：国外一个基于ASP.NET的博客系统。</p><p><code>BlogEngine.NET</code>：国外一款免费开源的博客系统。</p><p><code>Dotnetnuke.NET</code>：一套非常优秀的基于ASP.NET的开源门户网站程序。</p><p><code>Discuz.NET</code>：国内开源的论坛社区系统。</p><p><code>nopCommerce</code>和<code>Aspxcommerce</code>：国外一套高质量的开源B2C网站系统。</p><p><code>JumboTCMS和DTCMS</code>：国内两款开源的网站管理系统：</p><p>##日志记录异常处理 </p><p><code>Log4Net.dll</code>：轻量级的免费开源.NET日志记录框架。</p><p><code>Enterprise Library Log Application Black</code>：微软企业库日志记录。</p><p><code>Elmah</code>：实现最流行的ASP.NET应用异常日志记录框架。</p><p><code>NLog</code>：是一个简单灵活的日志记录类库，性能比Log4Net高，使用和维护难度低。</p><p>##关于NoSQL数据库</p><p><code>MongoDB</code>：分布式文件存储数据库。</p><p><code>Membase</code>：家族的一个新的重量级的成员。</p><h2 id="自动任务调度框架"><a href="#自动任务调度框架" class="headerlink" title="自动任务调度框架"></a>自动任务调度框架</h2><p><code>Quartz.NET</code>：开源的作业调度和自动任务框架。</p><p><code>Topshelf</code>：另一种创建Windows服务的开源框架</p><h2 id="依赖注入IOC容器框架"><a href="#依赖注入IOC容器框架" class="headerlink" title="依赖注入IOC容器框架"></a>依赖注入IOC容器框架</h2><p><code>Unity</code>：微软patterns&amp;practicest团队开发的IOC依赖注入框架，支持AOP横切关注点。</p><p><code>MEF（Managed Extensibility Framework）</code>：是一个用来扩展.NET应用程序的框架，可开发插件系统。</p><p><code>spring.NET</code>：依赖注入、面向方面编程(AOP)、数据访问抽象,、以及ASP.NET集成。</p><p><code>Autofac</code>：最流行的依赖注入和IOC框架，轻量且高性能，对项目代码几乎无任何侵入性。</p><p><code>PostSharp</code>：实现静态AOP横切关注点，使用简单，功能强大，对目标拦截的方法无需任何改动。</p><p><code>Ninject</code>：基于.NET轻量级开源的依赖注入IOC框架</p><h2 id="常用的几个ORM框架"><a href="#常用的几个ORM框架" class="headerlink" title="常用的几个ORM框架"></a>常用的几个ORM框架</h2><p><code>EF（ADO.NET Entity Framework）</code>：微软基于ADO.NET开发的ORM框架。</p><p><code>Nhibernate</code>：面向.NET环境的轻量级的ORM框架。</p><p><code>SqlMapper.cs</code>：用于小项目的通用的C#数据库访问类。</p><p><code>AutoMapper</code>：流行的对象映射框架，可减少大量硬编码，很小巧灵活，性能表现也可接受。</p><p><code>SubSonic</code>：优秀的开源的ORM映射框架，同时提供符合自身需要的代码生成器。</p><p><code>FluentData</code>：开源的基于Fluent API的链式查询ORM轻量级框架。</p><p><code>Dapper</code>：轻量级高性能基于EMIT生成的ORM框架。</p><p><code>EmitMapper</code>：性能较高的ORM框架，运行时通过EMIT动态生成IL代码，并非采用反射机制。</p><h2 id="格式和数据类型转换"><a href="#格式和数据类型转换" class="headerlink" title="格式和数据类型转换"></a>格式和数据类型转换</h2><p><code>Newtonsoft.Json</code>：目前.NET开发中最流行的JSON序列化库，为新版的WebApi库提供基础。</p><p><code>System.JSON.dll</code>：微软自己开发的JSON序列化组件（需要单独下载）</p><p><code>DataContractJsonSerializer</code> 和 <code>DataContractXmlSerializer</code>：微软在WCF中使用的序列化器。</p><p><code>JavaScriptSerializer</code>：微软默认针对WEB开发者提供的JSON格式化器。</p><p><code>iTextSharp、PDFsharp</code> 和 <code>PDF.NET</code>：通过.NET处理和生成PDF文档的组件。</p><p><code>SharpZipLib.dll</code>：免费开源的ZIP和GZIP文件解压缩组件。</p><p><code>Math.NET</code>：强大的数学运算、微积分、解方程和科学运算。</p><p><code>DocX</code>：不需要安装word软件，通过C#操作word文件。</p><p><code>SharpSerializer</code>：开源XML和、二进制、JSON、压缩和优化框架。</p><h2 id="反射和动态语言"><a href="#反射和动态语言" class="headerlink" title="反射和动态语言"></a>反射和动态语言</h2><p><code>Clay dynamic</code>：开源的动态语言dynamic框架让您形如JavaScript的方式创建对象。</p><p><code>ExposedObject</code>：在类的外部通过动态语言dynamic的方式访问私有成员。</p><p><code>PrivateObject</code>：微软单元测试框架中便捷在外部调用类内部私有成员的一个类。</p><h2 id="跨平台和运行时解决方案"><a href="#跨平台和运行时解决方案" class="headerlink" title="跨平台和运行时解决方案"></a>跨平台和运行时解决方案</h2><p><code>MONO.NET</code>：跨平台的.NET运行环境，让.NET跨平台运行成为可能。</p><p><code>DotGnu Portable.NET</code>：类似于MONO.NET的跨平台运行时。</p><p><code>Phalanger</code>：将PHP编译成.NET，可实现PHP与.NET互操作。</p><p><code>VMDotNet</code>：中国移动飞信所使用过的.NET运行时。</p><p><code>Unity3D</code>：微软大力支持的机遇C#和JavaScript的跨平台游戏开发框架。</p><p><code>Cassini、IIS Express</code>和<code>C</code>assinidev`：开源的ASP.NET执行环境。</p><p><code>Katana</code>：微软基于OWIN规范实现的非IIS寄宿ASP.NET和MVC等。</p><p><code>IKVM.NET</code>：基于.NET的Java虚拟机，让JAVA运行在.NET之上。</p><h2 id="WEB开发和设计"><a href="#WEB开发和设计" class="headerlink" title="WEB开发和设计"></a>WEB开发和设计</h2><p><code>Jumony Core</code>：基于.NET开发的HTML引擎。</p><p><code>Microsoft.mshtml.dll、Winista.HtmlParser.dll</code> 和 <code>HtmlAgilityPack.dll</code>：解析处理HTML文档的框架。</p><p><code>JavaScript.NET</code>和<code>ClearScript（微软出品）</code>：基于.NET开发的JavaScript引擎。</p><p><code>NCrawler</code>：其HTML处理引擎htmlagilitypack的的开源网络爬虫软件。</p><p><code>AntiXSS</code>：微软官方预防跨站XSS脚本入侵攻击的开源类库，它通过白名单机制进行内容编码。</p><p><code>YUICompressor.NET、Microsoft Ajax Minifier</code> 和 <code>Google Closure Compiler：JavaScrip</code>和CSS压缩器。</p><p><code>NancyFx</code>：是一个不错的轻量级开源.NET WEB框架。如果想快速做个简单的WEB应用 官网：<a href="http://nancyfx.org/。" target="_blank" rel="noopener">http://nancyfx.org/。</a></p><p><code>AspNetPager</code>：国内知名的ASP.NET分页控件，支持多种分页方式。</p><p><code>NOPI.dll</code>：导出Excel报表的插件（基于微软OpenXml实现）（nopi.css.dl通过css设置样式）</p><p><code>Enterprise Library</code>：微软针对企业级应用开发的最佳实践组件。</p><p><code>PowerCollections</code>：国外一个牛人写的高级开源集合。</p><h2 id="移动互联网和云计算"><a href="#移动互联网和云计算" class="headerlink" title="移动互联网和云计算"></a>移动互联网和云计算</h2><p><code>PushSharp</code>：通过.NET向各种移动平台推送消息。</p><p><code>mono for Android</code>：用.NET语言开发安卓应用：</p><p><code>MonoTouch</code>：用.NET语言开发iOS应用。</p><p><code>PhoneGap</code>和<code>AppCan</code>：跨平台基于HTML5的移动开发平台。</p><p><code>Cordova</code>：PhoneGap贡献给Apache后的开源项目，是驱动PhoneGap的核心引擎。</p><h2 id="网络通信和网络协议"><a href="#网络通信和网络协议" class="headerlink" title="网络通信和网络协议"></a>网络通信和网络协议</h2><p><code>SuperSocket</code>：基于.NET轻量级的可扩展的Socket开发框架。</p><p><code>SuperWebSocket</code>：通过.NET实现TML5 WebSocket框架。</p><p><code>XProxy</code>：支持插件的基础代理程序集，内置NAT、加解密、反向、直接和间接代理。</p><h2 id="图形和图像处理框架"><a href="#图形和图像处理框架" class="headerlink" title="图形和图像处理框架"></a>图形和图像处理框架</h2><p><code>Paint.NET</code>：基于.NET小巧灵活强大的图形处理开源项目。</p><p><code>Imagemagick.NET</code>：用C#对开源图像处理组件Imagemagick的封装。</p><p><code>Skimpt</code>：基于.NET开源的屏幕截图软件。</p><p><code>ImageGlue.NET</code>：商业的图像处理组件，支持的格式列了一大堆。</p><p><code>Sprite and Image Optimization Framework</code>：微软CSS精灵，多图合成一张大图和CSS样式。</p><h2 id="桌面应用程序框架"><a href="#桌面应用程序框架" class="headerlink" title="桌面应用程序框架"></a>桌面应用程序框架</h2><p><code>DevExpress</code>：一个全球知名的桌面应用程序UI控件库。</p><p><code>Prism</code>：微软开发的针对WPF和Silverlight的MVVM框架，通过功能模块化的思想，来讲复杂的业务功能和UI耦合性进行分离。</p><p><code>WPFToolkit</code> 和 <code>Fluent Ribbon Control Suite</code>：开发类似于Office风格的Ribbon菜单。</p><h2 id="测试和性能评估方面"><a href="#测试和性能评估方面" class="headerlink" title="测试和性能评估方面"></a>测试和性能评估方面</h2><p><code>Faker.Net</code>：方便生成大批量测试数据的框架。</p><p><code>Nunit</code>：一个轻量级的单元测试框架。</p><p><code>Moq</code>：非常流行的Mock框架，支持LINQ，灵活且高性能。</p><p><code>xUnit</code>：比NUnit更好的单元测试框架，升级改进版的Nunit框架。</p><p><code>MiniProfiler</code>和<code>Glimpse</code>：基于MVC的两款性能事件监控框架。</p><h2 id="事务和分布式事务支持"><a href="#事务和分布式事务支持" class="headerlink" title="事务和分布式事务支持"></a>事务和分布式事务支持</h2><p><code>KtmIntegration</code>：一个支持NTFS文件系统的事务开源类。</p><p><code>NET Transactional File Manager</code>：对文件系统操作（复制、移动和删除）加入事务支持。</p><h2 id="分词、全文检索和搜索引擎"><a href="#分词、全文检索和搜索引擎" class="headerlink" title="分词、全文检索和搜索引擎"></a>分词、全文检索和搜索引擎</h2><p><code>Lucene.net</code>：流行高性能的全文索引库，可用于为各类信息提供强大的搜索功能。</p><p><code>Lucene.Net.Analysis.PanGu</code>：支持Lucene.Net最新版的盘古中文分词扩展库。</p><h2 id="数据验证组件整理"><a href="#数据验证组件整理" class="headerlink" title="数据验证组件整理"></a>数据验证组件整理</h2><p><code>FluentValidation for .NET</code>：基于LINQ表达式方法链Fluent接口验证组件。</p><p><code>Microsoft.Practices.EnterpriseLibrary.Validation.dll</code>：微软企业库验证程序块。</p><p><code>CuttingEdge.Conditions</code>：基于Fluent接口方法练接口的契约编程组件。</p><p><code>DotNetOpenAuth</code>：让网站具备支持OpenID、OAuth、InfoCard等身份验证的能力。</p><h2 id="开源图表统计控件："><a href="#开源图表统计控件：" class="headerlink" title="开源图表统计控件："></a>开源图表统计控件：</h2><p><code>Visifire</code>：一套效果非常好的WPF图表控件，支持3D绘制、曲线、折线、扇形、环形和梯形。</p><p><code>SparrowToolkit</code>：一套WPF图表控件集，支持绘制动态曲线，可绘制示波器、CPU使用率和波形。</p><p><code>DynamicDataDisplay</code>：微软开源的WPF动态曲线图，线图、气泡图和热力图。</p><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p><code>Kafka</code></p><p><code>Kafka</code>是一种分布式的，基于发布/订阅的消息系统。主要设计目标如下：</p><p>以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间复杂度的访问性能。</p><p>高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条以上消息的传输。</p><p>支持Kafka Server间的消息分区，及分布式消费，同时保证每个Partition内的消息顺序传输。</p><p>同时支持离线数据处理和实时数据处理。</p><p>Scale out：支持在线水平扩展。</p><p><code>RabbitMQ</code></p><p>RabbitMQ是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正因如此，它非常重量级，更适合于企业级的开发。同时实现了Broker构架，这意味着消息在发送给客户端时先在中心队列排队。对路由，负载均衡或者数据持久化都有很好的支持。</p><p><code>Redis</code></p><p>Redis是一个基于Key-Value对的NoSQL数据库，开发维护很活跃。虽然它是一个Key-Value数据库存储系统，但它本身支持MQ功能，所以完全可以当做一个轻量级的队列服务来使用。对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。实验表明：入队时，当数据比较小时Redis的性能要高于RabbitMQ，而如果数据大小超过了10K，Redis则慢的无法忍受；出队时，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ的出队性能则远低于Redis。</p><p><code>ZeroMQ</code></p><p>ZeroMQ号称最快的消息队列系统，尤其针对大吞吐量的需求场景。ZeroMQ能够实现RabbitMQ不擅长的高级/复杂的队列，但是开发人员需要自己组合多种技术框架，技术上的复杂度是对这MQ能够应用成功的挑战。ZeroMQ具有一个独特的非中间件的模式，你不需要安装和运行一个消息服务器或中间件，因为你的应用程序将扮演这个服务器角色。你只需要简单的引用ZeroMQ程序库，可以使用NuGet安装，然后你就可以愉快的在应用程序之间发送消息了。但是ZeroMQ仅提供非持久性的队列，也就是说如果宕机，数据将会丢失。其中，Twitter的Storm 0.9.0以前的版本中默认使用ZeroMQ作为数据流的传输（Storm从0.9版本开始同时支持ZeroMQ和Netty作为传输模块）。</p><p><code>ActiveMQ</code></p><p>ActiveMQ是Apache下的一个子项目。 类似于ZeroMQ，它能够以代理人和点对点的技术实现队列。同时类似于RabbitMQ，它少量代码就可以高效地实现高级应用场景。</p><p><code>Kafka/Jafka</code></p><p>Kafka是Apache下的一个子项目，是一个高性能跨语言分布式发布/订阅消息队列系统，而Jafka是在Kafka之上孵化而来的，即Kafka的一个升级版。具有以下特性：快速持久化，可以在O(1)的系统开销下进行消息持久化；高吞吐，在一台普通的服务器上既可以达到10W/s的吞吐速率；完全的分布式系统，Broker、Producer、Consumer都原生自动支持分布式，自动实现负载均衡；支持Hadoop数据并行加载，对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka通过Hadoop的并行加载机制统一了在线和离线的消息处理。Apache Kafka相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布式系统。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分布式缓存框架&quot;&gt;&lt;a href=&quot;#分布式缓存框架&quot; class=&quot;headerlink&quot; title=&quot;分布式缓存框架&quot;&gt;&lt;/a&gt;分布式缓存框架&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Microsoft Velocity&lt;/code&gt;：微软自家分布式缓存服务框架。&lt;/p&gt;
      
    
    </summary>
    
      <category term="随笔" scheme="https://taffyblog.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>var和let的作用域区别</title>
    <link href="https://taffyblog.github.io/2018/05/13/varAndletDifference/"/>
    <id>https://taffyblog.github.io/2018/05/13/varAndletDifference/</id>
    <published>2018-05-13T10:13:16.000Z</published>
    <updated>2022-03-08T07:51:05.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在方法中"><a href="#在方法中" class="headerlink" title="在方法中"></a>在方法中</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出 123</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Uncaught ReferenceError: str is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>var</code> 的作用域是函数体，<code>let</code>的作用域是一个代码块</p></blockquote><h2 id="在同一代码块声明"><a href="#在同一代码块声明" class="headerlink" title="在同一代码块声明"></a>在同一代码块声明</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//声明</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不会报错，后声明的会将先声明的覆盖</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会报错，不能重复声明。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用let时和后台语言(C#、Java)代码更相似。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在方法中&quot;&gt;&lt;a href=&quot;#在方法中&quot; class=&quot;headerlink&quot; title=&quot;在方法中&quot;&gt;&lt;/a&gt;在方法中&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-javascript&quot;&gt;&lt;code class=&quot;langua
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="https://taffyblog.github.io/tags/Javascript/"/>
    
      <category term="ES6" scheme="https://taffyblog.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>JS简单工厂和观察者模式</title>
    <link href="https://taffyblog.github.io/2018/05/13/jsFactoryAndObserver/"/>
    <id>https://taffyblog.github.io/2018/05/13/jsFactoryAndObserver/</id>
    <published>2018-05-13T10:10:16.000Z</published>
    <updated>2022-03-08T07:51:05.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>示例如下:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ss'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> CreateFactory <span class="token operator">=</span> <span class="token punctuation">{</span>    Create<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> CreateFactory<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出 ss</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>示例如下：</p><ol><li>定义一个数组存放订阅者。</li><li>定义一个<code>listen</code>方法添加订阅者。</li><li>定义一个<code>trigger</code>方法，循环订阅者并执行。</li><li>调用<code>listen</code>方法添加订阅者。</li><li>调用<code>trigger</code>方法触发。</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ObserverObj <span class="token operator">=</span> <span class="token punctuation">{</span>    list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    listen<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    trigger<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ObserverObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"名字:"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"年龄:"</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObserverObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这个人叫:"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"How old:"</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ObserverObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h2&gt;&lt;p&gt;示例如下:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-javascript
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="https://taffyblog.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://taffyblog.github.io/2018/04/29/jsRegExp/"/>
    <id>https://taffyblog.github.io/2018/04/29/jsRegExp/</id>
    <published>2018-04-29T04:13:16.000Z</published>
    <updated>2022-03-08T07:51:05.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> filter <span class="token operator">=</span> <span class="token regex">/^[a-z]at$/</span><span class="token punctuation">;</span><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token string">'cat'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//或者</span><span class="token keyword">var</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'^[a-z]at$'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token string">'cat'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="b-B"><a href="#b-B" class="headerlink" title="\b \B"></a>\b \B</h2><ol><li><p>\b匹配一个单词的边界  \B匹配一个单词的非边界</p></li><li><p>表达式 \bhi\b 可以匹配 hi this  表示找出的hi两边必须有空格</p></li><li><p>表达式 \Bhi\B 能匹配 hi this     表示找出的hi两边必须没有空格</p></li></ol><h2 id="d-D"><a href="#d-D" class="headerlink" title="\d \D"></a>\d \D</h2><ol><li><p>\d匹配一个数字字符  \D匹配一个非数字字符</p></li><li><p>表达式 \d 能匹配 123456 </p></li><li>表达式 \D 能匹配 A a</li></ol><h2 id="w-W"><a href="#w-W" class="headerlink" title="\w \W"></a>\w \W</h2><ol><li><p>\w匹配数字、字母、下划线  \W匹配非数字、字母、下划线</p></li><li><p>表达式\w能匹配123ab_ </p></li><li>表达式\W能匹配@#$%</li></ol><h2 id=""><a href="#" class="headerlink" title="^ $"></a>^ $</h2><blockquote><p>^表示字符串开头  $表示字符串结尾</p></blockquote><h2 id="-1"><a href="#-1" class="headerlink" title="[]"></a>[]</h2><ol><li>[]匹配指定一堆字符中的一个<br>例如：</li><li>[a - z]表示a- z中的其中一个字符。</li><li>[A - Za - z]表示a- z或A - Z中的其中一个字符</li><li>[aeiou]表示aeiou这几个字符中的其中一个</li><li>[^xyz]表示不匹配xyz这三个字符。</li></ol><h2 id="-2"><a href="#-2" class="headerlink" title="+"></a>+</h2><ol><li>+表示前一模式可以被重复1次或者n次<br>例如：</li><li>表达式 ^go+gle$ 能匹配 gogle google gooooooogle</li><li>表达式 ^g[aeiou]+gle$ 能匹配 gagle gegle geagle geaeaioueagle</li></ol><h2 id="x-x-y-x"><a href="#x-x-y-x" class="headerlink" title="* ? {x} {x,y} {x,}"></a>* ? {x} {x,y} {x,}</h2><ol><li><p><em>号表示前一模式可以被重复0次或n次，和+号的区别就是+必须重复一次，</em>可以不重复。</p></li><li><p>?号表示前一模式可以被重复0次或1次。要么出现1次要么不出现</p></li><li><p>{x}表示前一模式可以被重复x次</p></li><li><p>{x,y}表示前一模式可以被重复x到y次</p></li><li><p>{x,}表示前一模式必须至少重复x次。</p></li></ol><h2 id="-3"><a href="#-3" class="headerlink" title="()"></a>()</h2><ol><li>()可以指定一堆字符来匹配一个模式<br>例如：</li><li>^(very )*large$ 可以匹配 large       very very large 等</li></ol><h2 id="-4"><a href="#-4" class="headerlink" title="|"></a>|</h2><blockquote><p>|用来指定几个规则只要匹配一个规则即可完成匹配<br>  例如： ^abc.(com|cn|net)$ 能匹配 abc.com abc.cn abc.net</p></blockquote><h2 id="-5"><a href="#-5" class="headerlink" title="\"></a>\</h2><blockquote><p>\转义 ，如果要匹配{、^、+等有特殊含义的字符，可以用\转义。<br>  例如: ^1*(2+3)=6$ 只能匹配 1*(2+3)=6</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-javascript&quot;&gt;&lt;code class=&quot;langua
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="https://taffyblog.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>this关键字</title>
    <link href="https://taffyblog.github.io/2018/04/29/thisOfJs/"/>
    <id>https://taffyblog.github.io/2018/04/29/thisOfJs/</id>
    <published>2018-04-29T04:12:16.000Z</published>
    <updated>2022-03-08T07:51:05.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数中this的指向"><a href="#函数中this的指向" class="headerlink" title="函数中this的指向"></a>函数中this的指向</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时输出1</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时输出 0</span><span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时输出0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>以上示例中this指向函数的拥有者/调用者，也就是window对象。</li><li>第一个示例中没有调用，函数体不会执行，所以输出为初始值1；</li><li>第二个示例中调用了一次，由于是在window对象中调用的，x也是在window对象中声明的，所以this指向window对象中的x，x被改变为0。</li><li>第三个示例中，分别调用了两个函数，先调用test2该变x=2，然后调用test1改变x=0,最后输出0。</li></ol><h2 id="在对象中使用this"><a href="#在对象中使用this" class="headerlink" title="在对象中使用this"></a>在对象中使用this</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>this指向当前对象  指向一个实例，示例中this指向o。</p></blockquote><h2 id="对象中调用外部函数"><a href="#对象中调用外部函数" class="headerlink" title="对象中调用外部函数"></a>对象中调用外部函数</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>action <span class="token operator">=</span> f<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上示例中f属于o,所以o是f的拥有者，所以this指向o。</p></blockquote><h2 id="构造函数中使用-this"><a href="#构造函数中使用-this" class="headerlink" title="构造函数中使用 this"></a>构造函数中使用 this</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ParentFunc</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParentFunc</span><span class="token punctuation">(</span><span class="token string">"lili"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出lili</span><span class="token comment" spellcheck="true">//此时this指向实例，也就是p。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="改变this的指向"><a href="#改变this的指向" class="headerlink" title="改变this的指向"></a>改变this的指向</h2><blockquote><p>使用 <code>call(作用域，参数1，餐数2..)</code> ,<code>apply(作用域，参数数组)</code> 在一个对象中调用另一个对象</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">121</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>action <span class="token operator">=</span> f<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>action<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出121 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>action<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果<code>call</code>方法不传参数则默认指向<code>window</code>对象，<code>window</code>对象中的<code>a=121</code>。当传了一个o的时候，作用域就被指向o，所以输出为<code>o.a=1</code>。</p></blockquote><h2 id="经典示例"><a href="#经典示例" class="headerlink" title="经典示例"></a>经典示例</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    number<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    showNumber<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指向obj</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向window</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指向obj</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">showNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出 1  3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>示例中调用showNumber方法中，首先改变obj.number=3</li><li>然后是一个自调用的方法，在自调用方法中，this指向window对象，所以先输出一个1;</li><li>然后输出obj.number=3。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数中this的指向&quot;&gt;&lt;a href=&quot;#函数中this的指向&quot; class=&quot;headerlink&quot; title=&quot;函数中this的指向&quot;&gt;&lt;/a&gt;函数中this的指向&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-javascr
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="https://taffyblog.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Js单例模式</title>
    <link href="https://taffyblog.github.io/2018/04/29/jsSingleton/"/>
    <id>https://taffyblog.github.io/2018/04/29/jsSingleton/</id>
    <published>2018-04-29T04:11:16.000Z</published>
    <updated>2022-03-08T07:51:05.915Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>js的单例模式主要是使用闭包函数实现。</p></blockquote><p>实现方式很简单，示例如下:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery-3.3.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        var showWindow = (function CreateWindow() {            var d;            return function () {                if (!d) {                    d = document.createElement("div");                    d.innerHTML = "弹窗内容";                    d.setAttribute("display", "none");                    document.body.appendChild(d);                }                return d;            };        })();        window.onload = function () {            document.getElementById("btn").onclick = function () {                var win = showWindow();                win.style.display = "block";            }        }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show Window<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;js的单例模式主要是使用闭包函数实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实现方式很简单，示例如下:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-html&quot;&gt;&lt;code class=&quot;language-htm
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="https://taffyblog.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>原生Js使用Ajax</title>
    <link href="https://taffyblog.github.io/2018/04/29/jsAjax/"/>
    <id>https://taffyblog.github.io/2018/04/29/jsAjax/</id>
    <published>2018-04-29T04:10:16.000Z</published>
    <updated>2022-03-08T07:51:05.912Z</updated>
    
    <content type="html"><![CDATA[<p>ajax技术核心 <code>XMLHttpRequest</code>对象(<code>XHR</code>)<br>IE5/IE6 <code>ActiveXObject</code></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//IE5/IE6</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//发起get请求</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>    <span class="token string">"get"</span><span class="token punctuation">,</span>    url<span class="token punctuation">,</span>      <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//true异步 false同步</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ajax技术核心 &lt;code&gt;XMLHttpRequest&lt;/code&gt;对象(&lt;code&gt;XHR&lt;/code&gt;)&lt;br&gt;IE5/IE6 &lt;code&gt;ActiveXObject&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="https://taffyblog.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>原型和继承</title>
    <link href="https://taffyblog.github.io/2018/04/09/prototypeAndInherit/"/>
    <id>https://taffyblog.github.io/2018/04/09/prototypeAndInherit/</id>
    <published>2018-04-09T13:10:16.000Z</published>
    <updated>2022-03-08T07:51:05.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型属性prototype"><a href="#原型属性prototype" class="headerlink" title="原型属性prototype"></a>原型属性prototype</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'呵呵'</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> per1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>per1<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/***  1. 声明一个构造函数*  2. 声明prototype属性*  3. 实例化**  实例化的对象可以共享prototype的属性和方法。可由此实现继承**/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在实例中修改原型属性-proto"><a href="#在实例中修改原型属性-proto" class="headerlink" title="在实例中修改原型属性  proto"></a>在实例中修改原型属性  <strong>proto</strong></h3><pre class="line-numbers language-javascript"><code class="language-javascript">per1<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'咳咳'</span><span class="token punctuation">;</span><span class="token keyword">var</span> per2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>per2<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出 咳咳</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="检测对象是否属于原型"><a href="#检测对象是否属于原型" class="headerlink" title="检测对象是否属于原型"></a>检测对象是否属于原型</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>per1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//构造函数和原型的区别</span><span class="token comment" spellcheck="true">//构造函数是用于生成对象的模板，当实例化多个对象时，会重复创建对象，造成内存空间浪费，增大CPU的开销，并没有消除代码的冗余。</span><span class="token comment" spellcheck="true">//将公用方法或属性设置为原型方法或属性，会让公共方法或属性在内存中只存在一份，不会重复创建。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>##用法</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Boy 继承Person</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'呵呵'</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>Boy<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出 呵呵</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子类调用父类构造函数"><a href="#子类调用父类构造函数" class="headerlink" title="子类调用父类构造函数"></a>子类调用父类构造函数</h3><blockquote><p>call(作用域,参数1，参数2…), apply(作用域,参数数组)</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ParentFunc</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">SonFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ParentFunc<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SonFunc<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParentFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> son1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SonFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出 张三</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原型属性prototype&quot;&gt;&lt;a href=&quot;#原型属性prototype&quot; class=&quot;headerlink&quot; title=&quot;原型属性prototype&quot;&gt;&lt;/a&gt;原型属性prototype&lt;/h2&gt;&lt;h3 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; cla
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="https://taffyblog.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>作用域和闭包</title>
    <link href="https://taffyblog.github.io/2018/04/09/closureScope/"/>
    <id>https://taffyblog.github.io/2018/04/09/closureScope/</id>
    <published>2018-04-09T04:10:16.000Z</published>
    <updated>2022-03-08T07:51:05.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h2><h3 id="声明方式"><a href="#声明方式" class="headerlink" title="声明方式"></a>声明方式</h3><blockquote><p>每个函数生成时都会形成一个封闭环境</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">parentFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'parent'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">sonFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'son'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出 son</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一个例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//b</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//c</span><span class="token comment" spellcheck="true">//add相当于内部函数，每次调用add就相当于调用一次内部函数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JS作用域"><a href="#JS作用域" class="headerlink" title="JS作用域"></a>JS作用域</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> f <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>按照其他后台语言来讲，函数执行之后，内部的变量就不存在了，k会为1000;</p></blockquote><blockquote><p>但JS中不是的，在本例中，调用f时会输出k,首先在内部函数中没有k,则向外部函数找，所以k为20。</p></blockquote><blockquote><p>所以不是从调用的地方往上找所需变量，而是从声明函数的地方一层层往上找，找到之后就不再往上找。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闭包函数&quot;&gt;&lt;a href=&quot;#闭包函数&quot; class=&quot;headerlink&quot; title=&quot;闭包函数&quot;&gt;&lt;/a&gt;闭包函数&lt;/h2&gt;&lt;h3 id=&quot;声明方式&quot;&gt;&lt;a href=&quot;#声明方式&quot; class=&quot;headerlink&quot; title=&quot;声明方式&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="https://taffyblog.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>EF高级特性</title>
    <link href="https://taffyblog.github.io/2018/01/22/EFAdvancedFeatures/"/>
    <id>https://taffyblog.github.io/2018/01/22/EFAdvancedFeatures/</id>
    <published>2018-01-22T12:54:26.000Z</published>
    <updated>2022-03-08T07:51:05.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DBContext类"><a href="#DBContext类" class="headerlink" title="DBContext类"></a>DBContext类</h2><h3 id="理解DBContext"><a href="#理解DBContext" class="headerlink" title="理解DBContext"></a>理解DBContext</h3><ol><li>是数据库的映射，包含全部的表</li><li>管理了数据库链接，一个实例是一个链接</li><li>本地缓存属性：查询数据后是放入本地缓存；修改操作是本地属性；删除也是修改本地属性；savechange的时候是一次性保存本地属性的全部变化，默认是开启事务的</li></ol><h3 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h3><p>由于对数据库实体的操作都是在本地缓存中执行的，所以如果直接new出来的对象是无法进行修改和删除的，示例如下:</p><pre class="line-numbers language-java"><code class="language-java"> User userNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Account <span class="token operator">=</span> <span class="token string">"Admin"</span><span class="token punctuation">,</span>    State <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    CompanyId <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>    CompanyName <span class="token operator">=</span> <span class="token string">"万达集团"</span><span class="token punctuation">,</span>    CreateTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>    CreatorId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    Email <span class="token operator">=</span> <span class="token string">"57265177@qq.com"</span><span class="token punctuation">,</span>    LastLoginTime <span class="token operator">=</span> null<span class="token punctuation">,</span>    LastModifierId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    LastModifyTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>    Mobile <span class="token operator">=</span> <span class="token string">"18664876671"</span><span class="token punctuation">,</span>    Name <span class="token operator">=</span> <span class="token string">"yoyo"</span><span class="token punctuation">,</span>    Password <span class="token operator">=</span> <span class="token string">"12356789"</span><span class="token punctuation">,</span>    UserType <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>dbContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>userNew<span class="token punctuation">)</span><span class="token punctuation">;</span>dbContext<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><p>以上代码将<code>userNew</code>插入了数据库,接下来对其进行删除：</p><pre class="line-numbers language-java"><code class="language-java">dbContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>userNew<span class="token punctuation">)</span><span class="token punctuation">;</span>dbContext<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就会报一个错：<code>无法删除此对象，因为未在ObjectStateManager中找到它。</code></p><p>如何解决？</p><pre class="line-numbers language-java"><code class="language-java">context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Attach</span><span class="token punctuation">(</span>userNew<span class="token punctuation">)</span><span class="token punctuation">;</span>dbContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>userNew<span class="token punctuation">)</span><span class="token punctuation">;</span>dbContext<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>删除之前先<code>Attach</code>一下就可以了。</p><h4 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h4><p>接下来对其进行修改:</p><pre class="line-numbers language-java"><code class="language-java">userNew<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"安德鲁"</span><span class="token punctuation">;</span>dbContext<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>直接这样操作将不会记录到数据库。</p></blockquote><p>如何解决?</p><pre class="line-numbers language-java"><code class="language-java">context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Attach</span><span class="token punctuation">(</span>userNew<span class="token punctuation">)</span><span class="token punctuation">;</span>userNew<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"安德鲁"</span><span class="token punctuation">;</span>dbContext<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改之前<code>Attach</code>一下就可以了，<code>必须在修改之前</code>,否则将不会生效。</p><p>但是如果非要在修改之后再<code>Attach</code>，也是可以的,但需要设置状态:</p><pre class="line-numbers language-java"><code class="language-java">userNew<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"安德鲁"</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Attach</span><span class="token punctuation">(</span>userNew<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span>userNew<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Modified<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要指定状态  或者Attach后修改</span>dbContext<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除也是一样的。</p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>单个查询时，在查询一次之后，如果以同样的条件查询，会从缓存中查询，不会再去查询数据库：</p><pre class="line-numbers language-java"><code class="language-java"> var user1 <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> var user2 <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> u<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> var user3 <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> var user4 <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> u<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码只会查询一次。</p><p>如果数据库有改变，程序中需要重新查询数据库,可以使用<code>AsNoTracking</code>方法：</p><pre class="line-numbers language-java"><code class="language-java"> var user1 <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Database类"><a href="#Database类" class="headerlink" title="Database类"></a>Database类</h2><h3 id="打印执行的Sql语句"><a href="#打印执行的Sql语句" class="headerlink" title="打印执行的Sql语句"></a>打印执行的Sql语句</h3><p>使用Database类的Log属性,这是一个委托，示例如下:</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token function">using</span> <span class="token punctuation">(</span>JDContext dbContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span>Log <span class="token operator">+=</span> c <span class="token operator">=</span><span class="token operator">></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>           User user2 <span class="token operator">=</span> dbContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这将在每次进行数据库操作时打印对应的Sql语句。</p><h3 id="直接执行Sql语句以及开启数据库事物"><a href="#直接执行Sql语句以及开启数据库事物" class="headerlink" title="直接执行Sql语句以及开启数据库事物"></a>直接执行Sql语句以及开启数据库事物</h3><p>使用<code>ExecuteSqlCommand</code>方法进行增删改操作，使用<code>SqlQuery</code>方法进行查询操作，使用<code>DbContextTransaction</code>开启数据库事物。</p><p>示例代码如下:</p><pre class="line-numbers language-java"><code class="language-java"> DbContextTransaction trans <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>    trans <span class="token operator">=</span> dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string sql <span class="token operator">=</span> <span class="token string">"Update [User] Set Name='小新' WHERE Id=@Id"</span><span class="token punctuation">;</span>    SqlParameter parameter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@Id"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">ExecuteSqlCommand</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    trans<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>trans <span class="token operator">!=</span> null<span class="token punctuation">)</span>        trans<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    trans<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>DbContextTransaction trans <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>    trans <span class="token operator">=</span> dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM [User] WHERE Id=@Id"</span><span class="token punctuation">;</span>    SqlParameter parameter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlParameter</span><span class="token punctuation">(</span><span class="token string">"@Id"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> dbContext<span class="token punctuation">.</span>Database<span class="token punctuation">.</span>SqlQuery<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">.</span>ToList<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    trans<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>trans <span class="token operator">!=</span> null<span class="token punctuation">)</span>        trans<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    trans<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="导航属性延迟加载、子查询"><a href="#导航属性延迟加载、子查询" class="headerlink" title="导航属性延迟加载、子查询"></a>导航属性延迟加载、子查询</h2><h3 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h3><p>设置是否延迟加载:</p><pre class="line-numbers language-java"><code class="language-java">context<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>LazyLoadingEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认是true  针对导航属性的</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导航属性在查询父表时，不会同时查询子表，只有在使用子表数据(即导航属性)时才会去查询子表数据。</p><p>示例如下:</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token function">using</span> <span class="token punctuation">(</span>JDContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span>Log <span class="token operator">+=</span> c <span class="token operator">=</span><span class="token operator">></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实体类型包含其它实体类型（POCO类）的属性（也可称为导航属性），且同时满足如下条件即可实列延迟加载，</span>    <span class="token comment" spellcheck="true">//1.该属性的类型必需为public且不能为Sealed；</span>    <span class="token comment" spellcheck="true">//2.属性标记为Virtual</span>    context<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>LazyLoadingEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认是true  针对导航属性的</span>    var companyList <span class="token operator">=</span> context<span class="token punctuation">.</span>Set<span class="token operator">&lt;</span>Company<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Id <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foreach</span> <span class="token punctuation">(</span>var company in companyList<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Company id={0} name={1}"</span><span class="token punctuation">,</span> company<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> company<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">foreach</span> <span class="token punctuation">(</span>var item in company<span class="token punctuation">.</span>User<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这个时候才去数据库查询user</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"User name={0}"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样每个<code>company</code>都会去数据库查询一次，但如果想要一次性查询出来呢？</p><p>有如下几种方式：</p><ol><li>使用<code>Include</code>方法</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     指定要包括在查询结果中的相关对象。</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 参数:</span><span class="token comment" spellcheck="true">//   path:</span><span class="token comment" spellcheck="true">//     要在查询结果中返回的相关对象列表（以点号分隔）。</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 返回结果:</span><span class="token comment" spellcheck="true">//     一个新的 System.Data.Entity.Infrastructure.DbQuery`1，它具有定义的查询路径。</span><span class="token keyword">public</span> virtual DbQuery<span class="token operator">&lt;</span>TResult<span class="token operator">></span> <span class="token function">Include</span><span class="token punctuation">(</span>string path<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例如下：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token function">using</span> <span class="token punctuation">(</span>JDContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span>Log <span class="token operator">+=</span> c <span class="token operator">=</span><span class="token operator">></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//指定Include，一次性加载出来</span>    var companyList <span class="token operator">=</span> context<span class="token punctuation">.</span>Set<span class="token operator">&lt;</span>Company<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Id <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foreach</span> <span class="token punctuation">(</span>var company in companyList<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Company id={0} name={1}"</span><span class="token punctuation">,</span> company<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> company<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">foreach</span> <span class="token punctuation">(</span>var item in company<span class="token punctuation">.</span>User<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"User name={0}"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DBContext类&quot;&gt;&lt;a href=&quot;#DBContext类&quot; class=&quot;headerlink&quot; title=&quot;DBContext类&quot;&gt;&lt;/a&gt;DBContext类&lt;/h2&gt;&lt;h3 id=&quot;理解DBContext&quot;&gt;&lt;a href=&quot;#理解DBContex
      
    
    </summary>
    
      <category term="ORM" scheme="https://taffyblog.github.io/categories/ORM/"/>
    
    
      <category term="EF6" scheme="https://taffyblog.github.io/tags/EF6/"/>
    
  </entry>
  
  <entry>
    <title>EntityFramework建立的三种方式</title>
    <link href="https://taffyblog.github.io/2018/01/16/EntityFramework/"/>
    <id>https://taffyblog.github.io/2018/01/16/EntityFramework/</id>
    <published>2018-01-16T12:54:26.000Z</published>
    <updated>2022-03-08T07:51:05.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DBFirst"><a href="#DBFirst" class="headerlink" title="DBFirst"></a>DBFirst</h2><h3 id="添加步骤"><a href="#添加步骤" class="headerlink" title="添加步骤"></a>添加步骤</h3><ol><li>添加Ado.net实体数据模型。</li><li>选择来自数据的EF设计器。</li></ol><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/ef1.png" alt="image"></p><ol start="3"><li>建立数据库连接。</li></ol><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/ef2.png" alt="image"></p><ol start="4"><li>选择数据库对象。</li></ol><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/ef3.png" alt="image"></p><p>以上步骤完成后，会自动生成一个对应数据库的实体关系图。</p><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/ef4.png" alt="image"></p><p>以及以下文件：</p><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/ef5.png" alt="image"></p><blockquote><p>如果更改了数据库结构，可以在实体关系图上右键选中该实体使用“从数据库更新模型即可”</p></blockquote><h2 id="CodeFirst"><a href="#CodeFirst" class="headerlink" title="CodeFirst"></a>CodeFirst</h2><h3 id="来自数据库的CodeFirst"><a href="#来自数据库的CodeFirst" class="headerlink" title="来自数据库的CodeFirst"></a>来自数据库的CodeFirst</h3><ol><li>添加Ado.net实体数据模型。</li><li>选择来自数据的CodeFirst。</li></ol><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/ef6.png" alt="image"></p><ol start="3"><li>建立数据库连接。</li></ol><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/ef7.png" alt="image"></p><ol start="4"><li>选择数据库对象。</li></ol><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/ef8.png" alt="image"></p><p>以上步骤完成后会生成如下文件：</p><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/ef9.png" alt="image"></p><p>此方法和<code>dbfirst</code>较为相似，但只会生成数据库实体模型和数据访问上下文，比dbfirst生成的文件更简洁。</p><blockquote><p>如果连接字符串中的数据库不存在，则会自动在服务器上根据配置及实体模型新建一个数据库以及表。</p></blockquote><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/ef10.png" alt="image"></p><h4 id="映射规则"><a href="#映射规则" class="headerlink" title="映射规则"></a>映射规则</h4><h5 id="特性映射"><a href="#特性映射" class="headerlink" title="特性映射"></a>特性映射</h5><p>代码中使用特性<code>Table</code>即可:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"Company"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> partial <span class="token keyword">class</span> <span class="token class-name">Company</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>使用此特性后，数据库生成的表名就是给Table特性传递的参数。</p></blockquote><p>如果要映射列名:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"Company"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> partial <span class="token keyword">class</span> <span class="token class-name">Company</span><span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token function">Column</span><span class="token punctuation">(</span><span class="token string">"CategoryId"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token operator">?</span> ClassId <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Mapping方式"><a href="#Mapping方式" class="headerlink" title="Mapping方式"></a>Mapping方式</h5><ol><li><p>新建一个类:</p><pre class="line-numbers language-java"><code class="language-java">using System<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>Entity<span class="token punctuation">.</span>ModelConfiguration<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Linq<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks<span class="token punctuation">;</span>namespace EFDemo<span class="token punctuation">.</span>CodeFirstFromDB<span class="token punctuation">.</span>Mapping<span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDCommodity002Mapping</span> <span class="token operator">:</span> EntityTypeConfiguration<span class="token operator">&lt;</span>JDCommodity002<span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token function">JDCommodity002Mapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ToTable</span><span class="token punctuation">(</span><span class="token string">"JD_Commodity_002"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后在Context中的<code>OnModelCreating</code>方法里添加配置:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> override <span class="token keyword">void</span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span>DbModelBuilder modelBuilder<span class="token punctuation">)</span><span class="token punctuation">{</span> modelBuilder<span class="token punctuation">.</span>Configurations<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JDCommodity002Mapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p><code>ToTable</code>方法中传递的参数就是要生成的表名了。</p></blockquote><h5 id="FluentAPI方式"><a href="#FluentAPI方式" class="headerlink" title="FluentAPI方式"></a>FluentAPI方式</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> override <span class="token keyword">void</span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span>DbModelBuilder modelBuilder<span class="token punctuation">)</span><span class="token punctuation">{</span>    modelBuilder<span class="token punctuation">.</span>Entity<span class="token operator">&lt;</span>JDCommodity003<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToTable</span><span class="token punctuation">(</span><span class="token string">"JD_Commodity_003"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是要映射列名:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> override <span class="token keyword">void</span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span>DbModelBuilder modelBuilder<span class="token punctuation">)</span><span class="token punctuation">{</span>    modelBuilder<span class="token punctuation">.</span>Entity<span class="token operator">&lt;</span>JDCommodity003<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToTable</span><span class="token punctuation">(</span><span class="token string">"JD_Commodity_003"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>ClassId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasColumnName</span><span class="token punctuation">(</span><span class="token string">"CatetgoryId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这表示将C#模型中的<code>JDCommodity003</code>类的<code>ClassId</code>属性，映射为数据库的<code>JD_Commodity_003</code>表、<code>CatetgoryId</code>列。</p></blockquote><h3 id="ModelFirst"><a href="#ModelFirst" class="headerlink" title="ModelFirst"></a>ModelFirst</h3><p>ModelFirst也就是Dbfirst的反向操作，即先做好实体模型，然后生成sql语句，也就是相当于把powerdesigner的功能拿过来了。个人不太喜欢，因此不做过多研究。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DBFirst&quot;&gt;&lt;a href=&quot;#DBFirst&quot; class=&quot;headerlink&quot; title=&quot;DBFirst&quot;&gt;&lt;/a&gt;DBFirst&lt;/h2&gt;&lt;h3 id=&quot;添加步骤&quot;&gt;&lt;a href=&quot;#添加步骤&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="ORM" scheme="https://taffyblog.github.io/categories/ORM/"/>
    
    
      <category term="EF6" scheme="https://taffyblog.github.io/tags/EF6/"/>
    
  </entry>
  
  <entry>
    <title>EntityFramework操作数据库</title>
    <link href="https://taffyblog.github.io/2018/01/16/EFDatabaseOperation/"/>
    <id>https://taffyblog.github.io/2018/01/16/EFDatabaseOperation/</id>
    <published>2018-01-16T12:54:26.000Z</published>
    <updated>2022-03-08T07:51:05.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h2><p>示例代码:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">using</span> <span class="token punctuation">(</span>CodeFirstDBContext dbContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodeFirstDBContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User userNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Account <span class="token operator">=</span> <span class="token string">"Admin"</span><span class="token punctuation">,</span>        State <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        CompanyId <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>        CompanyName <span class="token operator">=</span> <span class="token string">"万达集团"</span><span class="token punctuation">,</span>        CreateTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>        CreatorId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>        Email <span class="token operator">=</span> <span class="token string">"57265177@qq.com"</span><span class="token punctuation">,</span>        LastLoginTime <span class="token operator">=</span> null<span class="token punctuation">,</span>        LastModifierId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        LastModifyTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>        Mobile <span class="token operator">=</span> <span class="token string">"18664876671"</span><span class="token punctuation">,</span>        Name <span class="token operator">=</span> <span class="token string">"yoyo"</span><span class="token punctuation">,</span>        Password <span class="token operator">=</span> <span class="token string">"12356789"</span><span class="token punctuation">,</span>        UserType <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    dbContext<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>userNew<span class="token punctuation">)</span><span class="token punctuation">;</span>    dbContext<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>示例代码:</p><pre class="line-numbers language-java"><code class="language-java">userNew<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"安德鲁"</span><span class="token punctuation">;</span>dbContext<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>示例代码:</p><pre class="line-numbers language-java"><code class="language-java">dbContext<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>userNew<span class="token punctuation">)</span><span class="token punctuation">;</span>dbContext<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><ol><li><p>查询条件放在Where中使用lambda表达式:</p><pre class="line-numbers language-java"><code class="language-java">var list2 <span class="token operator">=</span> dbContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> u<span class="token punctuation">.</span>Id <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>排序</p></li></ol><pre class="line-numbers language-java"><code class="language-java">var list4 <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> u<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> u<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>EF中的查询有延迟查询的效果，也就是说只有在真正使用查询结果的时候才会去数据库查询，在此之前如果还设置了查询条件则会与之前条件的连接。如果使用ToLit方法则会立即查询到内存中。</p></blockquote><h3 id="按主键查找"><a href="#按主键查找" class="headerlink" title="按主键查找"></a>按主键查找</h3><h4 id="查找单个"><a href="#查找单个" class="headerlink" title="查找单个"></a>查找单个</h4><p>示例代码:</p><pre class="line-numbers language-java"><code class="language-java">User user2 <span class="token operator">=</span> dbContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查找多个"><a href="#查找多个" class="headerlink" title="查找多个"></a>查找多个</h4><p><code>Contains</code>方法,示例代码:</p><pre class="line-numbers language-java"><code class="language-java">var list <span class="token operator">=</span> dbContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="设置查询字段"><a href="#设置查询字段" class="headerlink" title="设置查询字段"></a>设置查询字段</h4><p><code>Select</code>方法可以筛选查询的字段，不必查询全部字段的时候可以使用：</p><pre class="line-numbers language-java"><code class="language-java">var list <span class="token operator">=</span> dbContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>u<span class="token operator">=</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token punctuation">{</span>Account <span class="token operator">=</span>u<span class="token punctuation">.</span>Account<span class="token punctuation">,</span>Id<span class="token operator">=</span>u<span class="token punctuation">.</span>Id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上示例中就只查询了<code>Account</code>和<code>Id</code>字段。</p><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><pre class="line-numbers language-java"><code class="language-java"> var list <span class="token operator">=</span> dbContext<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> u<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">"小"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> u<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">"新"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                   <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> u<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">"新"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                   <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> u<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"小新"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                   <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> u<span class="token punctuation">.</span>Name<span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span>                                                   <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> u<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>StartsWith相当于前%，EndsWith相当于后%,Contains相当于两个%。</p><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><pre class="line-numbers language-java"><code class="language-java"> var list <span class="token operator">=</span> from u in dbContext<span class="token punctuation">.</span>User            join c in dbContext<span class="token punctuation">.</span>Category on u<span class="token punctuation">.</span>CompanyId equals c<span class="token punctuation">.</span>Id            into ucList            from uc in ucList<span class="token punctuation">.</span><span class="token function">DefaultIfEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            where <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>            select <span class="token keyword">new</span>            <span class="token punctuation">{</span>                Account <span class="token operator">=</span> u<span class="token punctuation">.</span>Account<span class="token punctuation">,</span>                Pwd <span class="token operator">=</span> u<span class="token punctuation">.</span>Password            <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相当于数据库左连接查询。</p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><pre class="line-numbers language-java"><code class="language-java"> var list <span class="token operator">=</span> <span class="token punctuation">(</span>from u in dbContext<span class="token punctuation">.</span>User            where <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> u<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//必须加OrderBy,不然运行会报错</span>            select <span class="token keyword">new</span>            <span class="token punctuation">{</span>                Account <span class="token operator">=</span> u<span class="token punctuation">.</span>Account<span class="token punctuation">,</span>                Pwd <span class="token operator">=</span> u<span class="token punctuation">.</span>Password            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表示跳过前3条，查询5条。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新增数据&quot;&gt;&lt;a href=&quot;#新增数据&quot; class=&quot;headerlink&quot; title=&quot;新增数据&quot;&gt;&lt;/a&gt;新增数据&lt;/h2&gt;&lt;p&gt;示例代码:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot;&gt;&lt;code class=
      
    
    </summary>
    
      <category term="ORM" scheme="https://taffyblog.github.io/categories/ORM/"/>
    
    
      <category term="EF6" scheme="https://taffyblog.github.io/tags/EF6/"/>
    
  </entry>
  
  <entry>
    <title>ORM概念</title>
    <link href="https://taffyblog.github.io/2018/01/16/Orm/"/>
    <id>https://taffyblog.github.io/2018/01/16/Orm/</id>
    <published>2018-01-16T11:54:26.000Z</published>
    <updated>2022-03-08T07:51:05.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ORM-对象关系映射"><a href="#ORM-对象关系映射" class="headerlink" title="ORM 对象关系映射"></a>ORM 对象关系映射</h2><p>对象关系映射（英语：(Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换[1]  。从效果上说，它其实是创建了一个可在编程语言里使用的–“虚拟对象数据库”。</p><p>面向对象是从软件工程基本原则（如耦合、聚合、封装）的基础上发展起来的，而关系数据库则是从数学理论发展而来的，两套理论存在显著的区别。为了解决这个不匹配的现象，对象关系映射技术应运而生。</p><p>对象关系映射（Object-Relational Mapping）提供了概念性的、易于理解的模型化数据的方法。ORM方法论基于三个核心原则： 简单：以最基本的形式建模数据。 传达性：数据库结构被任何人都能理解的语言文档化。 精确性：基于数据模型创建正确标准化的结构。 典型地，建模者通过收集来自那些熟悉应用程序但不熟练的数据建模者的人的信息开发信息模型。建模者必须能够用非技术企业专家可以理解的术语在概念层次上与数据结构进行通讯。建模者也必须能以简单的单元分析信息，对样本数据进行处理。ORM专门被设计为改进这种联系。</p><p>简单的说：ORM相当于中继数据。具体到产品上，例如ADO.NET Entity Framework。DLINQ中实体类的属性[Table]就算是一种中继数据。</p><h2 id="使用ORM的利弊"><a href="#使用ORM的利弊" class="headerlink" title="使用ORM的利弊"></a>使用ORM的利弊</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>开发速度更快。</li><li>学习成本降低。</li><li>在小型项目上效率较高。</li><li>支持异构的数据库。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>固定生成sql，对sql优化比较困难。</li><li>反射造成性能损失。</li><li>容易造成不当的缓存使用。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ORM-对象关系映射&quot;&gt;&lt;a href=&quot;#ORM-对象关系映射&quot; class=&quot;headerlink&quot; title=&quot;ORM 对象关系映射&quot;&gt;&lt;/a&gt;ORM 对象关系映射&lt;/h2&gt;&lt;p&gt;对象关系映射（英语：(Object Relational Mapping，简
      
    
    </summary>
    
      <category term="ORM" scheme="https://taffyblog.github.io/categories/ORM/"/>
    
    
      <category term="EF6" scheme="https://taffyblog.github.io/tags/EF6/"/>
    
  </entry>
  
  <entry>
    <title>CSS选择器</title>
    <link href="https://taffyblog.github.io/2017/12/17/cssSelector/"/>
    <id>https://taffyblog.github.io/2017/12/17/cssSelector/</id>
    <published>2017-12-17T05:03:13.000Z</published>
    <updated>2022-03-08T07:51:05.902Z</updated>
    
    <content type="html"><![CDATA[<h2 id="css选择器列表"><a href="#css选择器列表" class="headerlink" title="css选择器列表"></a>css选择器列表</h2><table><thead><tr><th style="text-align:left">选择器</th><th style="text-align:left">例子</th><th style="text-align:left">例子描述</th><th style="text-align:left">CSS</th></tr></thead><tbody><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_class.asp" target="_blank" rel="noopener">.class</a></td><td style="text-align:left">.intro</td><td style="text-align:left">选择 class=”intro” 的所有元素。</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_id.asp" target="_blank" rel="noopener">#id</a></td><td style="text-align:left">#firstname</td><td style="text-align:left">选择 id=”firstname” 的所有元素。</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_all.asp" target="_blank" rel="noopener">*</a></td><td style="text-align:left">*</td><td style="text-align:left">选择所有元素。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_element.asp" target="_blank" rel="noopener">element</a></td><td style="text-align:left">p</td><td style="text-align:left">选择所有 p 元素。</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_element_comma.asp" target="_blank" rel="noopener">element,element</a></td><td style="text-align:left">div,p</td><td style="text-align:left">选择所有 div 元素和所有 p 元素。</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_element_element.asp" target="_blank" rel="noopener">element element</a></td><td style="text-align:left">div p</td><td style="text-align:left">选择 div 元素内部的所有 p 元素。</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_element_gt.asp" target="_blank" rel="noopener">element&gt;element</a></td><td style="text-align:left">div&gt;p</td><td style="text-align:left">选择父元素为 div 元素的所有 p 元素。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_element_plus.asp" target="_blank" rel="noopener">element+element</a></td><td style="text-align:left">div+p</td><td style="text-align:left">选择紧接在 div 元素之后的所有 p 元素。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_attribute.asp" target="_blank" rel="noopener">[attribute]</a></td><td style="text-align:left">[target]</td><td style="text-align:left">选择带有 target 属性所有元素。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_attribute_value.asp" target="_blank" rel="noopener">[attribute=value]</a></td><td style="text-align:left">[target=_blank]</td><td style="text-align:left">选择 target=”_blank” 的所有元素。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_attribute_value_contain.asp" target="_blank" rel="noopener">[attribute~=value]</a></td><td style="text-align:left">[title~=flower]</td><td style="text-align:left">选择 title 属性包含单词 “flower” 的所有元素。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_attribute_value_start.asp" target="_blank" rel="noopener">[attribute丨=value]</a></td><td style="text-align:left">[lang丨=en]</td><td style="text-align:left">选择 lang 属性值以 “en” 开头的所有元素。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_link.asp" target="_blank" rel="noopener">:link</a></td><td style="text-align:left">a:link</td><td style="text-align:left">选择所有未被访问的链接。</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_visited.asp" target="_blank" rel="noopener">:visited</a></td><td style="text-align:left">a:visited</td><td style="text-align:left">选择所有已被访问的链接。</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_active.asp" target="_blank" rel="noopener">:active</a></td><td style="text-align:left">a:active</td><td style="text-align:left">选择活动链接。</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_hover.asp" target="_blank" rel="noopener">:hover</a></td><td style="text-align:left">a:hover</td><td style="text-align:left">选择鼠标指针位于其上的链接。</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_focus.asp" target="_blank" rel="noopener">:focus</a></td><td style="text-align:left">input:focus</td><td style="text-align:left">选择获得焦点的 input 元素。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_first-letter.asp" target="_blank" rel="noopener">:first-letter</a></td><td style="text-align:left">p:first-letter</td><td style="text-align:left">选择每个 p 元素的首字母。</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_first-line.asp" target="_blank" rel="noopener">:first-line</a></td><td style="text-align:left">p:first-line</td><td style="text-align:left">选择每个 p 元素的首行。</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_first-child.asp" target="_blank" rel="noopener">:first-child</a></td><td style="text-align:left">p:first-child</td><td style="text-align:left">选择属于父元素的第一个子元素的每个 p 元素。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_before.asp" target="_blank" rel="noopener">:before</a></td><td style="text-align:left">p:before</td><td style="text-align:left">在每个 p 元素的内容之前插入内容。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_after.asp" target="_blank" rel="noopener">:after</a></td><td style="text-align:left">p:after</td><td style="text-align:left">在每个 p 元素的内容之后插入内容。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_lang.asp" target="_blank" rel="noopener">:lang(language)</a></td><td style="text-align:left">p:lang(it)</td><td style="text-align:left">选择带有以 “it” 开头的 lang 属性值的每个 p 元素。</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_gen_sibling.asp" target="_blank" rel="noopener">element1~element2</a></td><td style="text-align:left">p~ul</td><td style="text-align:left">选择前面有 p 元素的每个 ul 元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_attr_begin.asp" target="_blank" rel="noopener">[attribute^=value]</a></td><td style="text-align:left">a[src^=”https”]</td><td style="text-align:left">选择其 src 属性值以 “https” 开头的每个 a 元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_attr_end.asp" target="_blank" rel="noopener">[attribute$=value]</a></td><td style="text-align:left">a[src$=”.pdf”]</td><td style="text-align:left">选择其 src 属性以 “.pdf” 结尾的所有 a 元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_attr_contain.asp" target="_blank" rel="noopener">[attribute*=value]</a></td><td style="text-align:left">a[src*=”abc”]</td><td style="text-align:left">选择其 src 属性中包含 “abc” 子串的每个 a 元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_first-of-type.asp" target="_blank" rel="noopener">:first-of-type</a></td><td style="text-align:left">p:first-of-type</td><td style="text-align:left">选择属于其父元素的首个 p 元素的每个 p 元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_last-of-type.asp" target="_blank" rel="noopener">:last-of-type</a></td><td style="text-align:left">p:last-of-type</td><td style="text-align:left">选择属于其父元素的最后 p 元素的每个 p 元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_only-of-type.asp" target="_blank" rel="noopener">:only-of-type</a></td><td style="text-align:left">p:only-of-type</td><td style="text-align:left">选择属于其父元素唯一的 p 元素的每个 p 元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_only-child.asp" target="_blank" rel="noopener">:only-child</a></td><td style="text-align:left">p:only-child</td><td style="text-align:left">选择属于其父元素的唯一子元素的每个 p 元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_nth-child.asp" target="_blank" rel="noopener">:nth-child(n)</a></td><td style="text-align:left">p:nth-child(2)</td><td style="text-align:left">选择属于其父元素的第二个子元素的每个 p 元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_nth-last-child.asp" target="_blank" rel="noopener">:nth-last-child(n)</a></td><td style="text-align:left">p:nth-last-child(2)</td><td style="text-align:left">同上，从最后一个子元素开始计数。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_nth-of-type.asp" target="_blank" rel="noopener">:nth-of-type(n)</a></td><td style="text-align:left">p:nth-of-type(2)</td><td style="text-align:left">选择属于其父元素第二个 p 元素的每个 p 元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_nth-last-of-type.asp" target="_blank" rel="noopener">:nth-last-of-type(n)</a></td><td style="text-align:left">p:nth-last-of-type(2)</td><td style="text-align:left">同上，但是从最后一个子元素开始计数。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_last-child.asp" target="_blank" rel="noopener">:last-child</a></td><td style="text-align:left">p:last-child</td><td style="text-align:left">选择属于其父元素最后一个子元素每个 p 元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_root.asp" target="_blank" rel="noopener">:root</a></td><td style="text-align:left">:root</td><td style="text-align:left">选择文档的根元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_empty.asp" target="_blank" rel="noopener">:empty</a></td><td style="text-align:left">p:empty</td><td style="text-align:left">选择没有子元素的每个 p 元素（包括文本节点）。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_target.asp" target="_blank" rel="noopener">:target</a></td><td style="text-align:left">#news:target</td><td style="text-align:left">选择当前活动的 #news 元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_enabled.asp" target="_blank" rel="noopener">:enabled</a></td><td style="text-align:left">input:enabled</td><td style="text-align:left">选择每个启用的 imput 元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_disabled.asp" target="_blank" rel="noopener">:disabled</a></td><td style="text-align:left">input:disabled</td><td style="text-align:left">选择每个禁用的 imput 元素</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_checked.asp" target="_blank" rel="noopener">:checked</a></td><td style="text-align:left">input:checked</td><td style="text-align:left">选择每个被选中的 imput 元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_not.asp" target="_blank" rel="noopener">:not(selector)</a></td><td style="text-align:left">:not(p)</td><td style="text-align:left">选择非 p 元素的每个元素。</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left"><a href="http://www.w3school.com.cn/cssref/selector_selection.asp" target="_blank" rel="noopener">::selection</a></td><td style="text-align:left">::selection</td><td style="text-align:left">选择被用户选取的元素部分。</td><td style="text-align:left">3</td></tr></tbody></table><blockquote><p>为了兼容老版本的写法：-moz代表firefox浏览器私有属性，-ms代表ie浏览器私有属性，-webkit代表safari、chrome私有属性。<br>现在比较流行的一个概念就是：不太关键的样式，可以不考虑兼容，如果客户浏览器太旧，就让他看到旧的效果就是，一定要看到新效果，只能建议客户升级浏览器。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;css选择器列表&quot;&gt;&lt;a href=&quot;#css选择器列表&quot; class=&quot;headerlink&quot; title=&quot;css选择器列表&quot;&gt;&lt;/a&gt;css选择器列表&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="https://taffyblog.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 面向对象</title>
    <link href="https://taffyblog.github.io/2017/12/12/JavaScriptOO/"/>
    <id>https://taffyblog.github.io/2017/12/12/JavaScriptOO/</id>
    <published>2017-12-12T03:41:13.000Z</published>
    <updated>2022-03-08T07:51:05.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js中创建对象的三种方式"><a href="#js中创建对象的三种方式" class="headerlink" title="js中创建对象的三种方式"></a>js中创建对象的三种方式</h2><h3 id="使用Object"><a href="#使用Object" class="headerlink" title="使用Object"></a>使用Object</h3><ol><li>使用new Object()创建对象。</li><li>然后可以为对象设置属性和值</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> student<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span>age <span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用构造函数"><a href="#使用构造函数" class="headerlink" title="使用构造函数"></a>使用构造函数</h3><ol><li>定义函数，参数为需要创建的对象的属性值。</li><li>函数内使用this关键字设置属性。</li><li>创建对象时使用<code>new 函数名(参数值)</code>来创建对象。</li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> stu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造函数和普通函数的区别"><a href="#构造函数和普通函数的区别" class="headerlink" title="构造函数和普通函数的区别"></a>构造函数和普通函数的区别</h4><ol><li><code>this</code>的指向，构造函数的this指向使用该构造函数创建的实例；普通函数指向的是函数的调用者。</li><li>调用方式，构造函数使用<code>new</code>关键字。</li><li>命名规范，构造函数首字母大写帕斯卡命名法，普通函数使用驼峰命名法。</li></ol><h3 id="使用字面量"><a href="#使用字面量" class="headerlink" title="使用字面量"></a>使用字面量</h3><p>即用类似于<code>json</code>的方式来创建对象，创建空对象可用:<code>var obj = {}</code>。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">,</span>    study<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用方式</span>student<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="for循环和each的区别"><a href="#for循环和each的区别" class="headerlink" title="for循环和each的区别"></a>for循环和each的区别</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//item是当前项，index是索引 </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//for循环同步，each异步。each无法使用break,continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断对象是否存在某一个属性"><a href="#判断对象是否存在某一个属性" class="headerlink" title="判断对象是否存在某一个属性:"></a>判断对象是否存在某一个属性:</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//使用 hasOwnProperty </span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//或者</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span>a <span class="token operator">!=</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;js中创建对象的三种方式&quot;&gt;&lt;a href=&quot;#js中创建对象的三种方式&quot; class=&quot;headerlink&quot; title=&quot;js中创建对象的三种方式&quot;&gt;&lt;/a&gt;js中创建对象的三种方式&lt;/h2&gt;&lt;h3 id=&quot;使用Object&quot;&gt;&lt;a href=&quot;#使用Obj
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="https://taffyblog.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript绘制图片验证码</title>
    <link href="https://taffyblog.github.io/2017/10/22/validateImage/"/>
    <id>https://taffyblog.github.io/2017/10/22/validateImage/</id>
    <published>2017-10-22T09:34:26.000Z</published>
    <updated>2022-03-08T07:51:05.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>在html中加入<code>canvas</code>标签。</li><li>在js中绘制一个矩形框。</li><li>绘制随机文字并随机颜色，随机倾斜一定角度。</li><li>绘制干扰线、干扰点。</li></ol><blockquote><p>在倾斜验证码时，倾斜的只会是画布，文字不会跟随。因此，可以把画布的起始位置移动到绘制文字的位置，然后将画布倾斜一定角度，然后再绘制文字，第一个文字绘制完成后将画布归位，继续绘制第二个文字。画布倾斜的单位是弧度。</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>HTML：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/demo.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/demo.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>validate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>换 一 个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CSS：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">a </span><span class="token punctuation">{</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">126</span>, <span class="token number">45</span>, <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"微软雅黑"</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript:</p><pre class="line-numbers language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> aTag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aTag<span class="token punctuation">)</span><span class="token punctuation">;</span>    aTag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> width <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> height <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token function">drawImage</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**生成一个随机数**/</span><span class="token keyword">function</span> <span class="token function">randomNum</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**生成一个随机色**/</span><span class="token keyword">function</span> <span class="token function">randomColor</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token function">randomNum</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">randomNum</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">randomNum</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"rgb("</span> <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> g <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">drawImage</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取dom对象</span>    <span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"validate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dom<span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    dom<span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取绘图对象</span>    <span class="token keyword">var</span> context <span class="token operator">=</span> dom<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//绘制矩形框</span>    context<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"0123456789abcdefghijklmnpqrstuvwxyz"</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">35</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> size <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//绘制文字</span>        context<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">"30px 微软雅黑"</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> deg <span class="token operator">=</span> <span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> x<span class="token operator">=</span>i <span class="token operator">*</span> <span class="token number">35</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> y<span class="token operator">=</span>size <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改坐标原点和旋转弧度</span>        context<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>deg <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//恢复坐标原点和旋转角度</span>        context<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token operator">-</span>deg <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">,</span> <span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//绘制干扰线</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> startX <span class="token operator">=</span> <span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">)</span>        <span class="token keyword">var</span> startY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> endX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> width<span class="token punctuation">)</span>        <span class="token keyword">var</span> endY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> height<span class="token punctuation">)</span>        context<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>startX<span class="token punctuation">,</span> startY<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>endX<span class="token punctuation">,</span> endY<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//绘制干扰点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> startX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> startY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span>        context<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>startX<span class="token punctuation">,</span> startY<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>startX <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> startY <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在html中加入&lt;code&gt;canvas&lt;/code&gt;标签。&lt;/li&gt;
&lt;li&gt;在js中绘制一个矩形框。&lt;/li&gt;
&lt;li&gt;绘制
      
    
    </summary>
    
      <category term="前端" scheme="https://taffyblog.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="https://taffyblog.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>工具及、知识点及外链收集</title>
    <link href="https://taffyblog.github.io/2017/10/14/ToolsNotes/"/>
    <id>https://taffyblog.github.io/2017/10/14/ToolsNotes/</id>
    <published>2017-10-14T06:34:26.000Z</published>
    <updated>2022-03-08T07:51:05.896Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://tool.sufeinet.com/" target="_blank" rel="noopener">苏飞论坛–生成http请求代码,json校验,在线生成二维码，在线执行JS,长字符串拼接代码，URL分析，IP归属地查询，JSON生成C#类代码</a>;</p></blockquote><blockquote><p><a href="http://www.dingxuewen.com/2017/03/11/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE%E4%B8%89/" target="_blank" rel="noopener">Hexo博客个性化设置</a></p></blockquote><blockquote><p><a href="https://snatix.com/2017/01/14/008-customize-hexo/" target="_blank" rel="noopener">Hexo-Material主题设置</a></p></blockquote><blockquote><p><a href="http://www.cnblogs.com/mienreal/p/4528470.html" target="_blank" rel="noopener">ABP系列文章</a></p></blockquote><blockquote><p><a href="http://www.cnblogs.com/liweis/" target="_blank" rel="noopener">GIS相关文章-我也是个傻瓜</a></p></blockquote><blockquote><p><a href="https://brightloong.github.io/2017/02/24/Hexo-Github%E5%BB%BA%E7%AB%99-%E4%B8%80-%E5%BC%80%E5%A7%8B%E5%BB%BA%E7%AB%99/#more" target="_blank" rel="noopener">搭建Hexo博客</a></p></blockquote><blockquote><p><a href="http://www.cuplayer.com" target="_blank" rel="noopener">酷播云-网页播放器、各种技术教程</a></p></blockquote><blockquote><p><a href="http://www.52player.cn" target="_blank" rel="noopener">网页播放器源码</a></p></blockquote><blockquote><p><a href="http://mediaelementjs.com" target="_blank" rel="noopener">js播放器插件 Media Element</a></p></blockquote><blockquote><p><a href="http://lab.mkblog.cn/" target="_blank" rel="noopener">孟坤实验室-好玩的 Html 作品</a></p></blockquote><blockquote><p><a href="https://mkblog.cn" target="_blank" rel="noopener">孟坤博客</a></p></blockquote><blockquote><p><a href="http://www.wmzhe.cn" target="_blank" rel="noopener">完美者-各种精品软件、文章</a></p></blockquote><blockquote><p><a href="http://www.cnblogs.com/daxnet/p/5782019.html" target="_blank" rel="noopener">在docker中运行ASP.NET Core Web API应用程序</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://tool.sufeinet.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;苏飞论坛–生成http请求代码,json校验,在线生成二维码，在线执行JS,长字符串拼接代码，URL分析，IP归属
      
    
    </summary>
    
      <category term="随笔" scheme="https://taffyblog.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>爬虫初探</title>
    <link href="https://taffyblog.github.io/2017/10/14/Crawler/"/>
    <id>https://taffyblog.github.io/2017/10/14/Crawler/</id>
    <published>2017-10-14T05:03:13.000Z</published>
    <updated>2022-03-08T07:51:05.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬虫简介"><a href="#爬虫简介" class="headerlink" title="爬虫简介"></a>爬虫简介</h2><p>网络爬虫(又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者)，是一种按照一定的规则，自动的抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁，自动索引，模拟程序或者蠕虫。</p><h2 id="下载html"><a href="#下载html" class="headerlink" title="下载html"></a>下载html</h2><p>htmlHelper:</p><pre class="line-numbers language-java"><code class="language-java">using System<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>IO<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Linq<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Net<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks<span class="token punctuation">;</span>namespace Ruanmou<span class="token punctuation">.</span>Crawler<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// </span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpHelper</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>HttpHelper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 根据url下载内容  之前是GB2312</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="url">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">public</span> <span class="token keyword">static</span> string <span class="token function">DownloadUrl</span><span class="token punctuation">(</span>string url<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">DownloadHtml</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 下载html</span>        <span class="token comment" spellcheck="true">/// HttpWebRequest功能比较丰富，WebClient使用比较简单</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="url">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">public</span> <span class="token keyword">static</span> string <span class="token function">DownloadHtml</span><span class="token punctuation">(</span>string url<span class="token punctuation">,</span> Encoding encode<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string html <span class="token operator">=</span> string<span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                HttpWebRequest request <span class="token operator">=</span> HttpWebRequest<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> as HttpWebRequest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//模拟请求</span>                request<span class="token punctuation">.</span>Timeout <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置30s的超时</span>                request<span class="token punctuation">.</span>UserAgent <span class="token operator">=</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36"</span><span class="token punctuation">;</span>                request<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">"text/html; charset=utf-8"</span><span class="token punctuation">;</span>                <span class="token function">using</span> <span class="token punctuation">(</span>HttpWebResponse response <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">GetResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> as HttpWebResponse<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//发起请求</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"抓取{0}地址返回失败,response.StatusCode为{1}"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> response<span class="token punctuation">.</span>StatusCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">try</span>                        <span class="token punctuation">{</span>                            StreamReader sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamReader</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">GetResponseStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encode<span class="token punctuation">)</span><span class="token punctuation">;</span>                            html <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取数据</span>                            sr<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>$<span class="token string">"DownloadHtml抓取{url}失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                            html <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>WebException</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"远程服务器返回错误: (306)。"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"远程服务器返回错误: (306)。"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    html <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"DownloadHtml抓取{0}出现异常"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                html <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> html<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="HtmlAgilityPack解析Html"><a href="#HtmlAgilityPack解析Html" class="headerlink" title="HtmlAgilityPack解析Html"></a>HtmlAgilityPack解析Html</h2><p>商品抓取</p><pre class="line-numbers language-java"><code class="language-java">using HtmlAgilityPack<span class="token punctuation">;</span>using System<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>IO<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Linq<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Net<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks<span class="token punctuation">;</span>using Newtonsoft<span class="token punctuation">.</span>Json<span class="token punctuation">;</span>using Ruanmou<span class="token punctuation">.</span>Crawler<span class="token punctuation">.</span>DataService<span class="token punctuation">;</span>using Ruanmou<span class="token punctuation">.</span>Crawler<span class="token punctuation">.</span>Model<span class="token punctuation">;</span>namespace Ruanmou<span class="token punctuation">.</span>Crawler<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 商品抓取</span>    <span class="token comment" spellcheck="true">/// http://www.w3school.com.cn/xpath/index.asp XPATH语法</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommoditySearch</span> <span class="token operator">:</span> ISearch    <span class="token punctuation">{</span>        <span class="token keyword">private</span> Logger logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>CommoditySearch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> WarnRepository warnRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WarnRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> CommodityRepository commodityRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommodityRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> Category category <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">CommoditySearch</span><span class="token punctuation">(</span>Category _category<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            category <span class="token operator">=</span> _category<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Crawler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span>Url<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    warnRepository<span class="token punctuation">.</span><span class="token function">SaveWarn</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"Url为空,Name={0} Level={1} Url={2}"</span><span class="token punctuation">,</span> category<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> category<span class="token punctuation">.</span>CategoryLevel<span class="token punctuation">,</span> category<span class="token punctuation">.</span>Url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                string html <span class="token operator">=</span> HttpHelper<span class="token punctuation">.</span><span class="token function">DownloadUrl</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span>Url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下载html</span>                HtmlDocument doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                doc<span class="token punctuation">.</span><span class="token function">LoadHtml</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载html</span>                string pageNumberPath <span class="token operator">=</span> @<span class="token string">"//*[@id='J_topPage']/span/i"</span><span class="token punctuation">;</span>                HtmlNode pageNumberNode <span class="token operator">=</span> doc<span class="token punctuation">.</span>DocumentNode<span class="token punctuation">.</span><span class="token function">SelectSingleNode</span><span class="token punctuation">(</span>pageNumberPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pageNumberNode <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    string sNumber <span class="token operator">=</span> pageNumberNode<span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>sNumber<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        string pageUrl <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"{0}&amp;page={1}"</span><span class="token punctuation">,</span> category<span class="token punctuation">.</span>Url<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">try</span>                        <span class="token punctuation">{</span>                            List<span class="token operator">&lt;</span>Commodity<span class="token operator">></span> commodityList <span class="token operator">=</span> <span class="token function">GetCommodityList</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span> pageUrl<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">"&amp;page=1&amp;"</span><span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"&amp;page={0}&amp;"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//commodityRepository.SaveList(commodityList);</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//保证一页的错误不影响另外一页</span>                        <span class="token punctuation">{</span>                            logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Crawler的commodityRepository.SaveList(commodityList)出现异常"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//string fristPath = "//*[@id='J_bottomPage']/span[1]/a";</span>                <span class="token comment" spellcheck="true">//HtmlNodeCollection noneNodeList = doc.DocumentNode.SelectNodes(fristPath);//xPath分析</span>                <span class="token comment" spellcheck="true">//if (noneNodeList == null)</span>                <span class="token comment" spellcheck="true">//{</span>                <span class="token comment" spellcheck="true">//    warnRepository.SaveWarn(category, string.Format("分页数据为空,Name={0} Level={1} Url={2}", category.Name, category.CategoryLevel, category.Url));</span>                <span class="token comment" spellcheck="true">//    return;</span>                <span class="token comment" spellcheck="true">//}</span>                <span class="token comment" spellcheck="true">//string pageUrl = null;</span>                <span class="token comment" spellcheck="true">//foreach (var node in noneNodeList)</span>                <span class="token comment" spellcheck="true">//{</span>                <span class="token comment" spellcheck="true">//    string sNum = node.InnerHtml;</span>                <span class="token comment" spellcheck="true">//    if (sNum.Equals("1"))</span>                <span class="token comment" spellcheck="true">//    {</span>                <span class="token comment" spellcheck="true">//        pageUrl = node.Attributes["href"].Value.Replace("&amp;amp;", "&amp;");</span>                <span class="token comment" spellcheck="true">//        if (!pageUrl.StartsWith("http://"))</span>                <span class="token comment" spellcheck="true">//            pageUrl = string.Format("http://list.jd.com{0}", pageUrl);</span>                <span class="token comment" spellcheck="true">//        break;</span>                <span class="token comment" spellcheck="true">//    }</span>                <span class="token comment" spellcheck="true">//}</span>                <span class="token comment" spellcheck="true">//string sMaxPageNumPath = "//*[@id='J_bottomPage']/span[2]/em[1]/b";</span>                <span class="token comment" spellcheck="true">//HtmlNode sMaxPageNumPathNode = doc.DocumentNode.SelectSingleNode(sMaxPageNumPath);</span>                <span class="token comment" spellcheck="true">//string sMaxPageNum = sMaxPageNumPathNode.InnerHtml;</span>                <span class="token comment" spellcheck="true">//for (int i = 1; i &lt; int.Parse(sMaxPageNum) + 1; i++)</span>                <span class="token comment" spellcheck="true">//{</span>                <span class="token comment" spellcheck="true">//    try</span>                <span class="token comment" spellcheck="true">//    {</span>                <span class="token comment" spellcheck="true">//        List&lt;Commodity> commodityList = GetCommodityList(category, pageUrl.Replace("&amp;page=1&amp;", string.Format("&amp;page={0}&amp;", i)));</span>                <span class="token comment" spellcheck="true">//        commodityRepository.SaveList(commodityList);</span>                <span class="token comment" spellcheck="true">//    }</span>                <span class="token comment" spellcheck="true">//    catch (Exception ex)//保证一页的错误不影响另外一页</span>                <span class="token comment" spellcheck="true">//    {</span>                <span class="token comment" spellcheck="true">//        logger.Error("Crawler的commodityRepository.SaveList(commodityList)出现异常", ex);</span>                <span class="token comment" spellcheck="true">//    }</span>                <span class="token comment" spellcheck="true">//}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"CrawlerMuti出现异常"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                warnRepository<span class="token punctuation">.</span><span class="token function">SaveWarn</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"出现异常,Name={0} Level={1} Url={2}"</span><span class="token punctuation">,</span> category<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> category<span class="token punctuation">.</span>CategoryLevel<span class="token punctuation">,</span> category<span class="token punctuation">.</span>Url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Commodity<span class="token operator">></span> <span class="token function">GetCommodityList</span><span class="token punctuation">(</span>Category category<span class="token punctuation">,</span> string url<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string html <span class="token operator">=</span> HttpHelper<span class="token punctuation">.</span><span class="token function">DownloadUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Commodity<span class="token operator">></span> commodityList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Commodity<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> commodityList<span class="token punctuation">;</span>                HtmlDocument doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                doc<span class="token punctuation">.</span><span class="token function">LoadHtml</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>                string liPath <span class="token operator">=</span> <span class="token string">"//*[@id='plist']/ul/li"</span><span class="token punctuation">;</span>                HtmlNodeCollection noneNodeList <span class="token operator">=</span> doc<span class="token punctuation">.</span>DocumentNode<span class="token punctuation">.</span><span class="token function">SelectNodes</span><span class="token punctuation">(</span>liPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>noneNodeList <span class="token operator">==</span> null <span class="token operator">||</span> noneNodeList<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    warnRepository<span class="token punctuation">.</span><span class="token function">SaveWarn</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"GetCommodityList商品数据为空,Name={0} Level={1} category.Url={2} url={3}"</span><span class="token punctuation">,</span> category<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> category<span class="token punctuation">.</span>CategoryLevel<span class="token punctuation">,</span> category<span class="token punctuation">.</span>Url<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> commodityList<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">foreach</span> <span class="token punctuation">(</span>var node in noneNodeList<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    HtmlDocument docChild <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    docChild<span class="token punctuation">.</span><span class="token function">LoadHtml</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>OuterHtml<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Commodity commodity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Commodity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        CategoryId <span class="token operator">=</span> category<span class="token punctuation">.</span>Id                    <span class="token punctuation">}</span><span class="token punctuation">;</span>                    string urlPath <span class="token operator">=</span> <span class="token string">"//*[@class='p-name']/a"</span><span class="token punctuation">;</span>                    HtmlNode urlNode <span class="token operator">=</span> docChild<span class="token punctuation">.</span>DocumentNode<span class="token punctuation">.</span><span class="token function">SelectSingleNode</span><span class="token punctuation">(</span>urlPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>urlNode <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    commodity<span class="token punctuation">.</span>Url <span class="token operator">=</span> urlNode<span class="token punctuation">.</span>Attributes<span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>commodity<span class="token punctuation">.</span>Url<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">"http:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        commodity<span class="token punctuation">.</span>Url <span class="token operator">=</span> <span class="token string">"http:"</span> <span class="token operator">+</span> commodity<span class="token punctuation">.</span>Url<span class="token punctuation">;</span>                    string sId <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>commodity<span class="token punctuation">.</span>Url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">".html"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    commodity<span class="token punctuation">.</span>ProductId <span class="token operator">=</span> <span class="token keyword">long</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>sId<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//*[@id="plist"]/ul/li[1]/div/div[3]/a/em</span>                    string titlePath <span class="token operator">=</span> <span class="token string">"//*[@class='p-name']/a/em"</span><span class="token punctuation">;</span>                    HtmlNode titleNode <span class="token operator">=</span> docChild<span class="token punctuation">.</span>DocumentNode<span class="token punctuation">.</span><span class="token function">SelectSingleNode</span><span class="token punctuation">(</span>titlePath<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>titleNode <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//Log.Error(titlePath);</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    commodity<span class="token punctuation">.</span>Title <span class="token operator">=</span> titleNode<span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>                    string iamgePath <span class="token operator">=</span> <span class="token string">"//*[@class='p-img']/a/img"</span><span class="token punctuation">;</span>                    HtmlNode imageNode <span class="token operator">=</span> docChild<span class="token punctuation">.</span>DocumentNode<span class="token punctuation">.</span><span class="token function">SelectSingleNode</span><span class="token punctuation">(</span>iamgePath<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>imageNode <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//前后不一</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>imageNode<span class="token punctuation">.</span>Attributes<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        commodity<span class="token punctuation">.</span>ImageUrl <span class="token operator">=</span> imageNode<span class="token punctuation">.</span>Attributes<span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>imageNode<span class="token punctuation">.</span>Attributes<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"original"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        commodity<span class="token punctuation">.</span>ImageUrl <span class="token operator">=</span> imageNode<span class="token punctuation">.</span>Attributes<span class="token punctuation">[</span><span class="token string">"original"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>imageNode<span class="token punctuation">.</span>Attributes<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">"data-lazy-img"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        commodity<span class="token punctuation">.</span>ImageUrl <span class="token operator">=</span> imageNode<span class="token punctuation">.</span>Attributes<span class="token punctuation">[</span><span class="token string">"data-lazy-img"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>commodity<span class="token punctuation">.</span>ImageUrl<span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span><span class="token string">"http:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        commodity<span class="token punctuation">.</span>ImageUrl <span class="token operator">=</span> <span class="token string">"http:"</span> <span class="token operator">+</span> commodity<span class="token punctuation">.</span>ImageUrl<span class="token punctuation">;</span>                    string pricePath <span class="token operator">=</span> <span class="token string">"//*[@class='p-price']/strong/i"</span><span class="token punctuation">;</span>                    HtmlNode priceNode <span class="token operator">=</span> docChild<span class="token punctuation">.</span>DocumentNode<span class="token punctuation">.</span><span class="token function">SelectSingleNode</span><span class="token punctuation">(</span>pricePath<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>priceNode <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                    commodityList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>commodity<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0}一共获取了{1}条数据"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> commodityList<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"GetCommodityList出现异常,url={0}"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">GetCommodityPrice</span><span class="token punctuation">(</span>category<span class="token punctuation">,</span> commodityList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 获取商品价格</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="commodityList">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Commodity<span class="token operator">></span> <span class="token function">GetCommodityPrice</span><span class="token punctuation">(</span>Category category<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Commodity<span class="token operator">></span> commodityList<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>commodityList <span class="token operator">==</span> null <span class="token operator">||</span> commodityList<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> commodityList<span class="token punctuation">;</span>                StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//sb.Append(@"http://p.3.cn/prices/mgets?my=list_price&amp;type=1&amp;area=1_72_4137&amp;skuIds=");</span>                <span class="token comment" spellcheck="true">//sb.Append(string.Join("%2C", commodityList.Select(c => string.Format("J_{0}", c.ProductId))));</span>                <span class="token comment" spellcheck="true">//</span>                sb<span class="token punctuation">.</span><span class="token function">AppendFormat</span><span class="token punctuation">(</span><span class="token string">"http://p.3.cn/prices/mgets?callback=jQuery1069298&amp;type=1&amp;area=1_72_4137_0&amp;skuIds={0}&amp;pdbp=0&amp;pdtk=&amp;pdpin=&amp;pduid=1945966343&amp;_=1469022843655"</span><span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">"%2C"</span><span class="token punctuation">,</span> commodityList<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"J_{0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>ProductId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                string html <span class="token operator">=</span> HttpHelper<span class="token punctuation">.</span><span class="token function">DownloadUrl</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"获取url={0}时获取的html为空"</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                html <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                html <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> html<span class="token punctuation">.</span><span class="token function">LastIndexOf</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                List<span class="token operator">&lt;</span>CommodityPrice<span class="token operator">></span> priceList <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span>DeserializeObject<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>CommodityPrice<span class="token operator">>></span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>                commodityList<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Price <span class="token operator">=</span> priceList<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> p<span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"J_{0}"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>ProductId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//commodityList.ForEach(c => Console.WriteLine(" Title={0}  ImageUrl={1} Url={2} Price={3} Id={4}", c.Title, c.ImageUrl, c.Url, c.Price, c.Id));</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"GetCommodityPrice出现异常"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> commodityList<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://gitee.com/taffy88/Ruanmou.Crawler" target="_blank" rel="noopener">完整项目地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;爬虫简介&quot;&gt;&lt;a href=&quot;#爬虫简介&quot; class=&quot;headerlink&quot; title=&quot;爬虫简介&quot;&gt;&lt;/a&gt;爬虫简介&lt;/h2&gt;&lt;p&gt;网络爬虫(又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者)，是一种按照一定的规则，自动的抓取万维网
      
    
    </summary>
    
      <category term="Web相关" scheme="https://taffyblog.github.io/categories/Web%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>使用远程Git仓库</title>
    <link href="https://taffyblog.github.io/2017/09/28/remotegit/"/>
    <id>https://taffyblog.github.io/2017/09/28/remotegit/</id>
    <published>2017-09-28T12:16:13.000Z</published>
    <updated>2022-03-08T07:51:05.935Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="noopener">学习自廖雪峰的Git教程</a></p><h2 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h2><p>由于<code>githbub</code>创建私有库是收费的,所以我使用了<a href="https://gitee.com" target="_blank" rel="noopener">码云</a>来创建私有库。</p><p>在<a href="https://gitee.com" target="_blank" rel="noopener">码云</a>创建好仓库后将要进行以下操作:</p><ol><li>创建ssh-key:</li></ol><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"youremail@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>替换为自己的邮箱即可，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p><p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><ol start="2"><li>在码云添加key</li></ol><p>登录码云，在右上角头像的地方点击设置，选择<code>SSH公钥</code>,填上任意标题，在公钥文本框里粘贴id_rsa.pub文件的内容，添加ssh key。</p><h2 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h2><p>执行如下命令:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> remote add origin git@gitee.com:用户名/仓库名.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，假如有两个远程库，比如既想推送到码云，又想推送到<code>github</code>就可以用不同的名称区分。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。</p><blockquote><p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p></blockquote><h2 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h2><p>假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p><p>创建好远程仓库后，使用如下命令克隆:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> clone git@gitee.com:用户名/仓库名.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da8
      
    
    </summary>
    
      <category term="Git笔记" scheme="https://taffyblog.github.io/categories/Git%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Git使用过程中遇到的问题</title>
    <link href="https://taffyblog.github.io/2017/09/26/GitErrors/"/>
    <id>https://taffyblog.github.io/2017/09/26/GitErrors/</id>
    <published>2017-09-26T13:10:16.000Z</published>
    <updated>2022-03-08T07:51:05.894Z</updated>
    
    <content type="html"><![CDATA[<ol><li>提示 Please tell me who you are.</li></ol><p>需要识别用户名和邮箱，必要时可在<code>config</code>后面加上<code>--global</code>设置全局</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config user.name <span class="token string">"someone"</span><span class="token function">git</span> config user.email <span class="token string">"someone@someplace.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>HttpRequestException encountered解决方法</li></ol><p>网上查了一下发现是Github 禁用了TLS v1.0 and v1.1，必须更新Windows的git凭证管理器，才行。<br><a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/" target="_blank" rel="noopener">https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;提示 Please tell me who you are.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要识别用户名和邮箱，必要时可在&lt;code&gt;config&lt;/code&gt;后面加上&lt;code&gt;--global&lt;/code&gt;设置全局&lt;/p&gt;
&lt;pre class=&quot;line-
      
    
    </summary>
    
      <category term="Git笔记" scheme="https://taffyblog.github.io/categories/Git%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>创建本地版本库及新增、修改、提交和回退</title>
    <link href="https://taffyblog.github.io/2017/09/26/locationgit/"/>
    <id>https://taffyblog.github.io/2017/09/26/locationgit/</id>
    <published>2017-09-26T13:10:16.000Z</published>
    <updated>2022-03-08T07:51:05.916Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="noopener">学习自廖雪峰的Git教程</a></p><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><ol><li><p>创建目录</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> mygit$ <span class="token function">cd</span> mygit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>初始化git仓库</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="添加文件到版本库"><a href="#添加文件到版本库" class="headerlink" title="添加文件到版本库"></a>添加文件到版本库</h2><ol><li><p>新建一个文本文件<code>readme.txt</code>并写入内容:</p><pre class="line-numbers language-bash"><code class="language-bash">新建ReadMe文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行命令添加到暂存区:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> add readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>提交文件到本地仓库:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> commit -m <span class="token string">"学习git"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><code>git commit</code>命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><h2 id="版本回退与前进"><a href="#版本回退与前进" class="headerlink" title="版本回退与前进"></a>版本回退与前进</h2><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p>将<code>readme.txt</code>文件内容修改为:</p><pre class="line-numbers language-bash"><code class="language-bash">第一次修改ReadMe文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令添加到暂存区:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> add readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h3><p>执行<code>git status</code>查看仓库状态:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> status<span class="token comment" spellcheck="true"># On branch master</span><span class="token comment" spellcheck="true"># Changes not staged for commit:</span><span class="token comment" spellcheck="true">#   (use "git add &lt;file>..." to update what will be committed)</span><span class="token comment" spellcheck="true">#   (use "git checkout -- &lt;file>..." to discard changes in working directory)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#    modified:   readme.txt</span><span class="token comment" spellcheck="true">#</span>no changes added to commit <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and/or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面显示的结果表示<code>readme.txt</code>被修改,已经添加到暂存区但还未提交.</p><h3 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h3><p>执行命令：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">diff</span> readme.txt<span class="token function">diff</span> --git a/readme.txt b/readme.txtindex 46d49bf<span class="token punctuation">..</span>9247db6 100644--- a/readme.txt+++ b/readme.txt@@ -1,2 +1,2 @@-新建ReadMe文件+第一次修改ReadMe文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提交修改内容：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> commit -m <span class="token string">"提交第一次修改"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>再修改一次<code>readme.txt</code>文件内容为:</p><pre class="line-numbers language-bash"><code class="language-bash">第二次修改了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接提交:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> add readme.txt$ <span class="token function">git</span> commit -m <span class="token string">"提交第二次修改"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看版本历史记录"><a href="#查看版本历史记录" class="headerlink" title="查看版本历史记录"></a>查看版本历史记录</h4><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> logcommit 20854f06f31ab068ff622d84105af477c7d4b05fAuthor: TaffyBlog <span class="token operator">&lt;</span>738840255@qq.com<span class="token operator">></span>Date:   Tue Sep 26 21:39:38 2017 +0800    提交第二次修改commit a85095bb608839338c5dc4e38d849ad5e27aabeeAuthor: TaffyBlog <span class="token operator">&lt;</span>738840255@qq.com<span class="token operator">></span>Date:   Tue Sep 26 21:28:25 2017 +0800    提交第一次修改commit da836ac4bd5085f7559aa41298cef47c6108f1c1Author: TaffyBlog <span class="token operator">&lt;</span>738840255@qq.com<span class="token operator">></span>Date:   Tue Sep 26 21:27:44 2017 +0800    学习git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>git log命令显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是“提交第二次修改”，上一次是“提交第一次修改”，最早的一次是“学习git”。</p></blockquote><p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上–pretty=oneline参数：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> log --pretty<span class="token operator">=</span>oneline20854f06f31ab068ff622d84105af477c7d4b05f 提交第二次修改a85095bb608839338c5dc4e38d849ad5e27aabee 提交第一次修改da836ac4bd5085f7559aa41298cef47c6108f1c1 学习git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要友情提示的是，你看到的一大串类似20854f…..d4b05f的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p></blockquote><p>提交后，用<code>git diff HEAD -- readme.txt</code>命令可以查看工作区和版本库里面最新版本的区别</p><h4 id="回退到上一个版本"><a href="#回退到上一个版本" class="headerlink" title="回退到上一个版本"></a>回退到上一个版本</h4><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> reset --hard HEAD^HEAD is now at a85095b 提交第一次修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交20854f0…..7d4b05f，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p></blockquote><h4 id="版本前进"><a href="#版本前进" class="headerlink" title="版本前进"></a>版本前进</h4><ol><li>查看commitid</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> refloga85095b HEAD@<span class="token punctuation">{</span>0<span class="token punctuation">}</span>: reset: moving to HEAD^20854f0 HEAD@<span class="token punctuation">{</span>1<span class="token punctuation">}</span>: commit: 提交第二次修改a85095b HEAD@<span class="token punctuation">{</span>2<span class="token punctuation">}</span>: commit: 提交第一次修改da836ac HEAD@<span class="token punctuation">{</span>3<span class="token punctuation">}</span>: commit: 学习git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>可以看到最后一次修改的commitid是<code>20854f0</code>,那么就可以将当前版本指向此版本了:<pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> reset --hard 20854f0HEAD is now at 20854f0 提交第二次修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>这样，被回退的版本就又回来了。</li></ol><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><h3 id="未添加到暂存区"><a href="#未添加到暂存区" class="headerlink" title="未添加到暂存区"></a>未添加到暂存区</h3><ol><li><p>将<code>readme.txt</code>文件内容修改为:</p><pre class="line-numbers language-bash"><code class="language-bash">第二次修改了呵呵呵<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行命令撤销工作区的修改:</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> checkout -- readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>再查看<code>readme.txt</code>文件内容:<pre class="line-numbers language-bash"><code class="language-bash">第二次修改了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><blockquote><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p></blockquote><blockquote><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p></blockquote><blockquote><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p></blockquote><blockquote><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p></blockquote><h3 id="已添加到暂存区未提交"><a href="#已添加到暂存区未提交" class="headerlink" title="已添加到暂存区未提交"></a>已添加到暂存区未提交</h3><p>执行命令：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> reset HEAD readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p><h3 id="已提交"><a href="#已提交" class="headerlink" title="已提交"></a>已提交</h3><p>使用前面的版本回退</p><h2 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h2><p>删除<code>readme.txt</code>文件：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">rm</span> readme.txt$ <span class="token function">git</span> add readme.txt$ <span class="token function">git</span> commit -m <span class="token string">"删除readme"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在只是删除还未提交，如果是误删，则使用<code>git checkout -- readme.txt</code>命令将版本库的文件放回来,如果已提交则使用版本回退。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da8
      
    
    </summary>
    
      <category term="Git笔记" scheme="https://taffyblog.github.io/categories/Git%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>关于WebAPI的创建、调用、权限验证和跨域问题</title>
    <link href="https://taffyblog.github.io/2017/09/20/webapi/"/>
    <id>https://taffyblog.github.io/2017/09/20/webapi/</id>
    <published>2017-09-20T08:16:13.000Z</published>
    <updated>2022-03-08T07:51:05.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><p>WebApi的路由配置位于项目文件夹App_Start下的WebApiConfig文件中,以下是默认的配置:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebApiConfig</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Register</span><span class="token punctuation">(</span>HttpConfiguration config<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Web API 配置和服务</span>        <span class="token comment" spellcheck="true">// Web API 路由</span>        config<span class="token punctuation">.</span><span class="token function">MapHttpAttributeRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span>Routes<span class="token punctuation">.</span><span class="token function">MapHttpRoute</span><span class="token punctuation">(</span>            name<span class="token operator">:</span> <span class="token string">"DefaultApi"</span><span class="token punctuation">,</span>            routeTemplate<span class="token operator">:</span> <span class="token string">"api/{controller}/{id}"</span><span class="token punctuation">,</span>            defaults<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> id <span class="token operator">=</span> RouteParameter<span class="token punctuation">.</span>Optional <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，WebApi默认的路由配置和MVC默认的路由配置有所不同，没有了<code>{action}</code>配置节点，这是因为WebApi默认遵循Restfull风格，例如默认的<code>ValuesController</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValuesController</span> <span class="token operator">:</span> ApiController<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// GET api/values</span>    <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"value1"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// GET api/values/5</span>    <span class="token keyword">public</span> string <span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"value"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// POST api/values</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromBody<span class="token punctuation">]</span>string value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// PUT api/values/5</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Put</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token punctuation">[</span>FromBody<span class="token punctuation">]</span>string value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// DELETE api/values/5</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此控制器有:<code>Get</code>、<code>Post</code>、<code>Put</code>、<code>Delete</code>方法，也正好对应了Http请求的这四种谓词，以及数据的查询、修改、新增、删除。因此在默认配置中也就将其省略了，不过我们也可以按照自己的习惯修改配置。</p><h2 id="JS调用WebApi"><a href="#JS调用WebApi" class="headerlink" title="JS调用WebApi"></a>JS调用WebApi</h2><h3 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h3><h4 id="普通方法调用"><a href="#普通方法调用" class="headerlink" title="普通方法调用"></a>普通方法调用</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> string <span class="token function">Get</span><span class="token punctuation">(</span>string userName<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"返回结果:"</span><span class="token operator">+</span>userName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>前台代码:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"btnGet1"</span>  type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"button"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btnGet1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span> <span class="token string">"/api/mywebapi/"</span><span class="token punctuation">,</span>                type<span class="token punctuation">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"userName"</span><span class="token punctuation">:</span> <span class="token string">"这是名字"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                dataType<span class="token punctuation">:</span> <span class="token string">"json"</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果:</p><pre class="line-numbers language-bash"><code class="language-bash">jscommon.js:1 Synchronous XMLHttpRequest on the main thread is deprecated because of its detrimental effects to the end user's experience. For <span class="token function">more</span> help, check https://xhr.spec.whatwg.org/.send @ jscommon.js:1ajax @ jscommon.js:1<span class="token punctuation">(</span>anonymous<span class="token punctuation">)</span> @ content.js:10返回结果:这是名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="传递对象调用"><a href="#传递对象调用" class="headerlink" title="传递对象调用"></a>传递对象调用</h4><p>后台代码:</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> string <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromUri<span class="token punctuation">]</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"返回结果:"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>UserId<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>user<span class="token punctuation">.</span>UserName<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>user<span class="token punctuation">.</span>Age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>js:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> UserName<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> UserId<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>Age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btnGet1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span> <span class="token string">"/api/mywebapi/"</span><span class="token punctuation">,</span>                type<span class="token punctuation">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span> user <span class="token punctuation">}</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                dataType<span class="token punctuation">:</span> <span class="token string">"json"</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果:</p><pre class="line-numbers language-bash"><code class="language-bash">Synchronous XMLHttpRequest on the main thread is deprecated because of its detrimental effects to the end user's experience. For <span class="token function">more</span> help, check https://xhr.spec.whatwg.org/.send @ jscommon.js:1ajax @ jscommon.js:1<span class="token punctuation">(</span>anonymous<span class="token punctuation">)</span> @ content.js:10返回结果:1张三18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>后台除了用<code>FromUri</code>，也可以用<code>Request.QueryString</code>接收。</p></blockquote><h3 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h3><p>后台方法:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span><span class="token keyword">public</span> string <span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromBody<span class="token punctuation">]</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"传入的Id值为:"</span><span class="token operator">+</span>id<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前台调用:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"~/Scripts/jquery-1.10.2.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btnGet1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span> <span class="token string">"/api/mywebapi/"</span><span class="token punctuation">,</span>                type<span class="token punctuation">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">""</span><span class="token punctuation">:</span><span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                dataType<span class="token punctuation">:</span> <span class="token string">"json"</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"btnGet1"</span>  type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"调用"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>对于Get请求，要么方法名以Get开头，要么给方法加上<code>HttpGet</code>特性，否则方法不会被识别为Get请求方法。</li><li>对于Post请求，如果只有一个参数传入，那么在构造传入参数时不能设置Key（示例在上面）,在后台接收时也必须加上<code>FromBody</code>才能自动匹配接收，否则就只能通过<code>Request.Form</code>来接收。</li></ol><h2 id="权限验证"><a href="#权限验证" class="headerlink" title="权限验证"></a>权限验证</h2><h3 id="basic认证步骤"><a href="#basic认证步骤" class="headerlink" title="basic认证步骤"></a>basic认证步骤</h3><h4 id="定义一个特性继承自AuthorizeAttribute-并覆写两个方法"><a href="#定义一个特性继承自AuthorizeAttribute-并覆写两个方法" class="headerlink" title="定义一个特性继承自AuthorizeAttribute,并覆写两个方法"></a>定义一个特性继承自<code>AuthorizeAttribute</code>,并覆写两个方法</h4><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAuthorizeAttribute</span><span class="token operator">:</span>AuthorizeAttribute<span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 摘要:</span>    <span class="token comment" spellcheck="true">//     为操作授权时调用。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 参数:</span>    <span class="token comment" spellcheck="true">//   actionContext:</span>    <span class="token comment" spellcheck="true">//     上下文。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 异常:</span>    <span class="token comment" spellcheck="true">//   T:System.ArgumentNullException:</span>    <span class="token comment" spellcheck="true">//     上下文参数为 null。</span>    <span class="token keyword">public</span> override <span class="token keyword">void</span> <span class="token function">OnAuthorization</span><span class="token punctuation">(</span>HttpActionContext actionContext<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        var authorization <span class="token operator">=</span> actionContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>Authorization<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>actionContext<span class="token punctuation">.</span>ActionDescriptor<span class="token punctuation">.</span>GetCustomAttributes<span class="token operator">&lt;</span>AllowAnonymousAttribute<span class="token operator">></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Count <span class="token operator">!=</span> <span class="token number">0</span>            <span class="token operator">||</span> actionContext<span class="token punctuation">.</span>ActionDescriptor<span class="token punctuation">.</span>ControllerDescriptor<span class="token punctuation">.</span>GetCustomAttributes<span class="token operator">&lt;</span>AllowAnonymousAttribute<span class="token operator">></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            base<span class="token punctuation">.</span><span class="token function">OnAuthorization</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>authorization <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> authorization<span class="token punctuation">.</span>Parameter <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//用户验证逻辑</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ValidateTicket</span><span class="token punctuation">(</span>authorization<span class="token punctuation">.</span>Parameter<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                base<span class="token punctuation">.</span><span class="token function">IsAuthorized</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">HandleUnauthorizedRequest</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">HandleUnauthorizedRequest</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 摘要:</span>    <span class="token comment" spellcheck="true">//     处理授权失败的请求。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 参数:</span>    <span class="token comment" spellcheck="true">//   actionContext:</span>    <span class="token comment" spellcheck="true">//     上下文。</span>    <span class="token keyword">protected</span> override <span class="token keyword">void</span> <span class="token function">HandleUnauthorizedRequest</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>Controllers<span class="token punctuation">.</span>HttpActionContext actionContext<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        var challengeMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>HttpResponseMessage</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>HttpStatusCode<span class="token punctuation">.</span>Unauthorized<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//告诉浏览器要验证</span>        challengeMessage<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"WWW-Authenticate"</span><span class="token punctuation">,</span> <span class="token string">"Basic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//权限信息放在basic</span>        <span class="token comment" spellcheck="true">//throw new System.Web.Http.HttpResponseException(challengeMessage);</span>        base<span class="token punctuation">.</span><span class="token function">HandleUnauthorizedRequest</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回没有授权</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> bool <span class="token function">ValidateTicket</span><span class="token punctuation">(</span>string encryptTicket<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//解密Ticket</span>        var strTicket <span class="token operator">=</span> FormsAuthentication<span class="token punctuation">.</span><span class="token function">Decrypt</span><span class="token punctuation">(</span>encryptTicket<span class="token punctuation">)</span><span class="token punctuation">.</span>UserData<span class="token punctuation">;</span>        <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>strTicket<span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"{0}&amp;{1}"</span><span class="token punctuation">,</span> <span class="token string">"Admin"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//应该分拆后去数据库验证</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在需要权限验证的类或者方法上加上此特性"><a href="#在需要权限验证的类或者方法上加上此特性" class="headerlink" title="在需要权限验证的类或者方法上加上此特性"></a>在需要权限验证的类或者方法上加上此特性</h4><p>每次调用此类的方法时就会进入<code>MyAuthorizeAttribute</code>的<code>OnAuthorization</code>方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>MyAuthorize<span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebApiController</span> <span class="token operator">:</span> ApiController    <span class="token punctuation">{</span>        <span class="token keyword">public</span> string <span class="token function">Get</span><span class="token punctuation">(</span>string userName<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"返回结果:"</span><span class="token operator">+</span>userName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> string <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromUri<span class="token punctuation">]</span>User user<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"返回结果:"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>UserId<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>user<span class="token punctuation">.</span>UserName<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>user<span class="token punctuation">.</span>Age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span>        <span class="token keyword">public</span> string <span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">[</span>FromBody<span class="token punctuation">]</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"传入的Id值为:"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义用户登录方法"><a href="#定义用户登录方法" class="headerlink" title="定义用户登录方法"></a>定义用户登录方法</h4><pre class="line-numbers language-java"><code class="language-java"> #region 用户登陆<span class="token punctuation">[</span>AllowAnonymous<span class="token punctuation">]</span><span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span><span class="token keyword">public</span> string <span class="token function">Login</span><span class="token punctuation">(</span>string account<span class="token punctuation">,</span> string password<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"Admin"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        FormsAuthenticationTicket ticketObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormsAuthenticationTicket</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> account<span class="token punctuation">,</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>                    DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"{0}&amp;{1}"</span><span class="token punctuation">,</span> account<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">,</span>                    FormsAuthentication<span class="token punctuation">.</span>FormsCookiePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        var result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> Ticket <span class="token operator">=</span> FormsAuthentication<span class="token punctuation">.</span><span class="token function">Encrypt</span><span class="token punctuation">(</span>ticketObject<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        var result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> Result <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>#endregion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对于不需要权限验证的方法加上-AllowAnonymous-特性。"><a href="#对于不需要权限验证的方法加上-AllowAnonymous-特性。" class="headerlink" title="对于不需要权限验证的方法加上[AllowAnonymous]特性。"></a>对于不需要权限验证的方法加上<code>[AllowAnonymous]</code>特性。</h4><h4 id="测试调用"><a href="#测试调用" class="headerlink" title="测试调用"></a>测试调用</h4><h5 id="不登陆直接调用方法"><a href="#不登陆直接调用方法" class="headerlink" title="不登陆直接调用方法"></a>不登陆直接调用方法</h5><p>结果如下:</p><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/falt.jpg" alt="image"></p><h5 id="登录后调用"><a href="#登录后调用" class="headerlink" title="登录后调用"></a>登录后调用</h5><p>前台登录代码:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> ticket <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btnLogin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span> <span class="token string">"/api/mywebapi/Login"</span><span class="token punctuation">,</span>                type<span class="token punctuation">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"Account"</span><span class="token punctuation">:</span> <span class="token string">"Admin"</span><span class="token punctuation">,</span> <span class="token string">"Password"</span><span class="token punctuation">:</span> <span class="token string">"123456"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> result <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>Result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        ticket <span class="token operator">=</span> result<span class="token punctuation">.</span>Ticket<span class="token punctuation">;</span>                        <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                dataType<span class="token punctuation">:</span> <span class="token string">"json"</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btnGet1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span> <span class="token string">"/api/mywebapi/"</span><span class="token punctuation">,</span>                type<span class="token punctuation">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">""</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                beforeSend<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>XHR<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//注意BasicAuth后面有空格，在后台被拆分为AuthorizationHeaderValue的两个属性</span>                    XHR<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">,</span> <span class="token string">"BasicAuth "</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                dataType<span class="token punctuation">:</span> <span class="token string">"json"</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"btnLogin"</span> type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"登录"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"btnGet1"</span>  type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"调用"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>登录的效果：</p><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/apilogin.jpg" alt="image"></p><p>登录后调用的效果:</p><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/apiok.jpg" alt="image"></p><h2 id="配置跨域访问"><a href="#配置跨域访问" class="headerlink" title="配置跨域访问"></a>配置跨域访问</h2><h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><p>前台只需加上一个标识即可:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//允许跨域</span>jQuery<span class="token punctuation">.</span>support<span class="token punctuation">.</span>cors <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h3><p>在配置WebApi路由的地方加上如下配置:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//表示允许所有的跨域访问</span> config<span class="token punctuation">.</span><span class="token function">EnableCors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EnableCorsAttribute</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要引用命名空间：<code>System.Web.Http.Cors</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;路由配置&quot;&gt;&lt;a href=&quot;#路由配置&quot; class=&quot;headerlink&quot; title=&quot;路由配置&quot;&gt;&lt;/a&gt;路由配置&lt;/h2&gt;&lt;p&gt;WebApi的路由配置位于项目文件夹App_Start下的WebApiConfig文件中,以下是默认的配置:&lt;/p&gt;
&lt;pr
      
    
    </summary>
    
      <category term="Web相关" scheme="https://taffyblog.github.io/categories/Web%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>HTTP协议与WebSocket</title>
    <link href="https://taffyblog.github.io/2017/09/17/httpAndWebSocket/"/>
    <id>https://taffyblog.github.io/2017/09/17/httpAndWebSocket/</id>
    <published>2017-09-17T02:16:13.000Z</published>
    <updated>2022-03-08T07:51:05.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP协议简介"><a href="#HTTP协议简介" class="headerlink" title="HTTP协议简介"></a>HTTP协议简介</h2><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p><p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p><p>HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。</p><p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p><p>HTTP协议是无状态协议。</p><h2 id="HTTP消息结构"><a href="#HTTP消息结构" class="headerlink" title="HTTP消息结构"></a>HTTP消息结构</h2><h3 id="请求消息结构"><a href="#请求消息结构" class="headerlink" title="请求消息结构"></a>请求消息结构</h3><ol><li>第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.</li><li>第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息,从第二行起为请求头部,HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的3. 浏览器来定义,并且在每个请求中自动发送等等</li><li>第三部分：空行，请求头部后面的空行是必须的,即使第四部分的请求数据为空，也必须有空行。</li><li>第四部分：请求数据也叫主体，可以添加任意的其他数据。</li></ol><p>结构图如下:</p><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/2012072810301161.png" alt="image"></p><p>示例如下:</p><pre class="line-numbers language-bash"><code class="language-bash">GET /hello.txt HTTP/1.1User-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3Host: www.example.comAccept-Language: en, mi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>此示例中无数据部分</p></blockquote><h3 id="响应消息结构"><a href="#响应消息结构" class="headerlink" title="响应消息结构"></a>响应消息结构</h3><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</p><ol><li><p>第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成，第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）</p></li><li><p>第二部分：消息报头，用来说明客户端要使用的一些附加信息</p></li><li><p>第二行和第三行为消息报头，Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8</p></li><li><p>第三部分：空行，消息报头后面的空行是必须的</p></li><li><p>第四部分：响应正文，服务器返回给客户端的文本信息，空行后面的部分为响应正文。</p></li></ol><p>结构图如下:</p><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/httpmessage.jpg" alt="image"></p><p>示例如下:</p><pre class="line-numbers language-bash"><code class="language-bash">HTTP/1.1 200 OKDate: Mon, 27 Jul 2009 12:28:53 GMTServer: ApacheLast-Modified: Wed, 22 Jul 2009 19:15:56 GMTETag: <span class="token string">"34aa387-d-1568eb00"</span>Accept-Ranges: bytesContent-Length: 51Vary: Accept-EncodingContent-Type: text/plain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash"><code class="language-bash">Hello World<span class="token operator">!</span> My payload includes a trailing CRLF.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Http协议特点"><a href="#Http协议特点" class="headerlink" title="Http协议特点"></a>Http协议特点</h2><ol><li>支持客户/服务器模式。</li><li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li><li>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li><li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li><li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快，不过也可以实现服务器集群，不同的服务器都可以以相同的逻辑处理相同的请求。</li></ol><h2 id="WebSocket协议"><a href="#WebSocket协议" class="headerlink" title="WebSocket协议"></a>WebSocket协议</h2><p>有时候需要服务器与浏览器实现双工通信；即除了浏览器主动向服务器请求之外，服务器也需要主动向客户端发送消息，而http协议是无连接、无状态的，在一次请求结束后服务器和客户端就会断开连接，因此，通过http协议通常是用ajax轮询以及LongPool，过一段时间又向服务器询问是否需要改变界面数据。  这种方式比较消耗服务器资源。</p><blockquote><p>使用WebSocket浏览器必须支持Html5,服务器必须是IIS8以上。</p></blockquote><h3 id="用WebSocket实现的简单聊天室"><a href="#用WebSocket实现的简单聊天室" class="headerlink" title="用WebSocket实现的简单聊天室"></a>用WebSocket实现的简单聊天室</h3><p>前台代码如下:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"jumbotron"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"txt_Ip"</span> type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>    <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"btnConnect"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-primary btn-lg"</span> type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"连接"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"btnClose"</span> type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"关闭"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"tips"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"txt_Message"</span> type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>    <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"btnSend"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-primary btn-lg"</span> type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"发送"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"view"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"ws://localhost:63151/MyWebSocketHandler.ashx"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ws<span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">var</span> userName <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#txt_Ip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            url <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"?UserName="</span> <span class="token operator">+</span> userName<span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tips"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"正在连接..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//连接打开</span>            ws<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tips"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"已连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">//接收到消息</span>            ws<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>evt<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#view ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;li>"</span> <span class="token operator">+</span> evt<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">"&lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//发生异常</span>            ws<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>evt<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tips"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//关闭</span>            ws<span class="token punctuation">.</span>onclose <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tips"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btnSend"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ws<span class="token punctuation">.</span>readyState <span class="token operator">==</span> WebSocket<span class="token punctuation">.</span>OPEN<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#txt_Message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tips"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"已经关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btnClose"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btnConnect"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台一般处理程序代码如下:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebSocketHandler</span> <span class="token operator">:</span> IHttpHandler<span class="token punctuation">,</span> System<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>SessionState<span class="token punctuation">.</span>IRequiresSessionState<span class="token punctuation">{</span>    <span class="token keyword">private</span> string _UserName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ProcessRequest</span><span class="token punctuation">(</span>HttpContext context<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//是否是AspNetWebSocket请求</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>IsWebSocketRequest<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_UserName <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>QueryString<span class="token punctuation">[</span><span class="token string">"UserName"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//传入委托处理AspNetWebSocket请求</span>            context<span class="token punctuation">.</span><span class="token function">AcceptWebSocketRequest</span><span class="token punctuation">(</span>ProcessChat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Test  Handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> async Task <span class="token function">ProcessChat</span><span class="token punctuation">(</span>AspNetWebSocketContext context<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        WebSocket socket <span class="token operator">=</span> context<span class="token punctuation">.</span>WebSocket<span class="token punctuation">;</span>        CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CancellationToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ChatManager<span class="token punctuation">.</span><span class="token function">AddUser</span><span class="token punctuation">(</span>_UserName<span class="token punctuation">,</span> socket<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//某人登陆后，给群里其他人发  登陆消息</span>        await ChatManager<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">,</span> $<span class="token string">"{DateTime.Now.ToString("</span>yyyyMMdd<span class="token operator">-</span>HHmmss<span class="token operator">:</span>fff<span class="token string">")} {this._UserName} 进入聊天室"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>State <span class="token operator">==</span> WebSocketState<span class="token punctuation">.</span>Open<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ArraySegment<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token operator">></span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArraySegment</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            WebSocketReceiveResult result <span class="token operator">=</span> await socket<span class="token punctuation">.</span><span class="token function">ReceiveAsync</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>MessageType <span class="token operator">==</span> WebSocketMessageType<span class="token punctuation">.</span>Close<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果输入帧为取消帧，发送close命令</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//放在前面移除和发消息，  因为直接关浏览器会导致CloseAsync异常</span>                ChatManager<span class="token punctuation">.</span><span class="token function">RemoveUser</span><span class="token punctuation">(</span>_UserName<span class="token punctuation">)</span><span class="token punctuation">;</span>                await ChatManager<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">,</span> $<span class="token string">"{DateTime.Now.ToString("</span>yyyyMMdd<span class="token operator">-</span>HHmmss<span class="token operator">:</span>fff<span class="token string">")} {this._UserName} 离开聊天室"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                await socket<span class="token punctuation">.</span><span class="token function">CloseAsync</span><span class="token punctuation">(</span>WebSocketCloseStatus<span class="token punctuation">.</span>NormalClosure<span class="token punctuation">,</span> String<span class="token punctuation">.</span>Empty<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token comment" spellcheck="true">//获取字符串</span>            <span class="token punctuation">{</span>                string userMsg <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>Array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>                string content <span class="token operator">=</span> $<span class="token string">"{DateTime.Now.ToString("</span>yyyyMMdd<span class="token operator">-</span>HHmmss<span class="token operator">:</span>fff<span class="token string">")} {this._UserName} 发送了：{userMsg}"</span><span class="token punctuation">;</span>                await ChatManager<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>cancellationToken<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> bool IsReusable    <span class="token punctuation">{</span>        get        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatManager</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ConcurrentDictionary<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> WebSocket<span class="token operator">></span> _UserDictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentDictionary</span><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> WebSocket<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">AddUser</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> WebSocket socket<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _UserDictionary<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RemoveUser</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        WebSocket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//_UserDictionary.TryRemove(name, out WebSocket socket);</span>        _UserDictionary<span class="token punctuation">.</span><span class="token function">TryRemove</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> out socket<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> async Task <span class="token function">SendMessage</span><span class="token punctuation">(</span>CancellationToken cancellationToken<span class="token punctuation">,</span> string content<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ArraySegment<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token operator">></span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArraySegment</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArraySegment</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token operator">></span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">foreach</span> <span class="token punctuation">(</span>var socket in _UserDictionary<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>d <span class="token operator">=</span><span class="token operator">></span> d<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            await socket<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> WebSocketMessageType<span class="token punctuation">.</span>Text<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图:</p><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/chat1.png" alt="image"></p><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/chat2.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTTP协议简介&quot;&gt;&lt;a href=&quot;#HTTP协议简介&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议简介&quot;&gt;&lt;/a&gt;HTTP协议简介&lt;/h2&gt;&lt;p&gt;HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩
      
    
    </summary>
    
      <category term="C#高级编程" scheme="https://taffyblog.github.io/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>lambda表达式树解析并拼装Sql</title>
    <link href="https://taffyblog.github.io/2017/09/02/ExpressionVisitor/"/>
    <id>https://taffyblog.github.io/2017/09/02/ExpressionVisitor/</id>
    <published>2017-09-02T07:54:26.000Z</published>
    <updated>2022-03-08T07:51:05.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义解析器"><a href="#自定义解析器" class="headerlink" title="自定义解析器"></a>自定义解析器</h2><p>在ef中，我们可以使用lambda表达式进行数据库操作，但是最后到数据库执行的一定是sql语句，而表达式树解析正好可以满足这个需求。</p><p>示例如下:</p><p>解析器需要继承<code>ExpressionVisitor</code>,这是一个抽象类，定义了许多虚方法以供我们重写，本例中重写了<code>VisitBinary</code>、<code>VisitMember</code>、<code>VisitMethodCall</code>方法；每个表达式解析完成后自动解析下一个表达式，直到遍历解析完整个表达式树。</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionBuilderVisitor</span> <span class="token operator">:</span> ExpressionVisitor<span class="token punctuation">{</span>    <span class="token keyword">private</span> Stack<span class="token operator">&lt;</span>string<span class="token operator">></span> _StringStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> string <span class="token function">Condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string condition <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> condition<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 如果是二元表达式</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="node">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">protected</span> override Expression <span class="token function">VisitBinary</span><span class="token punctuation">(</span>BinaryExpression node<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"BinaryExpression"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        base<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解析右边</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>NodeType<span class="token punctuation">.</span><span class="token function">ToSqlOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        base<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解析左边</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 如果是属性或字段</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="node">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">protected</span> override Expression <span class="token function">VisitMember</span><span class="token punctuation">(</span>MemberExpression node<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"MemberExpression"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">" ["</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>Member<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">"] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 常量表达式</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="node">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">protected</span> override Expression <span class="token function">VisitConstant</span><span class="token punctuation">(</span>ConstantExpression node<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"ConstantExpression"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token string">" '"</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>Value <span class="token operator">+</span> <span class="token string">"' "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 方法表达式</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="m">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">protected</span> override Expression <span class="token function">VisitMethodCall</span><span class="token punctuation">(</span>MethodCallExpression m<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"MethodCallExpression"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string format<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"StartsWith"</span><span class="token operator">:</span>                format <span class="token operator">=</span> <span class="token string">"({0} LIKE {1}+'%')"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"Contains"</span><span class="token operator">:</span>                format <span class="token operator">=</span> <span class="token string">"({0} LIKE '%'+{1}+'%')"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"EndsWith"</span><span class="token operator">:</span>                format <span class="token operator">=</span> <span class="token string">"({0} LIKE '%'+{1})"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"Equals"</span><span class="token operator">:</span>                    format <span class="token operator">=</span> <span class="token string">"({0} =  '{1}')"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotSupportedException</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>NodeType <span class="token operator">+</span> <span class="token string">" is not supported!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>Arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_StringStack<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩展方法类:</p><pre class="line-numbers language-java"><code class="language-java"> internal <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SqlOperator</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 扩展方法 转换运算符</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="type">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    internal <span class="token keyword">static</span> string <span class="token function">ToSqlOperator</span><span class="token punctuation">(</span><span class="token keyword">this</span> ExpressionType type<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token punctuation">(</span>ExpressionType<span class="token punctuation">.</span>AndAlso<span class="token punctuation">)</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token punctuation">(</span>ExpressionType<span class="token punctuation">.</span>And<span class="token punctuation">)</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"AND"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token punctuation">(</span>ExpressionType<span class="token punctuation">.</span>OrElse<span class="token punctuation">)</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token punctuation">(</span>ExpressionType<span class="token punctuation">.</span>Or<span class="token punctuation">)</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"OR"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token punctuation">(</span>ExpressionType<span class="token punctuation">.</span>Not<span class="token punctuation">)</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"NOT"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token punctuation">(</span>ExpressionType<span class="token punctuation">.</span>NotEqual<span class="token punctuation">)</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"&lt;>"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> ExpressionType<span class="token punctuation">.</span>GreaterThan<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">">"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> ExpressionType<span class="token punctuation">.</span>GreaterThanOrEqual<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">">="</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> ExpressionType<span class="token punctuation">.</span>LessThan<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"&lt;"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> ExpressionType<span class="token punctuation">.</span>LessThanOrEqual<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"&lt;="</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token punctuation">(</span>ExpressionType<span class="token punctuation">.</span>Equal<span class="token punctuation">)</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"="</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"不支持该方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试一下:</p><pre class="line-numbers language-java"><code class="language-java">Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>StudentInfo<span class="token punctuation">,</span> bool<span class="token operator">>></span> stuExpression <span class="token operator">=</span> <span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> stu<span class="token punctuation">.</span>StuId <span class="token operator">></span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> stu<span class="token punctuation">.</span>Address<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ConditionBuilderVisitor myVisitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConditionBuilderVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myVisitor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span>stuExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>myVisitor<span class="token punctuation">.</span><span class="token function">Condition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">((</span> <span class="token punctuation">[</span>StuId<span class="token punctuation">]</span>  <span class="token operator">></span>  10 <span class="token punctuation">)</span> AND <span class="token punctuation">(</span> <span class="token punctuation">[</span>Address<span class="token punctuation">]</span>  <span class="token operator">=</span>  <span class="token string">' 北京 '</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自定义解析器&quot;&gt;&lt;a href=&quot;#自定义解析器&quot; class=&quot;headerlink&quot; title=&quot;自定义解析器&quot;&gt;&lt;/a&gt;自定义解析器&lt;/h2&gt;&lt;p&gt;在ef中，我们可以使用lambda表达式进行数据库操作，但是最后到数据库执行的一定是sql语句，而表达式树解
      
    
    </summary>
    
      <category term="C#高级编程" scheme="https://taffyblog.github.io/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>第一个.Net Core程序</title>
    <link href="https://taffyblog.github.io/2017/08/31/FirstCoreApp/"/>
    <id>https://taffyblog.github.io/2017/08/31/FirstCoreApp/</id>
    <published>2017-08-31T02:16:13.000Z</published>
    <updated>2022-03-08T07:51:05.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一个-Net-Core控制台应用程序"><a href="#第一个-Net-Core控制台应用程序" class="headerlink" title="第一个.Net Core控制台应用程序"></a>第一个.Net Core控制台应用程序</h2><ol><li>创建名为<code>myapp</code>的控制台应用程序</li></ol><pre class="line-numbers language-bash"><code class="language-bash">dotnet new console -o myapp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>启动应用程序</li></ol><pre class="line-numbers language-bash"><code class="language-bash">dotnet run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行结果如下:</p><pre class="line-numbers language-bash"><code class="language-bash">hello word<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="第一个ASP-NET-Core应用程序"><a href="#第一个ASP-NET-Core应用程序" class="headerlink" title="第一个ASP.NET Core应用程序"></a>第一个ASP.NET Core应用程序</h2><ol><li>创建名为<code>myapp</code>的控制台应用程序</li></ol><pre class="line-numbers language-bash"><code class="language-bash">dotnet new mvc -o myapp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>启动应用程序<pre class="line-numbers language-bash"><code class="language-bash">dotnet run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>输出如下:</p><pre class="line-numbers language-bash"><code class="language-bash">warn: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager<span class="token punctuation">[</span>35<span class="token punctuation">]</span>      No XML encryptor configured. Key <span class="token punctuation">{</span>78bfca8c-6031-4f57-acd4-9c7181ead0ee<span class="token punctuation">}</span> may be persisted to storage <span class="token keyword">in</span> unencrypted form.Hosting environment: ProductionContent root path: /home/ytf/myappNow listening on: http://localhost:5000Application started. Press Ctrl+C to shut down.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问<code>http://localhost:5000</code>即可进入此网站。</p><h2 id="使用Visual-Studio-Code调试-Net-Core程序"><a href="#使用Visual-Studio-Code调试-Net-Core程序" class="headerlink" title="使用Visual Studio Code调试.Net Core程序"></a>使用Visual Studio Code调试.Net Core程序</h2><ol><li><p>在联网状态下启动vscode,会自动安装<code>OmniSharp</code>和<code>.NET Core Debugger</code>。</p></li><li><p>打开调试面板，点击启动调试;会在项目中新建一个.vscode文件夹，以及<code>launch.json</code>、<code>tasks.json</code>两个配置文件。</p></li><li><p>配置<code>launch.json</code></p></li></ol><p>配置program节点:<code>&quot;program&quot;: &quot;${workspaceRoot}/bin/Debug/netcoreapp2.0/项目名.dll&quot;</code></p><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/launch.png" alt="image"></p><ol start="4"><li>配置<code>args</code>节点用于测试：<br><code>&quot;args&quot;: [&quot;哈哈哈哈&quot;]</code>，args节点是<code>Main</code>函数的参数。</li></ol><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/debuggercode.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一个-Net-Core控制台应用程序&quot;&gt;&lt;a href=&quot;#第一个-Net-Core控制台应用程序&quot; class=&quot;headerlink&quot; title=&quot;第一个.Net Core控制台应用程序&quot;&gt;&lt;/a&gt;第一个.Net Core控制台应用程序&lt;/h2&gt;&lt;ol&gt;

      
    
    </summary>
    
      <category term="DotNet Core" scheme="https://taffyblog.github.io/categories/DotNet-Core/"/>
    
    
  </entry>
  
  <entry>
    <title>lambda表达式树拼装</title>
    <link href="https://taffyblog.github.io/2017/08/31/Expression/"/>
    <id>https://taffyblog.github.io/2017/08/31/Expression/</id>
    <published>2017-08-31T01:54:26.000Z</published>
    <updated>2022-03-08T07:51:05.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lambda表达式树"><a href="#lambda表达式树" class="headerlink" title="lambda表达式树"></a>lambda表达式树</h2><p>C# Lambda表达式树允许我们像处理数据（比如读取，修改）一样来处理Lambda表达式。也就是说我们可以动态地拼装和解析lambda表达式了。</p><h2 id="拼装简单表达式树"><a href="#拼装简单表达式树" class="headerlink" title="拼装简单表达式树"></a>拼装简单表达式树</h2><p>先拼装一个简单的表达式树：</p><pre class="line-numbers language-java"><code class="language-java">Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> expression <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> m <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>按照运算符的优先级，此表达式计算的顺序应该是先m<em>n，然后是m</em>n的结果加2。在表达式树中，每一个二元运算符产生的结果是一个二元表达式(BinaryExpression),每一个参数都是参数表达式（ParameterExpression），常量是常量表达式(ConstantExpression)。</p><p>示意图如下:</p><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/exp.png" alt="image"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//参数</span>ParameterExpression parameterM <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ParameterExpression parameterN <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//m*n</span>BinaryExpression binaryExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Multiply</span><span class="token punctuation">(</span>parameterM<span class="token punctuation">,</span> parameterN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//常量表达式 2</span>ConstantExpression constantExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//m*n + 2</span>BinaryExpression binary<span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>binaryExpression<span class="token punctuation">,</span> constantExpression<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按照得到的表达式树创建lambda表达式</span>var lambda <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Lambda<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">(</span>binary<span class="token punctuation">,</span> parameterM<span class="token punctuation">,</span> parameterN<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到的<code>lambda</code>结果为:<code>(m, n) =&gt; ((m * n) + 2)</code>。</p><p>对<code>lambda</code>调用<code>Compile</code>方法即可获取此表达式树对应的委托，调用<code>Invoke</code>方法即可执行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> result <span class="token operator">=</span>  lambda<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="带属性、方法的表达式拼装"><a href="#带属性、方法的表达式拼装" class="headerlink" title="带属性、方法的表达式拼装"></a>带属性、方法的表达式拼装</h2><p>建立一个<code>StudentInfo类</code>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentInfo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> StuId <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> string StuName <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> string Address <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化一个<code>StudentInfo</code>,以及需要拼装的表达式为:</p><pre class="line-numbers language-java"><code class="language-java">StudentInfo studentInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentInfo</span><span class="token punctuation">{</span>StuId<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>StuName<span class="token operator">=</span><span class="token string">"呵呵大"</span><span class="token punctuation">,</span>Address<span class="token operator">=</span><span class="token string">"北京"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>StudentInfo<span class="token punctuation">,</span> bool<span class="token operator">>></span> stuExpression <span class="token operator">=</span> <span class="token punctuation">(</span>stu<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> stu<span class="token punctuation">.</span>StuId <span class="token operator">></span> <span class="token number">10</span><span class="token operator">&amp;&amp;</span>stu<span class="token punctuation">.</span>Address<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>按照运算符的优先级，此表达式先计算<code>stu.StuId &gt; 10</code>和<code>stu.Address.Equals(&quot;北京&quot;)</code>得到一个二元表达式和一个方法调用的表达式，然后计算<code>AndAlso</code>，得到最终的二元表达式。</p><p>具体步骤如下:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//参数 stu</span>ParameterExpression parameterExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>StudentInfo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"stu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性 StuId</span>MemberExpression memberExpression <span class="token operator">=</span>  Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>parameterExpression<span class="token punctuation">,</span> <span class="token string">"StuId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//常量 10</span>ConstantExpression constantExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//stu.StuId > 10</span>BinaryExpression binaryExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">GreaterThan</span><span class="token punctuation">(</span>memberExpression<span class="token punctuation">,</span>constantExpression<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性 Address</span>MemberExpression memberAddress <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>parameterExpression<span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//常量 北京</span>ConstantExpression constantAddress <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用方法 Equals</span>MethodCallExpression methodCallExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>memberAddress<span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>StudentInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Equals"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>constantAddress<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//stu.StuId > 10   &amp;&amp;  stu.Address.Equals("北京")</span>BinaryExpression expression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">AndAlso</span><span class="token punctuation">(</span>binaryExpression<span class="token punctuation">,</span> methodCallExpression<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到lambda表达式</span>var lambda <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Lambda<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>StudentInfo<span class="token punctuation">,</span> bool<span class="token operator">>></span><span class="token punctuation">(</span>expression<span class="token punctuation">,</span> parameterExpression<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表达式树拼装实战"><a href="#表达式树拼装实战" class="headerlink" title="表达式树拼装实战"></a>表达式树拼装实战</h2><h3 id="用表达式树复制对象"><a href="#用表达式树复制对象" class="headerlink" title="用表达式树复制对象"></a>用表达式树复制对象</h3><p>有<code>StudentInfo</code>和<code>StudentInfoCopy</code>类，属性都一样，现有一个<code>StudentInfo</code>类的一个实例，需要得到一个<code>StudentInfoCopy</code>类的实例：</p><h4 id="硬编码"><a href="#硬编码" class="headerlink" title="硬编码"></a>硬编码</h4><pre class="line-numbers language-java"><code class="language-java">StudentInfo studentInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentInfo</span><span class="token punctuation">{</span>StuId<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span>StuName<span class="token operator">=</span><span class="token string">"呵呵大"</span><span class="token punctuation">,</span>Address<span class="token operator">=</span><span class="token string">"北京"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>StudentInfoCopy studentInfoCopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentInfoCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    StuId<span class="token operator">=</span>studentInfo<span class="token punctuation">.</span>StuId<span class="token punctuation">,</span>    StuName<span class="token operator">=</span>studentInfo<span class="token punctuation">.</span>StuName<span class="token punctuation">,</span>    Address<span class="token operator">=</span>studentInfo<span class="token punctuation">.</span>Address<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用反射"><a href="#用反射" class="headerlink" title="用反射"></a>用反射</h4><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionMapper</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 反射</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="TIn">&lt;/typeparam></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="TOut">&lt;/typeparam></span>    <span class="token comment" spellcheck="true">/// &lt;param name="tIn">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> <span class="token keyword">static</span> TOut Trans<span class="token operator">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token operator">></span><span class="token punctuation">(</span>TIn tIn<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        TOut tOut <span class="token operator">=</span> Activator<span class="token punctuation">.</span>CreateInstance<span class="token operator">&lt;</span>TOut<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">foreach</span> <span class="token punctuation">(</span>var itemOut in tOut<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">foreach</span> <span class="token punctuation">(</span>var itemIn in tIn<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>itemOut<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>itemIn<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    itemOut<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>tOut<span class="token punctuation">,</span> itemIn<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>tIn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">foreach</span> <span class="token punctuation">(</span>var itemOut in tOut<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">foreach</span> <span class="token punctuation">(</span>var itemIn in tIn<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>itemOut<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>itemIn<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    itemOut<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>tOut<span class="token punctuation">,</span> itemIn<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>tIn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> tOut<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用序列化反序列化方式"><a href="#用序列化反序列化方式" class="headerlink" title="用序列化反序列化方式"></a>用序列化反序列化方式</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializeMapper</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 序列化反序列化方式</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="TIn">&lt;/typeparam></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="TOut">&lt;/typeparam></span>    <span class="token keyword">public</span> <span class="token keyword">static</span> TOut Trans<span class="token operator">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token operator">></span><span class="token punctuation">(</span>TIn tIn<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span>DeserializeObject<span class="token operator">&lt;</span>TOut<span class="token operator">></span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>tIn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用表达式树方式"><a href="#使用表达式树方式" class="headerlink" title="使用表达式树方式"></a>使用表达式树方式</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 生成表达式目录树  泛型缓存</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;typeparam name="TIn">&lt;/typeparam></span><span class="token comment" spellcheck="true">/// &lt;typeparam name="TOut">&lt;/typeparam></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpressionGenericMapper</span><span class="token operator">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token operator">></span><span class="token comment" spellcheck="true">//ExpressionGenericMapper`2</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Func<span class="token operator">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token operator">></span> _FUNC <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token function">ExpressionGenericMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ParameterExpression parameterExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>TIn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>MemberBinding<span class="token operator">></span> memberBindingList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>MemberBinding<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">foreach</span> <span class="token punctuation">(</span>var item in <span class="token function">typeof</span><span class="token punctuation">(</span>TOut<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            MemberExpression property <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>parameterExpression<span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>TIn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MemberBinding memberBinding <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>            memberBindingList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>memberBinding<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">foreach</span> <span class="token punctuation">(</span>var item in <span class="token function">typeof</span><span class="token punctuation">(</span>TOut<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            MemberExpression property <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>parameterExpression<span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>TIn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MemberBinding memberBinding <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>            memberBindingList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>memberBinding<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        MemberInitExpression memberInitExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">MemberInit</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>TOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> memberBindingList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token operator">>></span> lambda <span class="token operator">=</span> Expression<span class="token punctuation">.</span>Lambda<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>TIn<span class="token punctuation">,</span> TOut<span class="token operator">>></span><span class="token punctuation">(</span>memberInitExpression<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ParameterExpression</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">{</span>                parameterExpression        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _FUNC <span class="token operator">=</span> lambda<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拼装是一次性的</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> TOut <span class="token function">Trans</span><span class="token punctuation">(</span>TIn t<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">_FUNC</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，硬编码效率最高但是不灵活，反射和序列化效率低，因此表达式树方式最好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;lambda表达式树&quot;&gt;&lt;a href=&quot;#lambda表达式树&quot; class=&quot;headerlink&quot; title=&quot;lambda表达式树&quot;&gt;&lt;/a&gt;lambda表达式树&lt;/h2&gt;&lt;p&gt;C# Lambda表达式树允许我们像处理数据（比如读取，修改）一样来处理La
      
    
    </summary>
    
      <category term="C#高级编程" scheme="https://taffyblog.github.io/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>在Ubuntu 16.04安装.Net Core</title>
    <link href="https://taffyblog.github.io/2017/08/30/installCore/"/>
    <id>https://taffyblog.github.io/2017/08/30/installCore/</id>
    <published>2017-08-30T02:16:13.000Z</published>
    <updated>2022-03-08T07:51:05.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li><p>切换到root用户 <code>su - root</code></p></li><li><p>注册Microsoft Product key为可信任<br><code>`</code>bash<br>curl <a href="https://packages.microsoft.com/keys/microsoft.asc" target="_blank" rel="noopener">https://packages.microsoft.com/keys/microsoft.asc</a> | gpg –dearmor &gt; microsoft.gpg</p></li></ol><p>sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg</p><pre><code>3. ```bashsudo sh -c &#39;echo &quot;deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main&quot; &gt; /etc/apt/sources.list.d/dotnetdev.list&#39;</code></pre><ol start="4"><li>更新软件包</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>安装.Net Core2.0</li></ol><pre><code>sudo apt-get install dotnet-sdk-2.0.0</code></pre><p>执行命令<code>dotnet --info</code>可查看安装的.Net Core信息，也可检查安装是否成功</p><pre class="line-numbers language-bash"><code class="language-bash">~$ dotnet --info.NET Command Line Tools <span class="token punctuation">(</span>2.0.0<span class="token punctuation">)</span>Product Information: Version:            2.0.0 Commit SHA-1 hash:  cdcd1928c9Runtime Environment: OS Name:     ubuntu OS Version:  16.04 OS Platform: Linux RID:         ubuntu.16.04-x64 Base Path:   /usr/share/dotnet/sdk/2.0.0/Microsoft .NET Core Shared Framework Host  Version  <span class="token keyword">:</span> 2.0.0  Build    <span class="token keyword">:</span> e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;切换到root用户 &lt;code&gt;su - root&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注册M
      
    
    </summary>
    
      <category term="DotNet Core" scheme="https://taffyblog.github.io/categories/DotNet-Core/"/>
    
    
  </entry>
  
  <entry>
    <title>控制反转/依赖注入（Unity容器使用）</title>
    <link href="https://taffyblog.github.io/2017/08/19/Ioc/"/>
    <id>https://taffyblog.github.io/2017/08/19/Ioc/</id>
    <published>2017-08-19T03:47:13.000Z</published>
    <updated>2022-03-08T07:51:05.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="控制反转-IOC"><a href="#控制反转-IOC" class="headerlink" title="控制反转(IOC)"></a>控制反转(IOC)</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>控制反转(Inversion of Control，英文缩写为IoC)是一个重要的面向对象编程的法则来削减计算机程序的耦合问题，也是轻量级的Spring框架的核心。 控制反转一般分为两种类型，依赖注入(Dependency Injection，简称DI)和依赖查找(Dependency Lookup)。依赖注入应用比较广泛。是一种设计模式。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>IOC模式，系统中通过引入实现了IOC模式的IOC容器，即可由IOC容器来管理对象的生命周期、依赖关系等，从而使得应用程序的配置和依赖性规范与实际的应用程序代码分开。其中一个特点就是通过文本的配置文件进行应用程序组件间相互关系的配置，而不用重新修改并编译具体的代码。</p><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>组件不做定位查询，只提供普通的方法让容器去决定依赖关系。容器全权负责的组件的装配，它会把符合依赖关系的对象通过属性或者构造函数传递给需要的对象。通过属性注射依赖关系的做法称为设值方法注入或属性注入(Setter Injection)；将依赖关系作为构造函数参数传入的做法称为构造函数注入（Constructor Injection）    </p><h4 id="Unity容器"><a href="#Unity容器" class="headerlink" title="Unity容器"></a>Unity容器</h4><ol><li>示例介绍</li></ol><p>项目结构如下图:</p><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/ioc.png" alt="image"></p><ul><li><p>接口:IPhone(手机)、IPower（电源）、IMicrophone（麦克风）、IHeadphone（耳机）</p></li><li><p>AndroidPhone、ApplePhone实现接口IPhone，Headphone、Microphone、Power类实现各自的接口</p></li></ul><ol start="2"><li><p>关键代码预览</p><p>IPhone:</p></li></ol><pre class="line-numbers language-java"><code class="language-java">namespace Ioc<span class="token punctuation">.</span>Interface<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPhone</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IMicrophone iMicrophone <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>        IHeadphone iHeadphone <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>        IPower iPower <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IPower（电源）、IMicrophone（麦克风）、IHeadphone（耳机）：</p><pre class="line-numbers language-java"><code class="language-java">namespace Ioc<span class="token punctuation">.</span>Interface<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 耳机</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IHeadphone</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 麦克风</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMicrophone</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 电源</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPower</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AndroidPhone:</p><pre class="line-numbers language-java"><code class="language-java">namespace IocTest<span class="token punctuation">.</span>Service<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AndroidPhone</span><span class="token operator">:</span>IPhone    <span class="token punctuation">{</span>        <span class="token punctuation">[</span>Dependency<span class="token punctuation">]</span><span class="token comment" spellcheck="true">//属性注入</span>        <span class="token keyword">public</span> IMicrophone iMicrophone <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> IHeadphone iHeadphone <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> IPower iPower <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">AndroidPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0}构造函数"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//[InjectionConstructor]//构造函数注入：默认找参数最多的构造函数</span>        <span class="token keyword">public</span> <span class="token function">AndroidPhone</span><span class="token punctuation">(</span>IHeadphone headphone<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>iHeadphone <span class="token operator">=</span> headphone<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0}带参数构造函数"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0}打电话"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">[</span>InjectionMethod<span class="token punctuation">]</span><span class="token comment" spellcheck="true">//方法注入</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Init1234</span><span class="token punctuation">(</span>IPower power<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>iPower <span class="token operator">=</span> power<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ApplePhone：</p><pre class="line-numbers language-java"><code class="language-java">namespace IocTest<span class="token punctuation">.</span>Service<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplePhone</span> <span class="token operator">:</span> IPhone    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">ApplePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{this.GetType().Name}构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> IMicrophone iMicrophone <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> IHeadphone iHeadphone <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> IPower iPower <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{this.GetType().Name}打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Headphone、Microphone、Power:</p><pre class="line-numbers language-java"><code class="language-java">namespace IocTest<span class="token punctuation">.</span>Service<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Headphone</span> <span class="token operator">:</span> IHeadphone    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Headphone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Headphone 被构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Microphone</span> <span class="token operator">:</span> IMicrophone    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Microphone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Microphone 被构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Power</span> <span class="token operator">:</span> IPower    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">Power</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Power 被构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上代码中，仅在AndroidPhone类中使用了依赖注入。</p></blockquote><h5 id="代码直接注册方式"><a href="#代码直接注册方式" class="headerlink" title="代码直接注册方式"></a>代码直接注册方式</h5><p>直接在代码中使用Unity的方式如下:</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实例化容器</span>    IUnityContainer container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnityContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注册类型</span>    container<span class="token punctuation">.</span>RegisterType<span class="token operator">&lt;</span>IPhone<span class="token punctuation">,</span> ApplePhone<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    container<span class="token punctuation">.</span>RegisterType<span class="token operator">&lt;</span>IHeadphone<span class="token punctuation">,</span> Headphone<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    container<span class="token punctuation">.</span>RegisterType<span class="token operator">&lt;</span>IMicrophone<span class="token punctuation">,</span> Microphone<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    container<span class="token punctuation">.</span>RegisterType<span class="token operator">&lt;</span>IPower<span class="token punctuation">,</span> Power<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//同一接口的不同实现取名以区分</span>    container<span class="token punctuation">.</span>RegisterType<span class="token operator">&lt;</span>IPhone<span class="token punctuation">,</span> AndroidPhone<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"Android"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取对象</span>    var iphone <span class="token operator">=</span>  container<span class="token punctuation">.</span>Resolve<span class="token operator">&lt;</span>IPhone<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"Android"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    iphone<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用依赖注入容器后，只要用特性标记为属性注入的，该属性会从已注册类型中创建实例给该属性； 标记为方法注入的则会调用该方法并从已注册类型中创建实例并赋值给参数传递；标记为构造函数注入或不标记的，都会调用Resolve方法所指向的已注册类型中构造函数参数最多的一个调用，并从已注册类型中初始化参数</p><blockquote><p>推荐使用构造函数注入，因为这样避免了对代码的侵入性。</p></blockquote><blockquote><p>以上代码中在注册类型时依然有对实现类的依赖，因此这种方式使用依赖注入容器意义不大。</p></blockquote><h5 id="配置文件注册方式"><a href="#配置文件注册方式" class="headerlink" title="配置文件注册方式"></a>配置文件注册方式</h5><p>本例配置文件格式如下，核心在containers配置节，配置了注册的类型：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configSections</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>unity<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configSections</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>unity</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sectionExtension</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>containers</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>container</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testContainer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>register</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IocTest.Interface.IPhone,IocTest.Interface<span class="token punctuation">"</span></span> <span class="token attr-name">mapTo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IocTest.Service.ApplePhone, IocTest.Service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>register</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IocTest.Interface.IPhone,IocTest.Interface<span class="token punctuation">"</span></span> <span class="token attr-name">mapTo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IocTest.Service.AndroidPhone, IocTest.Service<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Android<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>register</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IocTest.Interface.IMicrophone, IocTest.Interface<span class="token punctuation">"</span></span> <span class="token attr-name">mapTo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IocTest.Service.Microphone, IocTest.Service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>register</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IocTest.Interface.IHeadphone, IocTest.Interface<span class="token punctuation">"</span></span> <span class="token attr-name">mapTo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IocTest.Service.Headphone, IocTest.Service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>register</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IocTest.Interface.IPower, IocTest.Interface<span class="token punctuation">"</span></span> <span class="token attr-name">mapTo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IocTest.Service.Power, IocTest.Service<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>container</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>containers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>unity</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码内容：</p><pre class="line-numbers language-java"><code class="language-java">ExeConfigurationFileMap fileMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExeConfigurationFileMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找配置文件的路径</span>fileMap<span class="token punctuation">.</span>ExeConfigFilename <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>BaseDirectory <span class="token operator">+</span> <span class="token string">"Config\\UnityConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Configuration configuration <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span><span class="token function">OpenMappedExeConfiguration</span><span class="token punctuation">(</span>fileMap<span class="token punctuation">,</span> ConfigurationUserLevel<span class="token punctuation">.</span>None<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取指定名称的配置节</span>UnityConfigurationSection section <span class="token operator">=</span> <span class="token punctuation">(</span>UnityConfigurationSection<span class="token punctuation">)</span>configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span>UnityConfigurationSection<span class="token punctuation">.</span>SectionName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化容器</span>IUnityContainer container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnityContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>section<span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> <span class="token string">"testContainer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>container<span class="token punctuation">.</span>AddNewExtension<span class="token operator">&lt;</span>Interception<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Configure<span class="token operator">&lt;</span>Interception<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>SetInterceptorFor<span class="token operator">&lt;</span>IPhone<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InterfaceInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IPhone phone <span class="token operator">=</span> container<span class="token punctuation">.</span>Resolve<span class="token operator">&lt;</span>IPhone<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"Android"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>phone<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-bash"><code class="language-bash">Headphone 被构造AndroidPhone带参数构造函数Microphone 被构造Power 被构造AndroidPhone打电话<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;控制反转-IOC&quot;&gt;&lt;a href=&quot;#控制反转-IOC&quot; class=&quot;headerlink&quot; title=&quot;控制反转(IOC)&quot;&gt;&lt;/a&gt;控制反转(IOC)&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="C#高级编程" scheme="https://taffyblog.github.io/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>装饰器模式</title>
    <link href="https://taffyblog.github.io/2017/07/10/DecoratorPattern/"/>
    <id>https://taffyblog.github.io/2017/07/10/DecoratorPattern/</id>
    <published>2017-07-10T07:06:15.000Z</published>
    <updated>2022-03-08T07:51:05.888Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li>装饰模式：动态的给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模式是一种对象结构型模式。</li><li>何时使用：在不想增加很多子类的情况下扩展类。</li><li>如何解决：将具体功能职责划分，同时继承装饰者模式。</li><li>关键代码： 1、Component 类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。</li><li>优点：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</li><li>缺点：多层装饰比较复杂。</li><li>使用场景： 扩展一个类的功能，动态增加功能，动态撤销。</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ol><li>实现普通学员和VIP学员上课。</li><li>普通学员需要注册、预习、上课。</li><li>VIP学员需要注册、付费、预习、上课、作业、点评。</li></ol><h4 id="示例介绍"><a href="#示例介绍" class="headerlink" title="示例介绍"></a>示例介绍</h4><ol><li><p>有一个<code>AbstractStudent</code>抽象类,表示学员的基类。</p></li><li><p>有<code>StudentFree</code>和<code>StudentVip</code>类，继承自<code>AbstractStudent</code>，表示普通学员和VIP学员。</p></li><li><p><code>BaseStudentDecorator</code>继承自<code>AbstractStudent</code>，表示装饰器基类。</p></li><li><p><code>StudentRegDecorator</code>、<code>StudentPayDecorator</code>、<code>StudentPreviewDecorator</code>、<code>StudentHomeworkDecorator</code>、<code>StudentCommentDecorator</code>,都继承自<code>AbstractStudent</code>类，分别表示学员注册、付费、预习、作业巩固练习、作业点评。</p></li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><code>AbstractStudent</code>类:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractStudent</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Id <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> string Name <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>StudentFree</code>和<code>StudentVip</code>类:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 一个普通的公开课学员,学习公开课</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentFree</span> <span class="token operator">:</span> AbstractStudent<span class="token punctuation">{</span>    <span class="token keyword">public</span> override <span class="token keyword">void</span> <span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} is a free student studying .net Free"</span><span class="token punctuation">,</span> base<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 一个普通的vip学员,学习vip课程</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentVip</span> <span class="token operator">:</span> AbstractStudent<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 付费  上课前要预习   </span>    <span class="token comment" spellcheck="true">/// 上课学习</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> override <span class="token keyword">void</span> <span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} is a vip student studying .net Vip"</span><span class="token punctuation">,</span> base<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>BaseStudentDecorator</code>类:</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 装饰器的基类</span><span class="token comment" spellcheck="true">/// 也是一个学员，继承了抽象类</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseStudentDecorator</span> <span class="token operator">:</span> AbstractStudent<span class="token punctuation">{</span><span class="token keyword">private</span> AbstractStudent _Student <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用了组合加继承</span>    <span class="token keyword">public</span> <span class="token function">BaseStudentDecorator</span><span class="token punctuation">(</span>AbstractStudent student<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_Student <span class="token operator">=</span> student<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> override <span class="token keyword">void</span> <span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_Student<span class="token punctuation">.</span><span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Console.WriteLine("****************");</span>        <span class="token comment" spellcheck="true">//基类装饰器必须是个空的行为  会重复</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>各装饰器类如下:</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentRegDecorator</span> <span class="token operator">:</span> BaseStudentDecorator<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StudentRegDecorator</span><span class="token punctuation">(</span>AbstractStudent student<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">base</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//表示父类的构造函数</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> override <span class="token keyword">void</span> <span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"注册"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        base<span class="token punctuation">.</span><span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentPayDecorator</span> <span class="token operator">:</span> BaseStudentDecorator<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StudentPayDecorator</span><span class="token punctuation">(</span>AbstractStudent student<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">base</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//表示父类的构造函数</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> override <span class="token keyword">void</span> <span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"付费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        base<span class="token punctuation">.</span><span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentPreviewDecorator</span> <span class="token operator">:</span> BaseStudentDecorator<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StudentPreviewDecorator</span><span class="token punctuation">(</span>AbstractStudent student<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">base</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//表示父类的构造函数</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> override <span class="token keyword">void</span> <span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"预习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        base<span class="token punctuation">.</span><span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentHomeworkDecorator</span> <span class="token operator">:</span> BaseStudentDecorator<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StudentHomeworkDecorator</span><span class="token punctuation">(</span>AbstractStudent student<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">base</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//表示父类的构造函数</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> override <span class="token keyword">void</span> <span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        base<span class="token punctuation">.</span><span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"巩固练习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentCommentDecorator</span> <span class="token operator">:</span> BaseStudentDecorator<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StudentCommentDecorator</span><span class="token punctuation">(</span>AbstractStudent student<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">base</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//表示父类的构造函数</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> override <span class="token keyword">void</span> <span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        base<span class="token punctuation">.</span><span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"点评"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用代码：</p><pre class="line-numbers language-java"><code class="language-java">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"******************普通学员**********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AbstractStudent student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentFree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Id <span class="token operator">=</span> <span class="token number">001</span><span class="token punctuation">,</span>    Name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentPreviewDecorator</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentRegDecorator</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"*****************VIP学员***********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentVip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Id <span class="token operator">=</span> <span class="token number">002</span><span class="token punctuation">,</span>    Name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentPreviewDecorator</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原有变量</span>student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentPayDecorator</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentRegDecorator</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentHomeworkDecorator</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentCommentDecorator</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">Study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为:</p><pre class="line-numbers language-bash"><code class="language-bash">******************普通学员**********************注册预习张三 is a <span class="token function">free</span> student studying .net Free*****************VIP学员***********************注册付费预习李四 is a vip student studying .net Vip巩固练习点评<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;装饰模式：动态的给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模式是一种对象结构型模式。
      
    
    </summary>
    
      <category term="设计模式" scheme="https://taffyblog.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="结构型设计模式" scheme="https://taffyblog.github.io/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>加密和解密</title>
    <link href="https://taffyblog.github.io/2017/07/02/encryption/"/>
    <id>https://taffyblog.github.io/2017/07/02/encryption/</id>
    <published>2017-07-02T05:54:26.000Z</published>
    <updated>2022-03-08T07:51:05.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对称加密和非对称加密"><a href="#对称加密和非对称加密" class="headerlink" title="对称加密和非对称加密"></a>对称加密和非对称加密</h3><p>对称加密<br>对称加密的思路非常简单，就是含有一个称为密钥的东西，在消息发送前使用密钥对消息进行加密，在对方收到消息之后，使用相同的密钥进行解密。根据密钥来产生加密后的消息（密文）的这一加工过程，由加密算法来完成，加密算法通常是公开的。它的流程如下：</p><ol><li>发送方使用密钥对消息进行加密。</li><li>接收方使用同样的密钥对消息进行解密。</li></ol><p>对称加密存在这样两个问题：</p><ol><li>虽然可以通过密钥来保证消息安全地进行传递，但是如何确保密钥安全地进行传递？因为发送者和接收者总有一次初始的通信，用来传递密钥，此时的安全如何保证？</li><li>接收者虽然可以根据密钥来解密消息，但因为存在上面的问题，消息有可能是由第三方（非法获得密钥）发来的，而接收方无法辨别。<br>为了解决上面两个问题，就需要介绍一下非对称加密。</li></ol><p>非对称加密<br>非对称加密的接收者和发送者都持有两个密钥，一个是对外公开的，称为公钥，一个是自行保管的，称为私钥。非对称加密的规则是由某人A的公钥加密的消息，只能由A的私钥进行解密；由A的私钥加密的消息只能由A的公钥解密。此时我们可以得出接收方、发送方有两个公钥两个私钥一共四个密钥，我们先看看两种简单的方式，这两种方式都是只使用两个密钥。<br>第一种模式只使用接收方的公钥和私钥，称为加密模式。<br>加密模式<br>在加密模式中，由消息的接收方发布公钥，持有私钥。比如发送方要发送消息“hello,jimmy”到接收方，它的步骤是：</p><ol><li>发送方使用接收者的公钥进行加密消息，然后发送。</li><li>接收方使用自己的私钥对消息进行解密。</li></ol><p>在这种模式下，如果第三方截获了发送者发出的消息，因为他没有接收者的私钥，所以这个消息对他来说毫无意义。可见，它能够满足本文最开始提出的消息安全传递的要点一：消息的发送方能够确定消息只有预期的接收方可以解密(不保证第三方无法获得，但保证第三方无法解密)。<br>除此以外，因为接收方的公钥是公开的，任何人都可以使用这个公钥来加密消息并发往接收者，而接收者无法对消息进行判别，无法知道是由谁发送来的。所以，它不满足我们开始提出的消息安全传递的要点二：消息的接收方可以确定消息是由谁发送的（消息的接收方可以确定消息的发送方）。</p><p>认证模式<br>在认证模式中，由消息的发送方发布公钥，持有私钥。比如发送者要发送消息“Welcome to Tracefact.net”到接收者，它的步骤是：</p><ol><li>发送者使用自己的私钥对消息进行加密，然后发送。</li><li>接收者使用发送者的公钥对消息进行解密。</li></ol><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>对称加密算法的优点是速度快，缺点是密钥管理不方便，要求共享密钥。</p><p>非对称加密算法的优点是密钥管理很方便，缺点是速度慢。</p><h3 id="MD5不可逆加密"><a href="#MD5不可逆加密" class="headerlink" title="MD5不可逆加密"></a>MD5不可逆加密</h3><h4 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h4><p>MD5（单向散列算法）的全称是Message-Digest Algorithm 5（信息-摘要算法），经MD2、MD3和MD4发展而来。MD5算法的使用不需要支付任何版权费用。</p><h4 id="MD5功能"><a href="#MD5功能" class="headerlink" title="MD5功能"></a>MD5功能</h4><ul><li>输入任意长度的信息，经过处理，输出为128位的信息（数字指纹）；</li><li>不同的输入得到的不同的结果（唯一性）；</li><li>根据128位的输出结果不可能反推出输入的信息（不可逆）； </li></ul><h4 id="MD5属不属于加密算法"><a href="#MD5属不属于加密算法" class="headerlink" title="MD5属不属于加密算法"></a>MD5属不属于加密算法</h4><ul><li>认为不属于的人是因为他们觉得不能从密文（散列值）反过来得到原文，即没有解密算法，所以这部分人认为MD5只能属于算法，不能称为加密算法；</li><li>认为属于的人是因为他们觉得经过MD5处理后看不到原文，即已经将原文加密，所以认为MD5属于加密算法。</li></ul><h4 id="MD5的用途"><a href="#MD5的用途" class="headerlink" title="MD5的用途"></a>MD5的用途</h4><h5 id="防止被篡改"><a href="#防止被篡改" class="headerlink" title="防止被篡改"></a>防止被篡改</h5><ol><li>比如发送一个电子文档，发送前，我先得到MD5的输出结果a。然后在对方收到电子文档后，对方也得到一个MD5的输出结果b。如果a与b一样就代表中途未被篡改。</li><li>比如我提供文件下载，为了防止不法分子在安装程序中添加木马，我可以在网站上公布由安装文件得到的MD5输出结果。</li><li>SVN在检测文件是否在CheckOut后被修改过，也是用到了MD5.   </li></ol><h5 id="防止直接看到明文"><a href="#防止直接看到明文" class="headerlink" title="防止直接看到明文"></a>防止直接看到明文</h5><p>现在很多网站在数据库存储用户的密码的时候都是存储用户密码的MD5值。这样就算不法分子得到数据库的用户密码的MD5值，也无法知道用户的密码(其实这样是不安全的)。（比如在UNIX系统中用户的密码就是以MD5（或其它类似的算法）经加密后存储在文件系统中。当用户登录的时候，系统把用户输入的密码计算成MD5值，然后再去和保存在文件系统中的MD5值进行比较，进而确定输入的密码是否正确。通过这样的步骤，系统在并不知道用户密码的明码的情况下就可以确定用户登录系统的合法性。这不但可以避免用户的密码被具有系统管理员权限的用户知道，而且还在一定程度上增加了密码被破解的难度。）</p><h5 id="防止抵赖（数字签名）"><a href="#防止抵赖（数字签名）" class="headerlink" title="防止抵赖（数字签名）"></a>防止抵赖（数字签名）</h5><p>这需要一个第三方认证机构。例如A写了一个文件，认证机构对此文件用MD5算法产生摘要信息并做好记录。若以后A说这文件不是他写的，权威机构只需对此文件重新产生摘要信息，然后跟记录在册的摘要信息进行比对，相同的话，就证明是A写的了。这就是所谓的“数字签名”。</p><h3 id="DES对称可逆加密"><a href="#DES对称可逆加密" class="headerlink" title="DES对称可逆加密"></a>DES对称可逆加密</h3><h4 id="DES算法介绍"><a href="#DES算法介绍" class="headerlink" title="DES算法介绍"></a>DES算法介绍</h4><p>美国国家标准局1973年开始研究除国防部外的其它部门的计算机系统的数据加密标准，于1973年5月15日和1974年8月27日先后两次向公众发出了征求加密算法的公告。加密算法要达到的目的（通常称为DES 密码算法要求）主要为以下四点： </p><ul><li>提供高质量的数据保护，防止数据未经授权的泄露和未被察觉的修改； </li><li>具有相当高的复杂性，使得破译的开销超过可能获得的利益，同时又要便于理解和掌握； </li><li>DES密码体制的安全性应该不依赖于算法的保密，其安全性仅以加密密钥的保密为基础； </li><li>实现经济，运行有效，并且适用于多种完全不同的应用。<br>1977年1月，美国政府颁布：采纳IBM公司设计的方案作为非机密数据的正式数据加密标准（DES?Data Encryption Standard）。<br>　　目前在国内，随着三金工程尤其是金卡工程的启动，DES算法在POS、ATM、磁卡及智能卡（IC卡）、加油站、高速公路收费站等领域被广泛应用，以此来实现关键数据的保密，如信用卡持卡人的PIN的加密传输，IC卡与POS间的双向认证、金融交易数据包的MAC校验等，均用到DES算法。</li></ul><h3 id="RSA非对称可逆加密"><a href="#RSA非对称可逆加密" class="headerlink" title="RSA非对称可逆加密"></a>RSA非对称可逆加密</h3><h4 id="RSA算法介绍"><a href="#RSA算法介绍" class="headerlink" title="RSA算法介绍"></a>RSA算法介绍</h4><p>它是第一个既能用于数据加密也能用于数字签名的算法。它易于理解和操作，也很流行。算法的名字以发明者的名字命名：Ron Rivest, Adi Shamir 和Leonard Adleman。但RSA的安全性一直未能得到理论上的证明。它经历了各种攻击，至今未被完全攻破。 </p><p>加密和解密不是用的同一个密钥，其中一个称为公钥（public key），另一个称为私钥（private key）。公钥就是公开的，大家都知道，而私钥只有你自己知道。这两个密钥在数学上是有联系的，用公钥加密的内容只能由相应的私钥来解密，反过来，用私钥加密的内容只能由相应的公钥来解密。另外很重要的一点是， 不能从公钥推导出私钥，或者说很困难。常用的非对称加密算法有RSA，ECC等等。举个例子，你想要把一篇文章发送给你的朋友，但是不想让别人看到这篇文章。除了用上面讲的方法以外，你还可以用非对称加密来实现。在发送之前，你把文章用你朋友的公钥加密（公钥是公开的，每个人都知道），然后把加密过后的文章发送给你的朋友，你的朋友可以用他的私钥来解密。其他人获得了你传送的内容都是没有用的，因为只有你朋友有私钥可以解密。 非对称加密算法的优点是密钥管理很方便，缺点是速度慢。</p><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><h4 id="数字签名介绍"><a href="#数字签名介绍" class="headerlink" title="数字签名介绍"></a>数字签名介绍</h4><p>数字签名所用的技术是散列和非对称加密。数字签名的假设是： 只有你自己有你的私钥。根据前面对散列的介绍，我们先为你要签名的信息生成一个Hash字串，Hash1，然后用你的私钥加密得到Encrypted(Hash1)，这就是你对这个文档的数字签名。当别人需要验证某个文档是否是你签名的时候，只需要用你的公钥解密你的签名得到Hash1，并和该文档计算出来的Hash2对比，查看是否一致。如果一致则说明你确实对该文档签过名，否则就是没有。下面来分析一下，数字签名是如何保证上面所讲的签名的特点的。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>不可伪造<br>因为只有你有你自己的私钥，所以任何其他人都无法产生用你的私钥加密过的Hash1。 </li><li>不可移植，复制<br>你对文档A的签名不可能对文档B也有效，因为你对文档B的签名必然和对A的签名不一样，这是由Hash的唯一性保证的。拿你对A的签名去验证B是不可能通过的。 </li><li>不可否认<br>因为不可伪造，不可移植，不可复制，所以不可否认。 </li></ol><h3 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h3><p>我们的身份证是由公安机关颁发的，并加有很多防伪技术，不能伪造（或者说很难）。同样的，数字证书也有专门的发证机关（Certificate Authority，简称CA，其实是一些商业公司啦）。比较常见的发证机关是 VeriSign。数字证书的发证机关会对自己发放的证书加上自己的数字签名，以保证证书不能被伪造。那数字证书到底包含了些什么呢？</p><ul><li>持有者姓名（Common Name）</li><li>发证机关（Issuer）</li><li>有效日期（Validity）</li><li>证书持有人的公钥（Subject’s Public Key Info）</li><li>扩展信息 （Extension）</li><li>用发证机关对该证书的数字签名（Certificate Signature）  前5点信息MD5摘要，然后用CA的私钥(加密下)</li></ul><h4 id="证书的验证"><a href="#证书的验证" class="headerlink" title="证书的验证"></a>证书的验证</h4><ol><li><p>验证发证机关</p><p> 当浏览器拿到一个数字证书，先看发证机关，然后找到相应的发证机关的证书，获得发证机关的公钥，用此公钥解密被加密的MD5，这样就获得了此证书的MD5值，我们称它为Hash1。然后浏览器用MD5算法对此证书重新计算一遍MD5，获得Hash2。然后比较Hash1和Hash2是否相等。如果相等就证明这张证书是由发证机关颁发的，并且没有被篡改过。</p></li><li><p>验证服务器（所有者）</p></li></ol><p>使用证书所有者（注意，我这里指的是所有者，而不是持有者！）公钥加密一段信息发送给证书的持有者，如果持有者能发送回（可以是被私钥加密，也可以是明文，没有关系）被加密的这段信息的话就证明该持有者拥有该证书对应的私钥，也就是说，该持有者就是该证书的所有者。</p><ol start="3"><li>验证持有者姓名</li></ol><h4 id="SSL基本原理"><a href="#SSL基本原理" class="headerlink" title="SSL基本原理"></a>SSL基本原理</h4><p>SSL全称是 Secure Sockets Layer，它是一种间于传输层（比如TCP/IP）和应用层（比如HTTP）的协议。</p><p>最简单的方法来保证通信安全是用非对称加密。我们前面讲过数字证书的认证，如果双方都认证了对方的数字证书，那么每次传输信息的时候都用对方的公钥加密，这样就只有对方能解密，从而保证了信息的安全，但是对于日常应用（比如网页浏览）有两个问题：</p><ol><li>非对称加密速度缓慢，消耗资源<br>如果客户端和服务器之间传输文件用非对称加密的话，速度一定慢的忍无可忍。 </li><li>不可能要求每个用户都去申请数字证书<br>申请数字证书是一个相当麻烦的过程，要求每个上网的用户都拥有证书是不可能的事情。 </li></ol><p>SSL通过“握手协议”和“传输协议”来解决上述问题。握手协议是基于非对称加密的，而传输协议是基于对称加密的。根据不同的应用，SSL对证书的要求也是不一样的，可以是单方认证（比如HTTP, FTP），也可以是双方认证（比如网上银行）。通常情况下，服务器端的证书是一定要具备的，客户端的证书不是必须的。下面两张图片显示了SSL握手的过程。</p><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/ssl.png" alt="image"></p><pre><code>                    单边认证</code></pre><p><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/ssl1.png" alt="image"></p><pre><code>                    双边认证</code></pre><p>在通信双方协商出一个对称密钥以后，他们用这个密钥来加密传输的数据。同时为每个消息生成时间戳，用此密钥为消息和相应的时间戳生成消息认证码（MAC）。也就是说，每次发送的内容包括 Encrypt(message) + MAC(message + timestamp)。</p><p>这么做有几个好处：</p><ol><li>防止消息的篡改<br>所谓消息篡改就是有第三者插在通信双方之间，篡改往来的消息。由于消息是加密的，第三者不能获得消息的内容，但是他可以闭着眼睛瞎改。如果没有MAC的话，接受者就无法判断此消息是否被篡改过。</li><li>防止消息重放<br>消息的重放是只第三者记录下通信双方的每一次发送的消息，虽然他不能获得消息的内容。但是它可以通过重新发送客户端或者服务端的信息来把自己装成是客户端或者服务端。如果在MAC里面加上了时间戳，消息接收方验证时间戳就可以阻止消息的重放攻击。<br>SSL的基本思想是用非对称加密来建立链接（握手阶段），用对称加密来传输数据（传输阶段）。这样既保证了密钥分发的安全，也保证了通信的效率。<br>通过上面对SSL的分析，我们可以看到，SSL并不能阻止别人获得你传输的数据，但是由于你传输的数据都是加密过的，别人拿到了毫无用处，一样可以保护信息的安全。还有一点需要强调一下，SSL并不依赖于TCP，它可以建立在任何可靠的传输层协议（比如TCP）之上。也就是说SSL是不能建立在UDP之上的。这是显然的，如果传输都不可靠，偶尔丢两个包或者包的顺序换一换的话，怎么保证安全呢？</li></ol><p><a href="http://blog.csdn.net/forgotaboutgirl/article/details/7258109" target="_blank" rel="noopener">参考链接</a><br><a href="http://www.iplaysoft.com/encrypt-arithmetic.html" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;对称加密和非对称加密&quot;&gt;&lt;a href=&quot;#对称加密和非对称加密&quot; class=&quot;headerlink&quot; title=&quot;对称加密和非对称加密&quot;&gt;&lt;/a&gt;对称加密和非对称加密&lt;/h3&gt;&lt;p&gt;对称加密&lt;br&gt;对称加密的思路非常简单，就是含有一个称为密钥的东西，在消息发
      
    
    </summary>
    
      <category term="C#高级编程" scheme="https://taffyblog.github.io/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="加密" scheme="https://taffyblog.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>设计模式(三)--抽象工厂模式</title>
    <link href="https://taffyblog.github.io/2017/06/03/abstractFactory/"/>
    <id>https://taffyblog.github.io/2017/06/03/abstractFactory/</id>
    <published>2017-06-03T03:41:13.000Z</published>
    <updated>2022-03-08T07:51:05.897Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接：<a href="http://www.cnblogs.com/chenpi/p/5156801.html" target="_blank" rel="noopener">风一样的码农</a></p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>对一组具有相同主题的工厂进行封装；提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p>例如：生产一台PC机，使用工厂方法模式的话，一般会有cpu工厂，内存工厂，显卡工厂…但是使用抽象工厂模式的话，只有一个工厂就是PC工厂，但是一个PC工厂涵盖了cpu工厂，内存工厂，显卡工厂等要做的所有事；</p><p>另外，还有一个产品等级的概念，还是以生产PC机为例，所谓的产品等级指的是不同厂商生产的CPU，如Intel和AMD的CPU,他们是同一个产品等级，如果只涉及产品等级的话，是不需要应用抽象工厂模式，使用工厂方法模式即可；<br>工厂方法模式解决的范畴是产品等级（AMD处理器，Intel处理器等）；抽象工厂模式解决的范畴是产品族等级（联想PC、惠普PC等）；</p><p>####　示例代码</p><p>与工厂方法模式中的例子类似，这是一个模拟多种数据库访问层封装的代码：</p><p>抽象工厂(IDatabaseFactory)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDatabaseFactory</span><span class="token punctuation">{</span>    IOracle <span class="token function">CreateOracle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    IMysql <span class="token function">CreateMysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体工厂(Factory)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span><span class="token operator">:</span>IDatabaseFactory<span class="token punctuation">{</span>    <span class="token keyword">public</span> IMysql <span class="token function">CreateMysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Mysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> IOracle <span class="token function">CreateOracle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Oracle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽象产品(IMysql,IOracle)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span>  <span class="token class-name">IMysql</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">ShowDatabaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IOracle</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">ShowDatabaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体产品(Mysql,Oracle)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Mysql</span> <span class="token operator">:</span> IMysql<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ShowDatabaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is Mysql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Oracle</span> <span class="token operator">:</span> IOracle<span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ShowDatabaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is Oracle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>产品使用者</p><pre class="line-numbers language-java"><code class="language-java">IDatabaseFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IOracle oracle<span class="token operator">=</span>  factory<span class="token punctuation">.</span><span class="token function">CreateOracle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IMysql mysql <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateMysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oracle<span class="token punctuation">.</span><span class="token function">ShowDatabaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mysql<span class="token punctuation">.</span><span class="token function">ShowDatabaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为:</p><pre class="line-numbers language-bash"><code class="language-bash">This is OracleThis is Mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考链接：&lt;a href=&quot;http://www.cnblogs.com/chenpi/p/5156801.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;风一样的码农&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class
      
    
    </summary>
    
      <category term="设计模式" scheme="https://taffyblog.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="创建型设计模式" scheme="https://taffyblog.github.io/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>在Linux中安装Oracle数据库</title>
    <link href="https://taffyblog.github.io/2017/05/29/linuxInstallOracle/"/>
    <id>https://taffyblog.github.io/2017/05/29/linuxInstallOracle/</id>
    <published>2017-05-29T09:16:13.000Z</published>
    <updated>2022-03-08T07:51:05.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h3><h4 id="修改用户的SHELL的限制，修改-etc-security-limits-conf文件"><a href="#修改用户的SHELL的限制，修改-etc-security-limits-conf文件" class="headerlink" title="修改用户的SHELL的限制，修改/etc/security/limits.conf文件"></a>修改用户的SHELL的限制，修改/etc/security/limits.conf文件</h4><p>输入命令：<code>vi /etc/security/limits.conf</code>，按i键进入编辑模式，将下列内容加入该文件。</p><pre class="line-numbers language-bash"><code class="language-bash">oracle soft nproc 2047oracle hard nproc 16384oracle soft nofile 1024oracle hard nofile 65536<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编辑完成后按Esc键，输入<code>:wq</code>存盘退出</p><h4 id="修改-etc-pam-d-login-文件"><a href="#修改-etc-pam-d-login-文件" class="headerlink" title="修改/etc/pam.d/login 文件"></a>修改/etc/pam.d/login 文件</h4><p>输入命令：<code>vi /etc/pam.d/login</code>，按i键进入编辑模式，将下列内容加入该文件。</p><pre class="line-numbers language-bash"><code class="language-bash">session required /lib/security/pam_limits.sosession required pam_limits.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="修改linux内核"><a href="#修改linux内核" class="headerlink" title="修改linux内核"></a>修改linux内核</h4><p>修改/etc/sysctl.conf文件，输入命令: <code>vi /etc/sysctl.conf</code> ，按i键进入编辑模式，将下列内容加入该文件</p><pre class="line-numbers language-bash"><code class="language-bash">fs.file-max <span class="token operator">=</span> 6815744fs.aio-max-nr <span class="token operator">=</span> 1048576kernel.shmall <span class="token operator">=</span> 2097152kernel.shmmax <span class="token operator">=</span> 2147483648kernel.shmmni <span class="token operator">=</span> 4096kernel.sem <span class="token operator">=</span> 250 32000 100 128net.ipv4.ip_local_port_range <span class="token operator">=</span> 9000 65500net.core.rmem_default <span class="token operator">=</span> 4194304net.core.rmem_max <span class="token operator">=</span> 4194304net.core.wmem_default <span class="token operator">=</span> 262144net.core.wmem_max <span class="token operator">=</span> 1048576<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使-etc-sysctl-conf-更改立即生效"><a href="#使-etc-sysctl-conf-更改立即生效" class="headerlink" title="使 /etc/sysctl.conf 更改立即生效"></a>使 /etc/sysctl.conf 更改立即生效</h4><p> 输入：<code>sysctl -p</code> 显示如下：</p><pre class="line-numbers language-bash"><code class="language-bash">net.ipv4.icmp_echo_ignore_broadcasts <span class="token operator">=</span> 1net.ipv4.conf.all.rp_filter <span class="token operator">=</span> 1fs.file-max <span class="token operator">=</span> 6815744fs.aio-max-nr <span class="token operator">=</span> 1048576kernel.shmall <span class="token operator">=</span> 2097152kernel.shmmax <span class="token operator">=</span> 2147483648kernel.shmmni <span class="token operator">=</span> 4096kernel.sem <span class="token operator">=</span> 250 32000 100 128net.ipv4.ip_local_port_range <span class="token operator">=</span> 9000 65500net.core.rmem_default <span class="token operator">=</span> 4194304net.core.rmem_max <span class="token operator">=</span> 4194304net.core.wmem_default <span class="token operator">=</span> 262144net.core.wmem_max <span class="token operator">=</span> 1048576<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编辑-etc-profile"><a href="#编辑-etc-profile" class="headerlink" title="编辑 /etc/profile"></a>编辑 /etc/profile</h4><p>输入命令：<code>vi /etc/profile</code>，按i键进入编辑模式，将下列内容加入该文件。</p><p>if [ $USER = “oracle” ]; then</p><p>if [ $SHELL = “/bin/ksh” ]; then</p><p>ulimit -p 16384</p><p>ulimit -n 65536</p><p>else</p><p>ulimit -u 16384 -n 65536</p><p>fi</p><p>fi</p><h4 id="创建相关用户和组，作为软件安装和支持组的拥有者。"><a href="#创建相关用户和组，作为软件安装和支持组的拥有者。" class="headerlink" title="创建相关用户和组，作为软件安装和支持组的拥有者。"></a>创建相关用户和组，作为软件安装和支持组的拥有者。</h4><p>创建Oracle用户和密码,输入命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">useradd</span> -g oinstall -g dba -m oracle<span class="token function">passwd</span> oracle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建数据库软件目录和数据文件存放目录"><a href="#创建数据库软件目录和数据文件存放目录" class="headerlink" title="创建数据库软件目录和数据文件存放目录"></a>创建数据库软件目录和数据文件存放目录</h4><p>目录的位置，根据自己的情况来定，注意磁盘空间即可，这里我把其放到oracle用户下,例如：</p><p>输入命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> /home/oracle/app<span class="token function">mkdir</span> /home/oracle/app/oracle<span class="token function">mkdir</span> /home/oracle/app/oradata<span class="token function">mkdir</span> /home/oracle/app/oracle/product<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更改目录属主为Oracle用户所有"><a href="#更改目录属主为Oracle用户所有" class="headerlink" title="更改目录属主为Oracle用户所有"></a>更改目录属主为Oracle用户所有</h4><p>输入命令：</p><p><code>chown -R oracle:oinstall /home/oracle/app</code></p><h4 id="配置oracle用户的环境变量"><a href="#配置oracle用户的环境变量" class="headerlink" title="配置oracle用户的环境变量"></a>配置oracle用户的环境变量</h4><p>首先，切换到新创建的oracle用户下,</p><p>输入：<code>su – oracle</code> ，然后直接输入 ： <code>vi .bash_profile</code></p><p>按i编辑 .bash_profile,进入编辑模式，增加以下内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> ORACLE_BASE<span class="token operator">=</span>/home/oracle/app<span class="token function">export</span> ORACLE_HOME<span class="token operator">=</span><span class="token variable">$ORACLE_BASE</span>/oracle/product/11.2.0/dbhome_1<span class="token function">export</span> ORACLE_SID<span class="token operator">=</span>orcl<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$HOME</span>/bin:<span class="token variable">$ORACLE_HOME</span>/bin<span class="token function">export</span> LD_LIBRARY_PATH<span class="token operator">=</span><span class="token variable">$ORACLE_HOME</span>/lib:/usr/lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>当上述系统要求操作全部完成后，注销系统，在图形界面以Oracle用户登陆。首先将下载的Oracle安装包复制到linux中，用SSH其他ftp工具拷贝。</p><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><p>打开一个终端，运行unzip命令解压oracle安装文件，如：</p><p>输入命令：</p><pre class="line-numbers language-bash"><code class="language-bash">unzip linux.x64_11gR2_database_1of2.zipunzip linux.x64_11gR2_database_2of2.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入命令：<br><code>cd database</code></p><h4 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h4><p>输入命令：<code>./runInstaller</code></p><blockquote><p>注意事项：<br>./runInstaller -jreLoc jdk路径 ———解决弹框显示不全<br>exprot LANG=en_US 解决安装界面显示为方框<br>exprot DISPLAY=:0.0   不行就到root下设置然后输入命令xhost+ 解决图形界面不弹出问题</p></blockquote><p>输入dbca命令可打开创建数据库实例的窗口</p><p>定位jdk安装路径<br>which java<br>假设输出为：/usr/bin/java<br> ls -lrt /usr/bin/java<br>假设输出为：lrwxrwxrwx. 1 root root 22 Aug 17 15:12 /usr/bin/java -&gt; /etc/alternatives/java<br>ls -lrt /etc/alternatives/java<br>假设输出为：<br>lrwxrwxrwx. 1 root root 46 Aug 17 15:12 /etc/alternatives/java -&gt; /usr/lib/jvm/jre-1.7.0-openjdk.x86_64/bin/java<br>jdk安装路径即为：/usr/lib/jvm/jre-1.7.0-openjdk.x86_64</p><p><a href="http://jingyan.baidu.com/article/60ccbceb0c374864cab1973f.html" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装前准备&quot;&gt;&lt;a href=&quot;#安装前准备&quot; class=&quot;headerlink&quot; title=&quot;安装前准备&quot;&gt;&lt;/a&gt;安装前准备&lt;/h3&gt;&lt;h4 id=&quot;修改用户的SHELL的限制，修改-etc-security-limits-conf文件&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Linux" scheme="https://taffyblog.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>汇编学习(四)--位运算之四则运算</title>
    <link href="https://taffyblog.github.io/2017/05/24/bitoperator/"/>
    <id>https://taffyblog.github.io/2017/05/24/bitoperator/</id>
    <published>2017-05-24T08:57:13.000Z</published>
    <updated>2022-03-08T07:51:05.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="位运算之运算符"><a href="#位运算之运算符" class="headerlink" title="位运算之运算符"></a>位运算之运算符</h3><ul><li><p>&amp; 与</p></li><li><p>| 或</p></li><li><p>^ 异或</p></li><li><p>~ 非</p></li><li><p>&lt;&lt; 左移</p></li><li><p>>> 右移</p></li></ul><h5 id="与运算符"><a href="#与运算符" class="headerlink" title="与运算符"></a>与运算符</h5><p>假设对两个·二进制数做与运算如下:</p><p>0&amp;0=0</p><p>0&amp;1=0</p><p>1&amp;0=0</p><p>1&amp;1=1</p><p>即两个操作数都为1时结果才为1，否则为0</p><h5 id="或运算符"><a href="#或运算符" class="headerlink" title="或运算符"></a>或运算符</h5><p>假设对两个二进制数做或运算如下:</p><p>0|0=0</p><p>0|1=1</p><p>1|0=1</p><p>1|1=1</p><p>即两个操作数只要有一个为1则结果为1。</p><h5 id="异或运算符"><a href="#异或运算符" class="headerlink" title="异或运算符"></a>异或运算符</h5><p>假设对两个二进制数做异或运算如下:</p><p>0^0=0</p><p>0^1=1</p><p>1^0=1</p><p>1^1=0</p><p>即两个操作数不相同时结果为1，否则为0。</p><h5 id="非运算符"><a href="#非运算符" class="headerlink" title="非运算符"></a>非运算符</h5><p>只有一个操作数，即取当前操作数的反码。参考<a href="https://TaffyBlog.github.io/">有符号数和无符号数</a></p><h5 id="左移和右移运算符"><a href="#左移和右移运算符" class="headerlink" title="左移和右移运算符"></a>左移和右移运算符</h5><p>右：</p><p>位右移运算将整个数按位右移若干位，右移后空出的部分补0。比如：8位的二进制数 01100101 将其右移3位，结果是00001100。</p><p>左：</p><p>位左移运算将整个数按位左移若干位，左移后空出的部分补0。比如：8位的二进制数01100101),将其左移3位，结果是00101000。</p><h3 id="加法运算"><a href="#加法运算" class="headerlink" title="加法运算"></a>加法运算</h3><h5 id="加法运算的原理"><a href="#加法运算的原理" class="headerlink" title="加法运算的原理"></a>加法运算的原理</h5><p>假设两个数num1、num2，求num1+num2，步骤如下：</p><ol><li>异或运算，num1^num2</li><li>用与运算判断是否有进位，num1&amp;num2。</li><li>如果第二步得到的结果为0，则num1+num2=num1^num2得到结果;如果第二步得到的结果不为0，将第二步得到的结果向左移一位(num1&amp;num2)&lt;&lt;1。</li><li>将第一步得到的结果与第三步得到的结果进行或异运算并判断是否有进位。</li><li>循环至第三步，直至没有进位为止。</li></ol><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num2 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//进行异或运算</span>        sum <span class="token operator">=</span> num1 <span class="token operator">^</span> num2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用与运算判断是否有进位，与运算的结果为0则没有进位。然后向左移一位。</span>        num2 <span class="token operator">=</span> <span class="token punctuation">(</span>num1 <span class="token operator">&amp;</span> num2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将异或运算结果给第一个操作数进行进位后的运算</span>        num1 <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>num2 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="减法运算"><a href="#减法运算" class="headerlink" title="减法运算"></a>减法运算</h3><h5 id="减法运算的原理"><a href="#减法运算的原理" class="headerlink" title="减法运算的原理"></a>减法运算的原理</h5><p>减法和运算可以转化为加法，如:4-5=4+(-5);<br>减法就是将减数取补码，然后和被减数相加。</p><h5 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h5><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">int</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token function">Add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> <span class="token function">Complement</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Complement</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//取补码,,反码加1</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">~</span>num<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="乘法运算"><a href="#乘法运算" class="headerlink" title="乘法运算"></a>乘法运算</h3><h5 id="乘法运算的原理"><a href="#乘法运算的原理" class="headerlink" title="乘法运算的原理"></a>乘法运算的原理</h5><p>乘法就是将乘数写成(2^0)*k0 + (2^1)*k1 + (2 ^2)*k2 + … + (2^31)*k31，其中ki为0或1，然后利用位运算和加法就可以了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//正数乘法运算  </span><span class="token keyword">int</span> <span class="token function">Pos_Multiply</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>              ans <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>          a <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          b <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> ans<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//乘法运算  </span><span class="token keyword">int</span> <span class="token function">Multiply</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">iszero</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">iszero</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">ispos</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ispos</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token function">Pos_Multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isneg</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isneg</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token function">Pos_Multiply</span><span class="token punctuation">(</span> <span class="token function">negtive</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">negtive</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token function">negtive</span><span class="token punctuation">(</span> <span class="token function">Pos_Multiply</span><span class="token punctuation">(</span> <span class="token function">negtive</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">negtive</span><span class="token punctuation">(</span> <span class="token function">Pos_Multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">negtive</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h3><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>除法就是由乘法的过程逆推，依次减掉（如果x够减）y^(2^31),y^(2^30),…y^8,y^4,y^2,y^1。减掉相应数量的y就在结果加上相应的数量。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">Pos_Div</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//比较x是否大于y的(1&lt;&lt;i)次方，避免将x与(y&lt;&lt;i)比较，因为不确定y的(1&lt;&lt;i)次方是否溢出  </span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">>></span>i<span class="token punctuation">)</span><span class="token operator">>=</span>y<span class="token punctuation">)</span>          <span class="token punctuation">{</span>              ans<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>              x<span class="token operator">-=</span><span class="token punctuation">(</span>y<span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> ans<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://blog.csdn.net/hackbuteer1/article/details/7390093" target="_blank" rel="noopener">代码参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;位运算之运算符&quot;&gt;&lt;a href=&quot;#位运算之运算符&quot; class=&quot;headerlink&quot; title=&quot;位运算之运算符&quot;&gt;&lt;/a&gt;位运算之运算符&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;amp; 与&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;| 或&lt;/p&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="汇编学习" scheme="https://taffyblog.github.io/categories/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>汇编学习(三)--有符号数和无符号数</title>
    <link href="https://taffyblog.github.io/2017/05/24/symbolnumber/"/>
    <id>https://taffyblog.github.io/2017/05/24/symbolnumber/</id>
    <published>2017-05-24T03:16:13.000Z</published>
    <updated>2022-03-08T07:51:05.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h3><ol><li>原码：如果机器字长为n，那么一个数的原码就是用一个n位的二进制数表示。<br>反码：正数与原码相同，负数在原码的基础上，符号位为1其他位按位取反(就是0变1，1变0)就可以了。<br>补码：正数与原码相同，负数补码就是在反码的基础上按照正常的加法运算加1，位数不够时左边补1。</li></ol><p>补充：<br>   移码：不管正负数，只要将其补码的符号位取反即可。</p><h3 id="编码规则"><a href="#编码规则" class="headerlink" title="编码规则"></a>编码规则</h3><ul><li>原码： 有符号数中最高位为符号位：正数为0，负数为1。剩下的n-1位表示该数的绝对值。无符号数则n位都表示该数，因此无符号数无负数。</li><li>反码：<pre><code> 正数：与原码相同 负数：符号位为1，其余位对原码取反。</code></pre></li><li>补码：<pre><code>正数：与原码相同负数：符号位为1，然后取反码加1。</code></pre></li></ul><blockquote><p>PS：正数的原、反、补码都一样。</p></blockquote><p>例如：<br>求-5的原码、反码、补码，长度为字节：</p><p>原码：  10000101     85</p><p>反码：  11111010     FA</p><p>补码：  11111011     FB</p><blockquote><p>在计算机中的存储方式：<br>正数原码存储，负数补码存储。</p></blockquote><h3 id="表示范围"><a href="#表示范围" class="headerlink" title="表示范围"></a>表示范围</h3><p>假设数据的宽度为1Byte(8 Bit),可用下图表示：<br><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/bit8.png" alt="image"></p><p>假设数据的宽度为1Doubleword(32 Bit),可用下图表示：<br><img src="https://github.com/TaffyBlog/TaffyBlog.github.io/raw/master/images/doubleword.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原码、反码、补码&quot;&gt;&lt;a href=&quot;#原码、反码、补码&quot; class=&quot;headerlink&quot; title=&quot;原码、反码、补码&quot;&gt;&lt;/a&gt;原码、反码、补码&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;原码：如果机器字长为n，那么一个数的原码就是用一个n位的二进制数表示。&lt;br&gt;反
      
    
    </summary>
    
      <category term="汇编学习" scheme="https://taffyblog.github.io/categories/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>汇编学习(二)--数据宽度</title>
    <link href="https://taffyblog.github.io/2017/05/24/datawidth/"/>
    <id>https://taffyblog.github.io/2017/05/24/datawidth/</id>
    <published>2017-05-24T03:03:13.000Z</published>
    <updated>2022-03-08T07:51:05.902Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>数学上的数字，是没有大小限制的，可以无限大，但在计算机中，由于硬件的制约，数据都是有长度限制的(数据宽度)，超过最大宽度的数据将会被丢弃。</p><h3 id="计算机中常见的数据宽度"><a href="#计算机中常见的数据宽度" class="headerlink" title="计算机中常见的数据宽度"></a>计算机中常见的数据宽度</h3><ol><li>位(Bit) :数0据存储的最小单元。<br>字节(Byte):1Byte=8Bit。<br>字(Word):1Word=16Bit。<br>双字(Doubleword): 1Doubleword=32bit。</li></ol><h3 id="储值范围"><a href="#储值范围" class="headerlink" title="储值范围"></a>储值范围</h3><p>字节:0 ~ 0xFF 即：0000 0000 ~ 1111 1111<br>字：0 ~ 0xFFFF 即: 0000 0000 0000 0000 ~ 1111 1111 1111 1111<br>双字: 0 ~ 0xFFFFFFFF</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;数学上的数字，是没有大小限制的，可以无限大，但在计算机中，由于硬件的制约，数据都是有长度限制的(数据宽度)，超过最大宽度的数据将会被丢弃。&lt;
      
    
    </summary>
    
      <category term="汇编学习" scheme="https://taffyblog.github.io/categories/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>汇编学习(一)--简单理解进制</title>
    <link href="https://taffyblog.github.io/2017/05/24/jinzhi/"/>
    <id>https://taffyblog.github.io/2017/05/24/jinzhi/</id>
    <published>2017-05-24T02:44:13.000Z</published>
    <updated>2022-03-08T07:51:05.912Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进制的定义"><a href="#进制的定义" class="headerlink" title="进制的定义"></a>进制的定义</h3><p>八进制的定义:由八个符号组成，分别是0 1 2 3 4 5 6 7 逢八进一。<br>十进制的定义：由十个符号组成，分别是0 1 2 3 4 5 6 7 8 9 逢十进一。<br>N进制的定义:由N个符号组成，逢N进一。</p><p>十进制的定义不一定就是0~9这几个数字，可以是任意的十个符号，满足逢十进一即可。</p><h3 id="二进制和十六进制"><a href="#二进制和十六进制" class="headerlink" title="二进制和十六进制"></a>二进制和十六进制</h3><p>二进制是计算机使用的进制，计算机是需要用电的，电路只有两种状态：1 真（通电）、 0 假（未通电），计算机中储存的任何文件、接收的任何指令都是由0和1组成的。</p><p>由于使用二进制书写太麻烦，便使用十六进制作为二进制的简写形式：</p><p>0        0000<br>1        0001<br>2        0010<br>3        0011<br>4        0100<br>5        0101<br>6        0110<br>7        0111<br>8        1000<br>9       1001<br>A        1010<br>B        1011<br>C        1100<br>D        1101<br>E        1110<br>F     1111</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;进制的定义&quot;&gt;&lt;a href=&quot;#进制的定义&quot; class=&quot;headerlink&quot; title=&quot;进制的定义&quot;&gt;&lt;/a&gt;进制的定义&lt;/h3&gt;&lt;p&gt;八进制的定义:由八个符号组成，分别是0 1 2 3 4 5 6 7 逢八进一。&lt;br&gt;十进制的定义：由十个符号组成，
      
    
    </summary>
    
      <category term="汇编学习" scheme="https://taffyblog.github.io/categories/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>简单使用NLog进行日志记录</title>
    <link href="https://taffyblog.github.io/2017/05/22/nlog/"/>
    <id>https://taffyblog.github.io/2017/05/22/nlog/</id>
    <published>2017-05-22T09:37:16.000Z</published>
    <updated>2022-03-08T07:51:05.932Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/dflying/archive/2006/12/15/593158.html" target="_blank" rel="noopener">参考链接</a></p><h3 id="NLog安装"><a href="#NLog安装" class="headerlink" title="NLog安装"></a>NLog安装</h3><p>在Visual Studio的NuGet包管理器中搜索NLog安装即可</p><h3 id="NLog配置"><a href="#NLog配置" class="headerlink" title="NLog配置"></a>NLog配置</h3><p>NLog的配置文件可以嵌入到应用程序配置文件中也可单独配置成NLog.config或NLog.dll.nlog<br>此处介绍NLog.config配置,示例如下:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nlog</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.nlog-project.org/schemas/NLog.xsd<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name">autoReload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targets</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- Log in a separate thread, possibly queueing up tomessages. When the queue overflows, discard any        extra messages--></span>      <span class="token comment" spellcheck="true">&lt;!-- write logs to file --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AsyncWrapper<span class="token punctuation">"</span></span> <span class="token attr-name">queueLimit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5000<span class="token punctuation">"</span></span> <span class="token attr-name">overflowAction</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Discard<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name"><span class="token namespace">xsi:</span>type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>File<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${basedir}/logs/${shortdate}.log<span class="token punctuation">"</span></span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${longdate} ${level:uppercase<span class="token punctuation">=</span>true} ${message} ${stacktrace}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- write log message to database --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name"><span class="token namespace">xsi:</span>type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Database<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>infomation<span class="token punctuation">"</span></span>                        <span class="token attr-name">dbProvider</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Pomelo.Data.MyCat<span class="token punctuation">"</span></span>                        <span class="token attr-name">useTransactions</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>              <span class="token attr-name">connectionString</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>server<span class="token punctuation">=</span>localhost;port<span class="token punctuation">=</span>3306;database<span class="token punctuation">=</span>TESTDB;uid<span class="token punctuation">=</span>root;pwd<span class="token punctuation">=</span>123456;<span class="token punctuation">"</span></span>              <span class="token attr-name">keepConnection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commandText</span><span class="token punctuation">></span></span>          INSERT INTO Log_Table(testDate,Level,Conent,StackMessage) VALUES(@time_stamp, @level, @message, @stacktrace);        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commandText</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parameter</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@time_stamp<span class="token punctuation">"</span></span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${date}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parameter</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@level<span class="token punctuation">"</span></span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${level:uppercase<span class="token punctuation">=</span>true}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parameter</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@message<span class="token punctuation">"</span></span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${message}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parameter</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@stacktrace<span class="token punctuation">"</span></span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${stacktrace}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--write log message to Visual Studio Output--></span>      <span class="token comment" spellcheck="true">&lt;!--&lt;target name="debugger" xsi:type="Debugger" layout="NLog: ${date:format=HH\:mm\:ss} | ${level:uppercase=true:padding=-5} | ${message}" />--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targets</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rules</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--TRACE,DEBUG,INFO,WARN,ERROR,FATAL--></span>      <span class="token comment" spellcheck="true">&lt;!--&lt;logger name="*" minlevel="Trace" writeTo="debugger" />--></span>      <span class="token comment" spellcheck="true">&lt;!--INFO,WARN,ERROR,FATAL--></span>      &lt;logger name ="*" minlevel="TRACE" writeTo="file"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">minlevel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Warn<span class="token punctuation">"</span></span> <span class="token attr-name">writeTo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>infomation<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!--DEBUG,INFO,WARN,ERROR,FATAL--></span>      <span class="token comment" spellcheck="true">&lt;!--&lt;logger name="*" minlevel="Debug" writeTo="file" />--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rules</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nlog</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置元素"><a href="#配置元素" class="headerlink" title="配置元素"></a>配置元素</h5><ul><li><targets> - 定义日志的目标/输出</targets></li><li><rules> - 定义日志的路由规则</rules></li><li><extensions> - 从*.dll加载NLog扩展</extensions></li><li><include> - 导入外部配置文件</include></li><li><variable> - 为配置变量赋值</variable></li></ul><p>此示例中，重要之处在两个targets配置节，和rules配置节。</p><h5 id="日志输出类型"><a href="#日志输出类型" class="headerlink" title="日志输出类型"></a>日志输出类型</h5><ul><li>Console        输出到控制台</li><li>Debugger     输出到</li><li>File        输出到文件</li><li>Mail        输出为邮件发送</li><li>Network        输出到网络地址</li><li>Database        输出到数据库</li><li>AsyncWrapper   异步操作</li></ul><h5 id="路由规则"><a href="#路由规则" class="headerlink" title="路由规则"></a>路由规则</h5><p><rules>区域定义了日志的路由规则。实际上它是一个简单的路由表，对每一个日志源/记录者的名称和记录等级的组合，定义了一个日志写入目标列表。 表中的规则是被顺序处理的。每当遇到匹配的规则时，日志信息就会被送到规则中定义的一个或多个目标去。如果一个规则被标识为最后一个，那么其后的规则都不会被执行。</rules></p><p>每一个路由表项就是一个<logger>元素，它的可以接受的属性有：</logger></p><ul><li>name - 日志源/记录者的名字 (允许使用通配符*)</li><li>minlevel - 该规则所匹配日志范围的最低级别</li><li>maxlevel - 该规则所匹配日志范围的最高级别</li><li>level - 该规则所匹配的单一日志级别</li><li>levels - 该规则所匹配的一系列日志级别，由逗号分隔。</li><li>writeTo - 规则匹配时日志应该被写入的一系列目标，由逗号分隔。</li><li>final - 标记当前规则为最后一个规则。其后的规则即时匹配也不会被运行。</li></ul><h5 id="上下文信息"><a href="#上下文信息" class="headerlink" title="上下文信息"></a>上下文信息</h5><p>NLog最棒的功能之一就是使用布局（layouts）的能力。布局由被一个美元符号$加左大括弧“${”和一个右大括弧“}”为标记所包围的文本所组成。这个标记也就是所谓的“布局生成器（layout renderers），我们可以用它来把一些上下文相关的信息插入到日志信息中。布局可以应用在许多地方，比如可以被用在控制输出到屏幕或写入文件信息的格式，也可以用在控制文件名。接下来我们会更多的了解布局的强大。</p><p>假设我们希望每个输出到控制台的信息都包含一些这些信息：</p><p>当前的日期和时间<br>产生日志信息的类和方法的名字<br>日志等级<br>日志内容<br>利用Layout来实现很简单：</p><p><target name="c" xsi:type="Console" layout="${longdate} ${callsite} ${level} ${message}"><br>或者我们可以把每一个日志记录者生成的日志信息输出到一个单独的文件里：</target></p><p><target name="f" xsi:type="File" filename="${logger}.txt"><br>这里我们看到fileName属性的值被设置为布局生成器${logger}，从而使每一条日志信息被写到一个以日志生成者名字命名的一个文件里。上面这个例子将生成如下一系列文件：</target></p><ol><li>Name.Space.Class1.txt</li><li>Name.Space.Class2.txt</li><li>Name.Space.Class3.txt<br>Other.Name.Space.Class1.txt<br>Other.Name.Space.Class2.txt<br>Other.Name.Space.Class3.txt<br>…<br>有一个常见需求是能够用日期信息来区分日志文件。如果使用${shortdate}布局生成器，这简直太容易了：</li></ol><p><target name="f" xsi:type="File" filename="${shortdate}.txt"><br>那么可以给每一个职员生成一个日志文件吗？答案就是${windows-identity}布局生成器：</target></p><p><target name="f" xsi:type="File" filename="${windows-identity:domain=false}.txt"><br>这样我们就能够给每一个职员生成一个日志文件了：</target></p><ol><li>Administrator.txt<br>MaryManager.txt<br>EdwardEmployee.txt<br>…<br>更复杂的场景也能做到。下面这个例子说明了如何为每个人每天生成一个日志文件。每天的日志文件存放在不同的文件夹里：</li></ol><p><target name="f" xsi:type="File" filename="${shortdate}/${windows-identity:domain=false}.txt"><br>这将创建如下文件：</target></p><ol><li>2006-01-01/Administrator.txt<br>2006-01-01/MaryManager.txt<br>2006-01-01/EdwardEmployee.txt<br>2006-01-02/Administrator.txt<br>2006-01-02/MaryManager.txt<br>2006-01-02/EdwardEmployee.txt<br>…</li></ol><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/dflying/archive/2006/12/15/593158.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;NLog安装&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="随笔" scheme="https://taffyblog.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式(一)--简单工厂模式</title>
    <link href="https://taffyblog.github.io/2017/05/21/easyfactory/"/>
    <id>https://taffyblog.github.io/2017/05/21/easyfactory/</id>
    <published>2017-05-21T03:41:13.000Z</published>
    <updated>2022-03-08T07:51:05.905Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单代码示例"><a href="#简单代码示例" class="headerlink" title="简单代码示例"></a>简单代码示例</h4><p>接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRace</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>具体类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orc</span> <span class="token operator">:</span> IRace<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"this is Orc Show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token operator">:</span>IRace<span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"this is Human Show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>工厂类:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IRace <span class="token function">CreateInstence</span><span class="token punctuation">(</span>RaceType race<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>race<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">case</span> RaceType<span class="token punctuation">.</span>Human<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Human</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> RaceType<span class="token punctuation">.</span>Orc<span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Orc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> RaceType    <span class="token punctuation">{</span>        Human<span class="token punctuation">,</span>        Orc    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>优点：<br>工厂类是整个模式的关键.包含了必要的逻辑判断,根据外界给定的信息,决定究竟应该创建哪个具体类的对象.通过使用工厂类,外界可以从直接创建具体产品对象的尴尬局面摆脱出来,仅仅需要负责“消费”对象就可以了。而不必管这些对象究竟如何创建及如何组织的．明确了各自的职责和权利，有利于整个软件体系结构的优化。–上端解耦</p><p>缺点：</p><p>由于工厂类集中了所有实例的创建逻辑，违反了高内聚责任分配原则，将全部创建逻辑集中到了一个工厂类中；它所能创建的类只能是事先考虑到的，如果需要添加新的类，则就需要改变工厂类了。<br>当系统中的具体产品类不断增多时候，可能会出现要求工厂类根据不同条件创建不同实例的需求．这种对条件的判断和对具体产品类型的判断交错在一起，很难避免模块功能的蔓延，对系统的维护和扩展非常不利；<br>严重违反单一职责原则</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>工厂类负责创建的对象比较少；</li><li>客户只知道传入工厂类的参数，对于如何创建对象（逻辑）不关心；</li><li>由于简单工厂很容易违反高内聚责任分配原则，因此一般只在很简单的情况下应用</li></ul><h4 id="简单工厂改进"><a href="#简单工厂改进" class="headerlink" title="简单工厂改进"></a>简单工厂改进</h4><p>具体类和接口和前面的一致,添加配置文件:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appSettings</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RaceTypeConfig<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ConsoleApplication2,ConsoleApplication2.Human<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appSettings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>工厂类做如下改动:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> string RaceTypeConfig <span class="token operator">=</span> ConfigurationManager<span class="token punctuation">.</span>AppSettings<span class="token punctuation">[</span><span class="token string">"RaceTypeConfig"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> IRace <span class="token function">CreateInstence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string<span class="token punctuation">[</span><span class="token punctuation">]</span> Races <span class="token operator">=</span> RaceTypeConfig<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//CreateInstance</span>    <span class="token comment" spellcheck="true">// 摘要:</span>    <span class="token comment" spellcheck="true">//     使用命名的程序集和默认构造函数，创建名称已指定的类型的实例。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 参数:</span>    <span class="token comment" spellcheck="true">//   assemblyName:</span>    <span class="token comment" spellcheck="true">//     将在其中查找名为 typeName 的类型的程序集的名称。有关更多信息，请参见“备注”一节。如果 assemblyName 为 null，则搜索正在执行的程序集。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">//   typeName:</span>    <span class="token comment" spellcheck="true">//     首选类型的完全限定名。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 返回结果:</span>    <span class="token comment" spellcheck="true">//     要访问新创建的实例则必须解包的句柄。</span>    <span class="token keyword">return</span>  <span class="token punctuation">(</span>IRace<span class="token punctuation">)</span><span class="token punctuation">(</span>Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>Races<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Races<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此便做到了程序的可配置和可扩展，扩展只需要得到dll修改配置文件即可;<br>当然，这样做肯定也有缺点，但一种设计模式只是针对一类问题而存在。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;简单代码示例&quot;&gt;&lt;a href=&quot;#简单代码示例&quot; class=&quot;headerlink&quot; title=&quot;简单代码示例&quot;&gt;&lt;/a&gt;简单代码示例&lt;/h4&gt;&lt;p&gt;接口：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot;&gt;&lt;code 
      
    
    </summary>
    
      <category term="设计模式" scheme="https://taffyblog.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式(二)--工厂方法模式</title>
    <link href="https://taffyblog.github.io/2017/05/21/factorymethod/"/>
    <id>https://taffyblog.github.io/2017/05/21/factorymethod/</id>
    <published>2017-05-21T03:41:13.000Z</published>
    <updated>2022-03-08T07:51:05.906Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/zxj159/archive/2013/11/07/3412378.html" target="_blank" rel="noopener">参考文章链接</a></p><h3 id="工厂方法模式概述"><a href="#工厂方法模式概述" class="headerlink" title="工厂方法模式概述"></a>工厂方法模式概述</h3><p>工厂方法模式：定义一个用于创建的接口，让子类决定让那一个类实例化。<br>工厂方法模式让一个类的实例化延迟到其子类。工厂方法模式又简称为工厂模式，又可称作虚拟构造器模式或多态工厂模式。<br>工厂模式是一种类创造型模式。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>什么时候需要工厂模式呢？工厂方法模式可以让一个类的实例化延迟到其子类，就是一开始你还不适合立刻就创建该对象，你还需要一些资源或其它准备工作。整个系统的运行不像单个程序那样，系统需要很多资源和多方面的协同工作。</p><p>如果一个类需要创建某个接口的对象，但是又不知道具体的实现，这种情况可以选用工厂方法模式，把创建对象的工作延迟到子类中去实现。</p><p>如果一个类本身希望由它的子类来创建所需的对象的时候，应该使用工厂方法模式。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>示例代码为假想的两个数据库访问层的封装，结构如下：</p><ol><li><p>抽象工厂（Creator）：这个抽象类（或接口）声明一个创建对象的工厂方法，用来返回一个Product类型的对象。</p></li><li><p>具体工厂（ConcreteCreator)：重定义工厂方法，返回一个具体的ConcreteProduct实例。</p></li><li><p>抽象产品（Product)：定义工厂方法所创建的对象。</p></li><li><p>具体产品（ConcreteProduct): 具体产品，继承自Product抽象类。</p></li></ol><ol><li>数据库接口IDatabase  即(抽象产品（Product)):<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span>  <span class="token class-name">IDatabase</span><span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">ShowDatabaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>各数据库具体类  即（具体产品（ConcreteProduct)）：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OracleDatabase</span><span class="token operator">:</span>IDatabase<span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ShowDatabaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Oracle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MysqlDatabase</span> <span class="token operator">:</span> IDatabase<span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ShowDatabaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Mysql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数据库工厂接口  即（抽象工厂（Creator））：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span>  <span class="token class-name">DatabaseFactory</span><span class="token punctuation">{</span> IDatabase <span class="token function">CreateDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>各数据库的工厂类  即（具体工厂（ConcreteCreator)）：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OracleFactory</span><span class="token operator">:</span>DatabaseFactory<span class="token punctuation">{</span> <span class="token keyword">public</span> IDatabase <span class="token function">CreateDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OracleDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MysqlFactory</span> <span class="token operator">:</span> DatabaseFactory<span class="token punctuation">{</span> <span class="token keyword">public</span> IDatabase <span class="token function">CreateDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MysqlDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>调用示例：</p><pre class="line-numbers language-java"><code class="language-java">DatabaseFactory factory<span class="token punctuation">;</span>IDatabase database<span class="token punctuation">;</span>factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>database <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>database<span class="token punctuation">.</span><span class="token function">ShowDatabaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-bash"><code class="language-bash">Mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>模式功能</p><p>工厂方法模式主要功能是让父类不知道具体实现情况下，完成自身的功能调用；而具体的实现则延迟到子类来实现。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点</p><ol><li>‘可以在不知具体实现的情况下编程，工厂方法模式可以让你在实现功能时，如果需要某个产品对象，只需要使用产品的接口即可，而无需关系具体的实现。选择具体的实现的任务延迟到子类去完成。’</li><li>更容易扩展对象的新版本<br>只需要新加入一个子类来提供新的工厂方法实现，然后在客户端使用这个新的子类即可。</li><li>连接平行的类层次结构</li></ol><p>缺点</p><ol><li><p>每增加一个产品就需要加一个产品工厂的类，增加了额外的开发量。</p></li><li><p>工厂方法模式实现时，客户端需要决定实例化哪个工厂来实现对具体产品的构建，选择判断依然存在，也就是说，工厂方法模式将简单工厂的逻辑判断交给客户端去处理。</p></li></ol><h3 id="简单工厂vs工厂方法"><a href="#简单工厂vs工厂方法" class="headerlink" title="简单工厂vs工厂方法"></a>简单工厂vs工厂方法</h3><p>工厂方法模式与简单工厂模式非常类似，简单工厂模式在工厂类中选择实例化哪个具体类，工厂方法模式则是在客户端来判断。</p><p>简单工厂模式的最大优点在于工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，对于客户端来说，去除了与具体产品的依赖。</p><p>工厂方法模式实现时，客户端需要决定实例化哪一个工厂来实现运算类，选择判断的问题还是存在的，也就是说，工厂方法把简单工厂的内部逻辑判断移动到了客户端代码来进行。如果要加功能，简单工厂是改工厂类的，而现在是改客户端。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/zxj159/archive/2013/11/07/3412378.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文章链接&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;工厂方法模式概述&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://taffyblog.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="创建型设计模式" scheme="https://taffyblog.github.io/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>对象序列化</title>
    <link href="https://taffyblog.github.io/2017/05/20/serializable/"/>
    <id>https://taffyblog.github.io/2017/05/20/serializable/</id>
    <published>2017-05-20T11:05:13.000Z</published>
    <updated>2022-03-08T07:51:05.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序列化的含义"><a href="#序列化的含义" class="headerlink" title="序列化的含义"></a>序列化的含义</h2><p>序列化是将对象状态转换为可保持或传输的格式的过程。与序列化相对的是反序列化，它将流转换为对象。这两个过程结合起来，可以轻松地存储和传输数据。例如，可以序列化一个对象，然后使用 HTTP 通过 Internet 在客户端和服务器之间传输该对象。反之，反序列化根据流重新构造对象。此外还可以将对象序列化后保存到本地，再次运行的时候可以从本地文件中“恢复”对象到序列化之前的状态。</p><h2 id="XML序列化"><a href="#XML序列化" class="headerlink" title="XML序列化"></a>XML序列化</h2><h3 id="XML序列化-1"><a href="#XML序列化-1" class="headerlink" title="XML序列化"></a>XML序列化</h3><p>将对象通过二进制流序列化为XML文件，对象必须指定<code>Serializable</code>特性：</p><pre class="line-numbers language-java"><code class="language-java">Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">using</span> <span class="token punctuation">(</span>FileStream stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span><span class="token string">"person.xml"</span><span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Create<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    XmlSerializer xs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlSerializer</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xs<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>序列化得到的XML文档如下:</p><pre class="line-numbers language-XML"><code class="language-XML"><?xml version="1.0"?><Person xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">  <Name>张三</Name>  <Sex>男</Sex>  <Age>25</Age></Person><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="序列化数组"><a href="#序列化数组" class="headerlink" title="序列化数组"></a>序列化数组</h3><p>对数组进行序列化时，必须对需要序列化的对象及其属性设置几个特性：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义序列化根节点名为people</span> <span class="token punctuation">[</span><span class="token function">XmlRoot</span><span class="token punctuation">(</span><span class="token string">"people"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"游泳"</span><span class="token punctuation">,</span><span class="token string">"跑步"</span><span class="token punctuation">,</span><span class="token string">"打球"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>XmlAttribute<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//将Name作为people的一个属性</span>    <span class="token keyword">public</span> string Name <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>XmlIgnore<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//不序列化Sex</span>    <span class="token keyword">public</span> string Sex <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Age <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//序列化数组为hobbys节点，元素为hobby节点</span>    <span class="token punctuation">[</span><span class="token function">XmlArray</span><span class="token punctuation">(</span><span class="token string">"hobbys"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">XmlArrayItem</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> Hobby <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方式和前面一样，得到的Xml文档如下:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>people</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsd</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema<span class="token punctuation">"</span></span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Age</span><span class="token punctuation">></span></span>25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Age</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hobbys</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hobby</span><span class="token punctuation">></span></span>游泳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hobby</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hobby</span><span class="token punctuation">></span></span>跑步<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hobby</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hobby</span><span class="token punctuation">></span></span>打球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hobby</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hobbys</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>people</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>xml序列化的方式只能保存public的字段和可读写的属性，对于private等类型的字段不能进行序列化</p></blockquote><h3 id="XML反序列化"><a href="#XML反序列化" class="headerlink" title="XML反序列化"></a>XML反序列化</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token function">using</span> <span class="token punctuation">(</span>FileStream stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span><span class="token string">"person.xml"</span><span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    XmlSerializer xs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlSerializer</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    var person<span class="token operator">=</span>  xs<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span> as Person<span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Name :{0} , sex : {1} , age: {2}"</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>Sex<span class="token punctuation">,</span> person<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下:</p><pre class="line-numbers language-bash"><code class="language-bash">Name :张三 , sex <span class="token keyword">:</span> 男 , age: 25<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="soap序列化"><a href="#soap序列化" class="headerlink" title="soap序列化"></a>soap序列化</h2><h3 id="soap序列化-1"><a href="#soap序列化-1" class="headerlink" title="soap序列化"></a>soap序列化</h3><p>将对象通过二进制流序列化为soap文档，要序列化的对象必须指定<code>Serializable</code>特性：</p><pre class="line-numbers language-java"><code class="language-java">Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">using</span> <span class="token punctuation">(</span>FileStream stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span><span class="token string">"soap.xml"</span><span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Create<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SoapFormatter sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sf<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到的soap文档如下:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">SOAP-ENV:</span>Envelope</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsd</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>SOAP-ENC</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.xmlsoap.org/soap/encoding/<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>SOAP-ENV</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.xmlsoap.org/soap/envelope/<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>clr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/soap/encoding/clr/1.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">SOAP-ENV:</span>encoding</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">http</span><span class="token punctuation">:</span>//schemas<span class="token number">.</span>xmlsoap<span class="token number">.</span>org/soap/encoding/</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">SOAP-ENV:</span>Body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">a1:</span>Person</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ref-1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>a1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/clr/nsassem/ConsoleApplication2/ConsoleApplication2%2C%20Version%3D1.0.0.0%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3Dnull<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>_x003C_Name_x003E_k__BackingField</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ref-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>_x003C_Name_x003E_k__BackingField</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>_x003C_Sex_x003E_k__BackingField</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ref-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>_x003C_Sex_x003E_k__BackingField</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>_x003C_Age_x003E_k__BackingField</span><span class="token punctuation">></span></span>25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>_x003C_Age_x003E_k__BackingField</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">a1:</span>Person</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">SOAP-ENV:</span>Body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">SOAP-ENV:</span>Envelope</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用之前需要应用System.Runtime.Serialization.Formatters.Soap.dll（.net自带的）</p></blockquote><p>简单对象访问协议（Simple Object Access Protocol，SOAP），是一种轻量的、简单的、基于XML的协议，它被设计成在WEB上交换结构化的和固化的信息。 SOAP 可以和现存的许多因特网协议和格式结合使用，包括超文本传输协议（HTTP），简单邮件传输协议（SMTP），多用途网际邮件扩充协议（MIME）。它还支持从消息系统到远程过程调用（RPC）等大量的应用程序。SOAP使用基于XML的数据结构和超文本传输协议(HTTP)的组合定义了一个标准的方法来使用Internet上各种不同操作环境中的分布式对象。<br>调用反序列化之后的结果和XML相同</p><h2 id="二进制序列化"><a href="#二进制序列化" class="headerlink" title="二进制序列化"></a>二进制序列化</h2><h3 id="二进制序列化-1"><a href="#二进制序列化-1" class="headerlink" title="二进制序列化"></a>二进制序列化</h3><p>将对象通过二进制流序列化为文件，要使用二进制序列化的对象必须指定<code>Serializable</code>特性：</p><p><strong>Person实体类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> string Name <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> string Sex <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Age <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">try</span>   <span class="token punctuation">{</span>     Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">using</span> <span class="token punctuation">(</span>FileStream stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span><span class="token string">"person.obj"</span><span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Create<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">// 摘要:</span>        <span class="token comment" spellcheck="true">//     以二进制格式将对象或整个连接对象图形序列化和反序列化。</span>        BinaryFormatter binary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        binary<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"序列化已成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token keyword">throw</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>BinaryFormatter</code>位于<code>System.Runtime.Serialization.Formatters.Binary</code>命名空间,序列化文件格式自定。</p></blockquote><h3 id="二进制反序列化"><a href="#二进制反序列化" class="headerlink" title="二进制反序列化"></a>二进制反序列化</h3><p>使用BinaryFormatter下的<code>Deserialize</code>方法进行反序列化:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span>    <span class="token punctuation">{</span>      <span class="token function">using</span> <span class="token punctuation">(</span>FileStream stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span><span class="token string">"person.obj"</span><span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        BinaryFormatter binary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var person<span class="token operator">=</span>  binary<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span> as Person<span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Name :{0} , sex : {1} , age: {2}"</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>person<span class="token punctuation">.</span>Sex<span class="token punctuation">,</span>person<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">throw</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下:</p><p>Name :张三 , sex : 男 , age: 25</p><h2 id="json序列化"><a href="#json序列化" class="headerlink" title="json序列化"></a>json序列化</h2><h3 id="json序列化-1"><a href="#json序列化-1" class="headerlink" title="json序列化"></a>json序列化</h3><h4 id="使用-net框架自带的方法"><a href="#使用-net框架自带的方法" class="headerlink" title="使用.net框架自带的方法"></a>使用<code>.net</code>框架自带的方法</h4><p>封装的操作帮助类如下:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// json转换成集合</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span><span class="token comment" spellcheck="true">/// &lt;param name="JsonStr">&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> JsonStringToList<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span> string JsonStr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//js操作对象</span>    JavaScriptSerializer Serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaScriptSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>T<span class="token operator">></span> objs <span class="token operator">=</span> Serializer<span class="token punctuation">.</span>Deserialize<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>T<span class="token operator">>></span><span class="token punctuation">(</span>JsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> objs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 对象转换成json</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span><span class="token comment" spellcheck="true">/// &lt;param name="model">&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span><span class="token keyword">public</span> <span class="token keyword">static</span> string ModelToJsonString<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>T model<span class="token punctuation">)</span><span class="token punctuation">{</span>    JavaScriptSerializer serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaScriptSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> serializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// json转换成对象</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span><span class="token comment" spellcheck="true">/// &lt;param name="JsonStr">&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span><span class="token keyword">public</span> <span class="token keyword">static</span> T JsonStringToModel<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>string JsonStr<span class="token punctuation">)</span><span class="token punctuation">{</span>    JavaScriptSerializer Serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaScriptSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    T objs <span class="token operator">=</span> Serializer<span class="token punctuation">.</span>Deserialize<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>JsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> objs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 集合转换成json</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;typeparam name="T">&lt;/typeparam></span><span class="token comment" spellcheck="true">/// &lt;param name="list">&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span><span class="token keyword">public</span> <span class="token keyword">static</span> string ListModelToJsonString<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>IList<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>    JavaScriptSerializer Serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaScriptSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string result <span class="token operator">=</span> Serializer<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>JavaScriptSerializer</code>位于<code>System.Web.Script.Serialization</code>命名空间下。</p><h4 id="使用第三方库Newtonsoft-json"><a href="#使用第三方库Newtonsoft-json" class="headerlink" title="使用第三方库Newtonsoft.json"></a>使用第三方库<code>Newtonsoft.json</code></h4><p>使用框架自带的方法并没有<code>Newtonsoft</code>效率高，所以<code>Newtonsoft</code>的使用更为普遍，支持序列化和反序列化DataTable,DataSet,Entity Framework和NHibernate。</p><ol><li>安装：<br> 在NunGet中搜索安装</li><li><p>简单使用：<br>序列化使用<code>JsonConvert.SerializeObject()</code>方法，反序列化使用<code>JsonConvert.DeserializeObject</code>方法</p><p>更复杂的使用后面再单独做研究。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序列化的含义&quot;&gt;&lt;a href=&quot;#序列化的含义&quot; class=&quot;headerlink&quot; title=&quot;序列化的含义&quot;&gt;&lt;/a&gt;序列化的含义&lt;/h2&gt;&lt;p&gt;序列化是将对象状态转换为可保持或传输的格式的过程。与序列化相对的是反序列化，它将流转换为对象。这两个过程结合
      
    
    </summary>
    
      <category term="C#高级编程" scheme="https://taffyblog.github.io/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="XML" scheme="https://taffyblog.github.io/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>使用DbProviderFactory 打造一个通用的数据访问类库</title>
    <link href="https://taffyblog.github.io/2017/05/19/dbUtility/"/>
    <id>https://taffyblog.github.io/2017/05/19/dbUtility/</id>
    <published>2017-05-19T06:45:15.000Z</published>
    <updated>2022-03-08T07:51:05.903Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://zhoufoxcn.blog.51cto.com/792419/832631/" target="_blank" rel="noopener">原文地址</a></p><h4 id="类库结构"><a href="#类库结构" class="headerlink" title="类库结构"></a>类库结构</h4><p>此类库包括ProviderFactory，EntityReader，DbUtility，ColumnNameAttribute五个类。</p><h4 id="ProviderFactory"><a href="#ProviderFactory" class="headerlink" title="ProviderFactory"></a>ProviderFactory</h4><p>工厂类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 数据库类型枚举</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">public</span> <span class="token keyword">enum</span> DbProviderType <span class="token operator">:</span> <span class="token keyword">byte</span><span class="token punctuation">{</span>    SqlServer<span class="token punctuation">,</span>    MySql<span class="token punctuation">,</span>    SQLite<span class="token punctuation">,</span>    Oracle<span class="token punctuation">,</span>    ODBC<span class="token punctuation">,</span>    OleDb<span class="token punctuation">,</span>    Firebird<span class="token punctuation">,</span>    PostgreSql<span class="token punctuation">,</span>    DB2<span class="token punctuation">,</span>    Informix<span class="token punctuation">,</span>    SqlServerCe<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// DbProviderFactory工厂类</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderFactory</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Dictionary<span class="token operator">&lt;</span>DbProviderType<span class="token punctuation">,</span> string<span class="token operator">></span> providerInvariantNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span>DbProviderType<span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Dictionary<span class="token operator">&lt;</span>DbProviderType<span class="token punctuation">,</span> DbProviderFactory<span class="token operator">></span> providerFactoies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span>DbProviderType<span class="token punctuation">,</span> DbProviderFactory<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token function">ProviderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加载已知的数据库访问类的程序集</span>        providerInvariantNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>DbProviderType<span class="token punctuation">.</span>SqlServer<span class="token punctuation">,</span> <span class="token string">"System.Data.SqlClient"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        providerInvariantNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>DbProviderType<span class="token punctuation">.</span>OleDb<span class="token punctuation">,</span> <span class="token string">"System.Data.OleDb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        providerInvariantNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>DbProviderType<span class="token punctuation">.</span>ODBC<span class="token punctuation">,</span> <span class="token string">"System.Data.ODBC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        providerInvariantNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>DbProviderType<span class="token punctuation">.</span>Oracle<span class="token punctuation">,</span> <span class="token string">"Oracle.DataAccess.Client"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        providerInvariantNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>DbProviderType<span class="token punctuation">.</span>MySql<span class="token punctuation">,</span> <span class="token string">"MySql.Data.MySqlClient"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        providerInvariantNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>DbProviderType<span class="token punctuation">.</span>SQLite<span class="token punctuation">,</span> <span class="token string">"System.Data.SQLite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        providerInvariantNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>DbProviderType<span class="token punctuation">.</span>Firebird<span class="token punctuation">,</span> <span class="token string">"FirebirdSql.Data.Firebird"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        providerInvariantNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>DbProviderType<span class="token punctuation">.</span>PostgreSql<span class="token punctuation">,</span> <span class="token string">"Npgsql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        providerInvariantNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>DbProviderType<span class="token punctuation">.</span>DB2<span class="token punctuation">,</span> <span class="token string">"IBM.Data.DB2.iSeries"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        providerInvariantNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>DbProviderType<span class="token punctuation">.</span>Informix<span class="token punctuation">,</span> <span class="token string">"IBM.Data.Informix"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        providerInvariantNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>DbProviderType<span class="token punctuation">.</span>SqlServerCe<span class="token punctuation">,</span> <span class="token string">"System.Data.SqlServerCe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 获取指定数据库类型对应的程序集名称</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="providerType">数据库类型枚举&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> <span class="token keyword">static</span> string <span class="token function">GetProviderInvariantName</span><span class="token punctuation">(</span>DbProviderType providerType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> providerInvariantNames<span class="token punctuation">[</span>providerType<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 获取指定类型的数据库对应的DbProviderFactory</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="providerType">数据库类型枚举&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DbProviderFactory <span class="token function">GetDbProviderFactory</span><span class="token punctuation">(</span>DbProviderType providerType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果还没有加载，则加载该DbProviderFactory</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>providerFactoies<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>providerType<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            providerFactoies<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>providerType<span class="token punctuation">,</span> <span class="token function">ImportDbProviderFactory</span><span class="token punctuation">(</span>providerType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> providerFactoies<span class="token punctuation">[</span>providerType<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 加载指定数据库类型的DbProviderFactory</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="providerType">数据库类型枚举&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DbProviderFactory <span class="token function">ImportDbProviderFactory</span><span class="token punctuation">(</span>DbProviderType providerType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string providerName <span class="token operator">=</span> providerInvariantNames<span class="token punctuation">[</span>providerType<span class="token punctuation">]</span><span class="token punctuation">;</span>        DbProviderFactory factory <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//从全局程序集中查找</span>            factory <span class="token operator">=</span> DbProviderFactories<span class="token punctuation">.</span><span class="token function">GetFactory</span><span class="token punctuation">(</span>providerName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArgumentException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            factory <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DbUtility"><a href="#DbUtility" class="headerlink" title="DbUtility"></a>DbUtility</h4><p>通用数据库访问类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> sealed <span class="token keyword">class</span> <span class="token class-name">DbUtility</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> string ConnectionString <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">private</span> DbProviderFactory providerFactory<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 构造函数</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="connectionString">数据库连接字符串&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="providerType">数据库类型枚举，参见&lt;paramref name="providerType"/>&lt;/param></span>    <span class="token keyword">public</span> <span class="token function">DbUtility</span><span class="token punctuation">(</span>string connectionString<span class="token punctuation">,</span> DbProviderType providerType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ConnectionString <span class="token operator">=</span> connectionString<span class="token punctuation">;</span>        providerFactory <span class="token operator">=</span> ProviderFactory<span class="token punctuation">.</span><span class="token function">GetDbProviderFactory</span><span class="token punctuation">(</span>providerType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>providerFactory <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token string">"Can't load DbProviderFactory for given value of providerType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>    </span>    <span class="token comment" spellcheck="true">/// 对数据库执行增删改操作，返回受影响的行数。    </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="sql">要执行的增删改的SQL语句&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="parameters">执行增删改语句所需要的参数&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>   </span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">ExecuteNonQuery</span><span class="token punctuation">(</span>string sql<span class="token punctuation">,</span> IList<span class="token operator">&lt;</span>DbParameter<span class="token operator">></span> parameters<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">ExecuteNonQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> CommandType<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>    </span>    <span class="token comment" spellcheck="true">/// 对数据库执行增删改操作，返回受影响的行数。    </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="sql">要执行的增删改的SQL语句&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="parameters">执行增删改语句所需要的参数&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="commandType">执行的SQL语句的类型&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">ExecuteNonQuery</span><span class="token punctuation">(</span>string sql<span class="token punctuation">,</span> IList<span class="token operator">&lt;</span>DbParameter<span class="token operator">></span> parameters<span class="token punctuation">,</span> CommandType commandType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">using</span> <span class="token punctuation">(</span>DbCommand command <span class="token operator">=</span> <span class="token function">CreateDbCommand</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> commandType<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            command<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> affectedRows <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">ExecuteNonQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            command<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> affectedRows<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>    </span>    <span class="token comment" spellcheck="true">/// 执行一个查询语句，返回一个关联的DataReader实例    </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="sql">要执行的查询语句&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="parameters">执行SQL查询语句所需要的参数&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">public</span> DbDataReader <span class="token function">ExecuteReader</span><span class="token punctuation">(</span>string sql<span class="token punctuation">,</span> IList<span class="token operator">&lt;</span>DbParameter<span class="token operator">></span> parameters<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">ExecuteReader</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> CommandType<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>    </span>    <span class="token comment" spellcheck="true">/// 执行一个查询语句，返回一个关联的DataReader实例    </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="sql">要执行的查询语句&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="parameters">执行SQL查询语句所需要的参数&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="commandType">执行的SQL语句的类型&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">public</span> DbDataReader <span class="token function">ExecuteReader</span><span class="token punctuation">(</span>string sql<span class="token punctuation">,</span> IList<span class="token operator">&lt;</span>DbParameter<span class="token operator">></span> parameters<span class="token punctuation">,</span> CommandType commandType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        DbCommand command <span class="token operator">=</span> <span class="token function">CreateDbCommand</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> commandType<span class="token punctuation">)</span><span class="token punctuation">;</span>        command<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> command<span class="token punctuation">.</span><span class="token function">ExecuteReader</span><span class="token punctuation">(</span>CommandBehavior<span class="token punctuation">.</span>CloseConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>    </span>    <span class="token comment" spellcheck="true">/// 执行一个查询语句，返回一个包含查询结果的DataTable    </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="sql">要执行的查询语句&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="parameters">执行SQL查询语句所需要的参数&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> DataTable <span class="token function">ExecuteDataTable</span><span class="token punctuation">(</span>string sql<span class="token punctuation">,</span> IList<span class="token operator">&lt;</span>DbParameter<span class="token operator">></span> parameters<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">ExecuteDataTable</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> CommandType<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>    </span>    <span class="token comment" spellcheck="true">/// 执行一个查询语句，返回一个包含查询结果的DataTable    </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="sql">要执行的查询语句&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="parameters">执行SQL查询语句所需要的参数&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="commandType">执行的SQL语句的类型&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> DataTable <span class="token function">ExecuteDataTable</span><span class="token punctuation">(</span>string sql<span class="token punctuation">,</span> IList<span class="token operator">&lt;</span>DbParameter<span class="token operator">></span> parameters<span class="token punctuation">,</span> CommandType commandType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">using</span> <span class="token punctuation">(</span>DbCommand command <span class="token operator">=</span> <span class="token function">CreateDbCommand</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> commandType<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">using</span> <span class="token punctuation">(</span>DbDataAdapter adapter <span class="token operator">=</span> providerFactory<span class="token punctuation">.</span><span class="token function">CreateDataAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                adapter<span class="token punctuation">.</span>SelectCommand <span class="token operator">=</span> command<span class="token punctuation">;</span>                DataTable data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                adapter<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> data<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>    </span>    <span class="token comment" spellcheck="true">/// 执行一个查询语句，返回查询结果的第一行第一列    </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="sql">要执行的查询语句&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="parameters">执行SQL查询语句所需要的参数&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>    </span>    <span class="token keyword">public</span> Object <span class="token function">ExecuteScalar</span><span class="token punctuation">(</span>string sql<span class="token punctuation">,</span> IList<span class="token operator">&lt;</span>DbParameter<span class="token operator">></span> parameters<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">ExecuteScalar</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> CommandType<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>    </span>    <span class="token comment" spellcheck="true">/// 执行一个查询语句，返回查询结果的第一行第一列    </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="sql">要执行的查询语句&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="parameters">执行SQL查询语句所需要的参数&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="commandType">执行的SQL语句的类型&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>    </span>    <span class="token keyword">public</span> Object <span class="token function">ExecuteScalar</span><span class="token punctuation">(</span>string sql<span class="token punctuation">,</span> IList<span class="token operator">&lt;</span>DbParameter<span class="token operator">></span> parameters<span class="token punctuation">,</span> CommandType commandType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">using</span> <span class="token punctuation">(</span>DbCommand command <span class="token operator">=</span> <span class="token function">CreateDbCommand</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> commandType<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            command<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            object result <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">ExecuteScalar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            command<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 查询多个实体集合</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">返回的实体集合类型&lt;/typeparam></span>    <span class="token comment" spellcheck="true">/// &lt;param name="sql">要执行的查询语句&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="parameters">执行SQL查询语句所需要的参数&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> QueryForList<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>string sql<span class="token punctuation">,</span> IList<span class="token operator">&lt;</span>DbParameter<span class="token operator">></span> parameters<span class="token punctuation">)</span> where T <span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> QueryForList<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> CommandType<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">///  查询多个实体集合</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">返回的实体集合类型&lt;/typeparam></span>    <span class="token comment" spellcheck="true">/// &lt;param name="sql">要执行的查询语句&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="parameters">执行SQL查询语句所需要的参数&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="commandType">执行的SQL语句的类型&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> QueryForList<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>string sql<span class="token punctuation">,</span> IList<span class="token operator">&lt;</span>DbParameter<span class="token operator">></span> parameters<span class="token punctuation">,</span> CommandType commandType<span class="token punctuation">)</span> where T <span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        DataTable data <span class="token operator">=</span> <span class="token function">ExecuteDataTable</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> commandType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EntityReader<span class="token punctuation">.</span>GetEntities<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 查询单个实体</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">返回的实体集合类型&lt;/typeparam></span>    <span class="token comment" spellcheck="true">/// &lt;param name="sql">要执行的查询语句&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="parameters">执行SQL查询语句所需要的参数&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> T QueryForObject<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>string sql<span class="token punctuation">,</span> IList<span class="token operator">&lt;</span>DbParameter<span class="token operator">></span> parameters<span class="token punctuation">)</span> where T <span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> QueryForObject<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> CommandType<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 查询单个实体</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">返回的实体集合类型&lt;/typeparam></span>    <span class="token comment" spellcheck="true">/// &lt;param name="sql">要执行的查询语句&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="parameters">执行SQL查询语句所需要的参数&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="commandType">执行的SQL语句的类型&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> T QueryForObject<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>string sql<span class="token punctuation">,</span> IList<span class="token operator">&lt;</span>DbParameter<span class="token operator">></span> parameters<span class="token punctuation">,</span> CommandType commandType<span class="token punctuation">)</span> where T <span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> QueryForList<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> commandType<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> DbParameter <span class="token function">CreateDbParameter</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">CreateDbParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> ParameterDirection<span class="token punctuation">.</span>Input<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> DbParameter <span class="token function">CreateDbParameter</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> ParameterDirection parameterDirection<span class="token punctuation">,</span> object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        DbParameter parameter <span class="token operator">=</span> providerFactory<span class="token punctuation">.</span><span class="token function">CreateParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parameter<span class="token punctuation">.</span>ParameterName <span class="token operator">=</span> name<span class="token punctuation">;</span>        parameter<span class="token punctuation">.</span>Value <span class="token operator">=</span> value<span class="token punctuation">;</span>        parameter<span class="token punctuation">.</span>Direction <span class="token operator">=</span> parameterDirection<span class="token punctuation">;</span>        <span class="token keyword">return</span> parameter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 创建一个DbCommand对象</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="sql">要执行的查询语句&lt;/param>    </span>    <span class="token comment" spellcheck="true">/// &lt;param name="parameters">执行SQL查询语句所需要的参数&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="commandType">执行的SQL语句的类型&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">private</span> DbCommand <span class="token function">CreateDbCommand</span><span class="token punctuation">(</span>string sql<span class="token punctuation">,</span> IList<span class="token operator">&lt;</span>DbParameter<span class="token operator">></span> parameters<span class="token punctuation">,</span> CommandType commandType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        DbConnection connection <span class="token operator">=</span> providerFactory<span class="token punctuation">.</span><span class="token function">CreateConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DbCommand command <span class="token operator">=</span> providerFactory<span class="token punctuation">.</span><span class="token function">CreateCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span>ConnectionString <span class="token operator">=</span> ConnectionString<span class="token punctuation">;</span>        command<span class="token punctuation">.</span>CommandText <span class="token operator">=</span> sql<span class="token punctuation">;</span>        command<span class="token punctuation">.</span>CommandType <span class="token operator">=</span> commandType<span class="token punctuation">;</span>        command<span class="token punctuation">.</span>Connection <span class="token operator">=</span> connection<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>parameters <span class="token operator">==</span> null <span class="token operator">||</span> parameters<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">foreach</span> <span class="token punctuation">(</span>DbParameter parameter in parameters<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                command<span class="token punctuation">.</span>Parameters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> command<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="EntityReader"><a href="#EntityReader" class="headerlink" title="EntityReader"></a>EntityReader</h4><p>实体转换器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> sealed <span class="token keyword">class</span> <span class="token class-name">EntityReader</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> BindingFlags BindingFlag <span class="token operator">=</span> BindingFlags<span class="token punctuation">.</span>Public <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>NonPublic <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>Instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将类型与该类型所有的可写且未被忽略属性之间建立映射  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Dictionary<span class="token operator">&lt;</span>Type<span class="token punctuation">,</span> Dictionary<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> PropertyInfo<span class="token operator">>></span> propertyMappings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span>Type<span class="token punctuation">,</span> Dictionary<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> PropertyInfo<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存储Nullable&lt;T>与T的对应关系  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Dictionary<span class="token operator">&lt;</span>Type<span class="token punctuation">,</span> Type<span class="token operator">></span> genericTypeMappings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span>Type<span class="token punctuation">,</span> Type<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token function">EntityReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Byte<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>Byte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>SByte<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>SByte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Char<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Boolean<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Guid<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>Guid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Int16<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>Int16<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>UInt16<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>UInt16<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Int32<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>Int32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Int32<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>Int32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>UInt32<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>UInt32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Int64<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>Int64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>UInt64<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>UInt64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Single<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>Single<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Single<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>Single<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Double<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>Double<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Double<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>Double<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>DateTime<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericTypeMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将DataTable中的所有数据转换成List&amp;gt;T&amp;lt;集合  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">DataTable中每条数据可以转换的数据类型&lt;/typeparam>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="dataTable">包含有可以转换成数据类型T的数据集合&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> GetEntities<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>DataTable dataTable<span class="token punctuation">)</span> where T <span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dataTable <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"dataTable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果T的类型满足以下条件：字符串、ValueType或者是Nullable&lt;ValueType>  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">typeof</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span>IsValueType<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetSimpleEntities<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>dataTable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetComplexEntities<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>dataTable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将DbDataReader中的所有数据转换成List&amp;gt;T&amp;lt;集合  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">DbDataReader中每条数据可以转换的数据类型&lt;/typeparam>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="dataTable">包含有可以转换成数据类型T的DbDataReader实例&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> GetEntities<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>DbDataReader reader<span class="token punctuation">)</span> where T <span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>reader <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"reader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果T的类型满足以下条件：字符串、ValueType或者是Nullable&lt;ValueType>  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">typeof</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span>IsValueType<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetSimpleEntities<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetComplexEntities<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 从DataTable中将每一行的第一列转换成T类型的数据  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">要转换的目标数据类型&lt;/typeparam>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="dataTable">包含有可以转换成数据类型T的数据集合&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> GetSimpleEntities<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>DataTable dataTable<span class="token punctuation">)</span> where T <span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">foreach</span> <span class="token punctuation">(</span>DataRow row in dataTable<span class="token punctuation">.</span>Rows<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token function">GetValueFromObject</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="targetType">要转换的目标数据类型&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetValueFromObject</span><span class="token punctuation">(</span>object value<span class="token punctuation">,</span> Type targetType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType <span class="token operator">==</span> <span class="token function">typeof</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果要将value转换成string类型  </span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">GetString</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType<span class="token punctuation">.</span>IsGenericType<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果目标类型是泛型  </span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">GetGenericValueFromObject</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token comment" spellcheck="true">//如果是基本数据类型（包括数值类型、枚举和Guid）  </span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">GetNonGenericValueFromObject</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 从DataTable中读取复杂数据类型集合  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">要转换的目标数据类型&lt;/typeparam>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="dataTable">包含有可以转换成数据类型T的数据集合&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> GetComplexEntities<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>DataTable dataTable<span class="token punctuation">)</span> where T <span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>propertyMappings<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">GenerateTypePropertyMapping</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dictionary<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> PropertyInfo<span class="token operator">></span> properties <span class="token operator">=</span> propertyMappings<span class="token punctuation">[</span><span class="token function">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Dictionary&lt;string, int> propertyColumnOrdinalMapping = GetPropertyColumnIndexMapping(dataTable.Columns, properties);  </span>        T t<span class="token punctuation">;</span>        <span class="token function">foreach</span> <span class="token punctuation">(</span>DataRow row in dataTable<span class="token punctuation">.</span>Rows<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">foreach</span> <span class="token punctuation">(</span>KeyValuePair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> PropertyInfo<span class="token operator">></span> item in properties<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//int ordinal = -1;  </span>                <span class="token comment" spellcheck="true">//if (propertyColumnOrdinalMapping.TryGetValue(item.Key, out ordinal))  </span>                <span class="token comment" spellcheck="true">//{  </span>                <span class="token comment" spellcheck="true">//    item.Value.SetValue(t, GetValueFromObject(row[ordinal], item.Value.PropertyType), null);  </span>                <span class="token comment" spellcheck="true">//}  </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dataTable<span class="token punctuation">.</span>Columns<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    item<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token function">GetValueFromObject</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span>item<span class="token punctuation">.</span>Key<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>PropertyType<span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 从DbDataReader的实例中读取复杂的数据类型  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">要转换的目标类&lt;/typeparam>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="reader">DbDataReader的实例&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> GetComplexEntities<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>DbDataReader reader<span class="token punctuation">)</span> where T <span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>propertyMappings<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//检查当前是否已经有该类与类的可写属性之间的映射  </span>        <span class="token punctuation">{</span>            <span class="token function">GenerateTypePropertyMapping</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dictionary<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> PropertyInfo<span class="token operator">></span> properties <span class="token operator">=</span> propertyMappings<span class="token punctuation">[</span><span class="token function">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Dictionary&lt;string, int> propertyColumnOrdinalMapping = GetPropertyColumnIndexMapping(reader, properties);  </span>        T t<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">foreach</span> <span class="token punctuation">(</span>KeyValuePair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> PropertyInfo<span class="token operator">></span> item in properties<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//int ordinal = -1;  </span>                <span class="token comment" spellcheck="true">//if (propertyColumnOrdinalMapping.TryGetValue(item.Key, out ordinal))  </span>                <span class="token comment" spellcheck="true">//{  </span>                <span class="token comment" spellcheck="true">//    item.Value.SetValue(t, GetValueFromObject(reader[ordinal], item.Value.PropertyType), null);  </span>                <span class="token comment" spellcheck="true">//}  </span>                item<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token function">GetValueFromObject</span><span class="token punctuation">(</span>reader<span class="token punctuation">[</span>item<span class="token punctuation">.</span>Key<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>PropertyType<span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 从DbDataReader的实例中读取简单数据类型（String,ValueType)  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;typeparam name="T">目标数据类型&lt;/typeparam>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="reader">DbDataReader的实例&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> GetSimpleEntities<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>DbDataReader reader<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token function">GetValueFromObject</span><span class="token punctuation">(</span>reader<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将Object转换成字符串类型  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">object类型的实例&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetString</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="targetType">&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetEnum</span><span class="token punctuation">(</span>object value<span class="token punctuation">,</span> Type targetType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Enum<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetBoolean</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is Boolean<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">byte</span> byteValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token function">GetByte</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>byteValue <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetByte</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is Byte<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">byte</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetSByte</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is SByte<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> SByte<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetChar</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is Char<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> Char<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetGuid</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is Guid<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Guid</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetInt16</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is Int16<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> Int16<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetUInt16</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is UInt16<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> UInt16<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetInt32</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is Int32<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> Int32<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetUInt32</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is UInt32<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> UInt32<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetInt64</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is Int64<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> Int64<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetUInt64</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is UInt64<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> UInt64<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetSingle</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is Single<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> Single<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetDouble</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is Double<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> Double<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetDecimal</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is Decimal<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> Decimal<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetDateTime</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is DateTime<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定枚举类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetTimeSpan</span><span class="token punctuation">(</span>object value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value is TimeSpan<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> TimeSpan<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将Object类型数据转换成对应的可空数值类型表示  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="targetType">可空数值类型&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetGenericValueFromObject</span><span class="token punctuation">(</span>object value<span class="token punctuation">,</span> Type targetType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> DBNull<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取可空数值类型对应的基本数值类型，如int?->int,long?->long  </span>            Type nonGenericType <span class="token operator">=</span> genericTypeMappings<span class="token punctuation">[</span>targetType<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">GetNonGenericValueFromObject</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> nonGenericType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 将指定的 Object 的值转换为指定类型的值。  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="value">实现 IConvertible 接口的 Object，或者为 null&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="targetType">目标对象的类型&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object <span class="token function">GetNonGenericValueFromObject</span><span class="token punctuation">(</span>object value<span class="token punctuation">,</span> Type targetType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType<span class="token punctuation">.</span>IsEnum<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//因为  </span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">GetEnum</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>targetType<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"Byte"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetByte</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"SByte"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetSByte</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"Char"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetChar</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"Boolean"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetBoolean</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"Guid"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetGuid</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"Int16"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetInt16</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"UInt16"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetUInt16</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"Int32"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetInt32</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"UInt32"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetUInt32</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"Int64"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetInt64</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"UInt64"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetUInt64</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"Single"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetSingle</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"Double"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetDouble</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"Decimal"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetDecimal</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"DateTime"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetDateTime</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"TimeSpan"</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token function">GetTimeSpan</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 获取该类型中属性与数据库字段的对应关系映射  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="type">&lt;/param>  </span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">GenerateTypePropertyMapping</span><span class="token punctuation">(</span>Type type<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            PropertyInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> properties <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span>BindingFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>            Dictionary<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> PropertyInfo<span class="token operator">></span> propertyColumnMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> PropertyInfo<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>            string description <span class="token operator">=</span> string<span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>            Attribute<span class="token punctuation">[</span><span class="token punctuation">]</span> attibutes <span class="token operator">=</span> null<span class="token punctuation">;</span>            string columnName <span class="token operator">=</span> string<span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>            bool ignorable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token function">foreach</span> <span class="token punctuation">(</span>PropertyInfo p in properties<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ignorable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                columnName <span class="token operator">=</span> string<span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>                attibutes <span class="token operator">=</span> Attribute<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">foreach</span> <span class="token punctuation">(</span>Attribute attribute in attibutes<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//检查是否设置了ColumnName属性  </span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>attribute<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">typeof</span><span class="token punctuation">(</span>ColumnNameAttribute<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        columnName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ColumnNameAttribute<span class="token punctuation">)</span>attribute<span class="token punctuation">)</span><span class="token punctuation">.</span>ColumnName<span class="token punctuation">;</span>                        ignorable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ColumnNameAttribute<span class="token punctuation">)</span>attribute<span class="token punctuation">)</span><span class="token punctuation">.</span>Ignorable<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//如果该属性是可读并且未被忽略的，则有可能在实例化该属性对应的类时用得上  </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>CanWrite <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ignorable<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果没有设置ColumnName属性，则直接将该属性名作为数据库字段的映射  </span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        columnName <span class="token operator">=</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    propertyColumnMapping<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>columnName<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            propertyMappings<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> propertyColumnMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ColumnNameAttribute"><a href="#ColumnNameAttribute" class="headerlink" title="ColumnNameAttribute"></a>ColumnNameAttribute</h4><p>给实体类的属性设置名称，用作实体转换，如不设置则为定义的属性名</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Property<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColumnNameAttribute</span> <span class="token operator">:</span> Attribute<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 类属性对应的列名  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token keyword">public</span> string ColumnName <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 指示在从DataTable或者DbDataReader中读取类的属性时是否可以忽略这个属性  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token keyword">public</span> bool Ignorable <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 构造函数  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="columnName">类属性对应的列名&lt;/param>  </span>    <span class="token keyword">public</span> <span class="token function">ColumnNameAttribute</span><span class="token punctuation">(</span>string columnName<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ColumnName <span class="token operator">=</span> columnName<span class="token punctuation">;</span>        Ignorable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 构造函数  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="ignorable">指示在从DataTable或者DbDataReader中读取类的属性时是否可以忽略这个属性&lt;/param>  </span>    <span class="token keyword">public</span> <span class="token function">ColumnNameAttribute</span><span class="token punctuation">(</span>bool ignorable<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Ignorable <span class="token operator">=</span> ignorable<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary>  </span>    <span class="token comment" spellcheck="true">/// 构造函数  </span>    <span class="token comment" spellcheck="true">/// &lt;/summary>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="columnName">类属性对应的列名&lt;/param>  </span>    <span class="token comment" spellcheck="true">/// &lt;param name="ignorable">指示在从DataTable或者DbDataReader中读取类的属性时是否可以忽略这个属性&lt;/param>  </span>    <span class="token keyword">public</span> <span class="token function">ColumnNameAttribute</span><span class="token punctuation">(</span>string columnName<span class="token punctuation">,</span> bool ignorable<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ColumnName <span class="token operator">=</span> columnName<span class="token punctuation">;</span>        Ignorable <span class="token operator">=</span> ignorable<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://zhoufoxcn.blog.51cto.com/792419/832631/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;类库结构&quot;&gt;&lt;a href=&quot;#类库结构&quot; class=
      
    
    </summary>
    
      <category term="随笔" scheme="https://taffyblog.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="数据库" scheme="https://taffyblog.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>字符串加密类</title>
    <link href="https://taffyblog.github.io/2017/05/18/str-encryption/"/>
    <id>https://taffyblog.github.io/2017/05/18/str-encryption/</id>
    <published>2017-05-18T08:42:15.000Z</published>
    <updated>2022-03-08T07:51:05.937Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-java"><code class="language-java">using System<span class="token punctuation">.</span>Security<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Cryptography<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>Web<span class="token punctuation">;</span>using System<span class="token punctuation">.</span>IO<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Encryption</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ＭＤ5　　　　　　　不区分大小写的</span>    <span class="token comment" spellcheck="true">//type 类型，16位还是32位，16位就是取32位的第8到16位</span>    <span class="token keyword">public</span> string <span class="token function">DoMd5Encode</span><span class="token punctuation">(</span>string pwd<span class="token punctuation">,</span>string type<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        MD5CryptoServiceProvider md5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MD5CryptoServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> output <span class="token operator">=</span> md5<span class="token punctuation">.</span><span class="token function">ComputeHash</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">"16"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> BitConverter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">else</span>            <span class="token keyword">return</span> BitConverter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 对字符串进行SHA1加密</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="strIN">需要加密的字符串&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>密文&lt;/returns></span>    <span class="token keyword">public</span> string <span class="token function">SHA1_Encrypt</span><span class="token punctuation">(</span>string Source_String<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> StrRes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>Source_String<span class="token punctuation">)</span><span class="token punctuation">;</span>        HashAlgorithm iSHA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SHA1CryptoServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StrRes <span class="token operator">=</span> iSHA<span class="token punctuation">.</span><span class="token function">ComputeHash</span><span class="token punctuation">(</span>StrRes<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder EnText <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">foreach</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> iByte in StrRes<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            EnText<span class="token punctuation">.</span><span class="token function">AppendFormat</span><span class="token punctuation">(</span><span class="token string">"{0:x2}"</span><span class="token punctuation">,</span> iByte<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> EnText<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// SHA256加密，不可逆转</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="str">string str:被加密的字符串&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>返回加密后的字符串&lt;/returns></span>    <span class="token keyword">private</span> string <span class="token function">SHA256Encrypt</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Cryptography<span class="token punctuation">.</span>SHA256 s256 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Cryptography<span class="token punctuation">.</span>SHA256Managed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byte1<span class="token punctuation">;</span>        byte1 <span class="token operator">=</span> s256<span class="token punctuation">.</span><span class="token function">ComputeHash</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s256<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>byte1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// SHA384加密，不可逆转</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="str">string str:被加密的字符串&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>返回加密后的字符串&lt;/returns></span>    <span class="token keyword">private</span> string <span class="token function">SHA384Encrypt</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Cryptography<span class="token punctuation">.</span>SHA384 s384 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Cryptography<span class="token punctuation">.</span>SHA384Managed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byte1<span class="token punctuation">;</span>        byte1 <span class="token operator">=</span> s384<span class="token punctuation">.</span><span class="token function">ComputeHash</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s384<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>byte1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// SHA512加密，不可逆转</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="str">string str:被加密的字符串&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>返回加密后的字符串&lt;/returns></span>    <span class="token keyword">private</span> string <span class="token function">SHA512Encrypt</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Cryptography<span class="token punctuation">.</span>SHA512 s512 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Cryptography<span class="token punctuation">.</span>SHA512Managed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byte1<span class="token punctuation">;</span>        byte1 <span class="token operator">=</span> s512<span class="token punctuation">.</span><span class="token function">ComputeHash</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s512<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>byte1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//默认密钥向量</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> Keys <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x12</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// DES加密字符串</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="encryptString">待加密的字符串&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="encryptKey">加密密钥,要求为8位&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>加密成功返回加密后的字符串，失败返回源串&lt;/returns></span>    <span class="token keyword">public</span> string <span class="token function">EncryptDES</span><span class="token punctuation">(</span>string encryptString<span class="token punctuation">,</span> string encryptKey<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rgbKey <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>encryptKey<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rgbIV <span class="token operator">=</span> Keys<span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputByteArray <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>encryptString<span class="token punctuation">)</span><span class="token punctuation">;</span>            DESCryptoServiceProvider dCSP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESCryptoServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MemoryStream mStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            CryptoStream cStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CryptoStream</span><span class="token punctuation">(</span>mStream<span class="token punctuation">,</span> dCSP<span class="token punctuation">.</span><span class="token function">CreateEncryptor</span><span class="token punctuation">(</span>rgbKey<span class="token punctuation">,</span> rgbIV<span class="token punctuation">)</span><span class="token punctuation">,</span> CryptoStreamMode<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">;</span>            cStream<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>inputByteArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inputByteArray<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>            cStream<span class="token punctuation">.</span><span class="token function">FlushFinalBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>mStream<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> encryptString<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// DES解密字符串</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="decryptString">待解密的字符串&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="decryptKey">解密密钥,要求为8位,和加密密钥相同&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>解密成功返回解密后的字符串，失败返源串&lt;/returns></span>    <span class="token keyword">public</span> string <span class="token function">DecryptDES</span><span class="token punctuation">(</span>string decryptString<span class="token punctuation">,</span> string decryptKey<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rgbKey <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>decryptKey<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rgbIV <span class="token operator">=</span> Keys<span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputByteArray <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>decryptString<span class="token punctuation">)</span><span class="token punctuation">;</span>            DESCryptoServiceProvider DCSP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DESCryptoServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MemoryStream mStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            CryptoStream cStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CryptoStream</span><span class="token punctuation">(</span>mStream<span class="token punctuation">,</span> DCSP<span class="token punctuation">.</span><span class="token function">CreateDecryptor</span><span class="token punctuation">(</span>rgbKey<span class="token punctuation">,</span> rgbIV<span class="token punctuation">)</span><span class="token punctuation">,</span> CryptoStreamMode<span class="token punctuation">.</span>Write<span class="token punctuation">)</span><span class="token punctuation">;</span>            cStream<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>inputByteArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inputByteArray<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>            cStream<span class="token punctuation">.</span><span class="token function">FlushFinalBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>mStream<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> decryptString<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre class=&quot;line-numbers language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;using System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Security&lt;span class=
      
    
    </summary>
    
      <category term="随笔" scheme="https://taffyblog.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="加密" scheme="https://taffyblog.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>C#中的泛型</title>
    <link href="https://taffyblog.github.io/2017/05/18/fanxing/"/>
    <id>https://taffyblog.github.io/2017/05/18/fanxing/</id>
    <published>2017-05-18T02:42:10.000Z</published>
    <updated>2022-03-08T07:51:05.907Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>msdn中对泛型的描述：<br>泛型是 2.0 版 C# 语言和公共语言运行库 (CLR) 中的一个新功能。泛型将类型参数的概念引入 .NET Framework，类型参数使得设计如下类和方法成为可能：这些类和方法将一个或多个类型的指定推迟到客户端代码声明并实例化该类或方法的时候。例如，通过使用泛型类型参数 T，您可以编写其他客户端代码能够使用的单个类，而不致引入运行时强制转换或装箱操作的成本或风险。</p><blockquote><p>泛型是.NET Framework中定义的一个语法糖，将类型指定推迟。</p></blockquote><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>在类名后指定<t>即可创建泛型类，示例代码如下:</t></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> T _t<span class="token punctuation">;</span>    <span class="token keyword">public</span> T t    <span class="token punctuation">{</span>        get        <span class="token punctuation">{</span>            <span class="token keyword">return</span> _t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        set        <span class="token punctuation">{</span>            _t <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> string Name    <span class="token punctuation">{</span>        get        <span class="token punctuation">{</span>            <span class="token keyword">return</span> _name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        set        <span class="token punctuation">{</span>            _name <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> string _name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"My name is "</span><span class="token operator">+</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在控制台应用程序中调用:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//示例1</span>    Person<span class="token operator">&lt;</span>Program<span class="token operator">></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>Program<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//示例2</span>    Person<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> pi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pi<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Taffy"</span><span class="token punctuation">;</span>    pi<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下:</p><pre class="line-numbers language-bash"><code class="language-bash">ConsoleApplication2.ProgramMy name is TomSystem.Int32My name is Taffy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在声明泛型类型T的时候，并不一定要叫T,且可以有多个泛型类型，如：</p><pre class="line-numbers language-java"><code class="language-java">Person<span class="token operator">&lt;</span>T t<span class="token punctuation">,</span>TFirst tf<span class="token punctuation">,</span>TLast tl<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>和泛型类类似</p><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>给方法名后指定<t>则可以声明泛型方法，可在参数、方法体和返回值中使用，<br>示例如下：</t></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> string Name    <span class="token punctuation">{</span>        get        <span class="token punctuation">{</span>            <span class="token keyword">return</span> _name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        set        <span class="token punctuation">{</span>            _name <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> string _name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> Show<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"My name is {0}\n"</span><span class="token punctuation">,</span> _name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方式:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>Show<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下:</p><pre class="line-numbers language-bash"><code class="language-bash">System.Int3252My name is Tom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="泛型委托"><a href="#泛型委托" class="headerlink" title="泛型委托"></a>泛型委托</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> delegate <span class="token keyword">void</span> Del<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>T item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>Del<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> m2 <span class="token operator">=</span> Notify<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>预定义的泛型委托:Func,Action,Predicate, 其中，Func一般用来处理有返回值的情况，Action处理无返回值的情况，Predicate一般用作判断条件。</p><p>Predicate的示例用法如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Program</span>  <span class="token punctuation">{</span>      bool <span class="token function">IsGreaterThan50</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span>              <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token keyword">else</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          Program p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lstInt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          lstInt<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          lstInt<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          lstInt<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Predicate<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> pred <span class="token operator">=</span> p<span class="token punctuation">.</span>IsGreaterThan50<span class="token punctuation">;</span>          <span class="token keyword">int</span> i <span class="token operator">=</span> lstInt<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>pred<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">// 找到匹配的第一个元素，此处为50  </span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"大于50的第一个元素为{0}"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> all <span class="token operator">=</span> lstInt<span class="token punctuation">.</span><span class="token function">FindAll</span><span class="token punctuation">(</span>pred<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> all<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"大于50的数组中元素为{0}"</span><span class="token punctuation">,</span> all<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 找出所有匹配条件的  </span>        <span class="token punctuation">}</span>          Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://blog.csdn.net/woshixuye/article/details/8228258" target="_blank" rel="noopener">参考链接</a></p><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>在泛型类名或泛型方法名后指定 where T:约束条件 ，可给泛型类型添加约束，<br>约束条件如下:</p><ul><li>where T : struct -类型T必须是值类型</li><li>where T : class -类型T必须是引用类型</li><li>where T : Ifoo -类型T必须实现接口Ifoo</li><li>where T : foo -类型T必须继承自 foo</li><li>where T : new() -类型T必须有一个无参构造函数</li><li>where T : U -指定泛型类型T必须派生于U。</li></ul><blockquote><p>约束可设置多个，以逗号隔开</p></blockquote><h3 id="default关键字"><a href="#default关键字" class="headerlink" title="default关键字"></a>default关键字</h3><p>在泛型类和泛型方法中产生的一个问题是，在预先未知以下情况时，如何将默认值分配给参数化类型 T：</p><ul><li>T 是引用类型还是值类型。</li><li>如果 T 为值类型，则它是数值还是结构。</li></ul><p>给定参数化类型 T 的一个变量 t，只有当 T 为引用类型时，语句 t = null 才有效；只有当 T 为数值类型而不是结构时，语句 t = 0 才能正常使用。解决方案是使用 default 关键字，此关键字对于引用类型会返回空，对于数值类型会返回零。对于结构，此关键字将返回初始化为零或空的每个结构成员，具体取决于这些结构是值类型还是引用类型。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericList</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//...</span>        <span class="token keyword">public</span> Node Next<span class="token punctuation">;</span>        <span class="token keyword">public</span> T Data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">public</span> T <span class="token function">GetNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        T temp <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>        Node current <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp <span class="token operator">=</span> current<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>Next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="协变和逆变"><a href="#协变和逆变" class="headerlink" title="协变和逆变"></a>协变和逆变</h3><h4 id="协变"><a href="#协变" class="headerlink" title="协变"></a>协变</h4><p>如果某个返回的类型可以由其派生类型替换，那么这个类型就是支持协变的。在C#4.0之前是不支持的。</p><p>通俗点说就是，左边泛型类型可用父类，右边可用子类.</p><blockquote><p>协变的泛型参数只能作为接口成员或泛型委托的返回值。</p></blockquote><p>实现方式：<br>在泛型形参前面加上out关键字即可</p><p>示例代码:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IPerson</span><span class="token operator">&lt;</span>out T<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">:</span>IPerson<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">BaseClass</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SonClass</span><span class="token operator">:</span>BaseClass<span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下:</p><pre class="line-numbers language-java"><code class="language-java">IPerson<span class="token operator">&lt;</span>BaseClass<span class="token operator">></span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>SonClass<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="逆变"><a href="#逆变" class="headerlink" title="逆变"></a>逆变</h4><p>如果某个参数类型可以由其基类替换，那么这个类型就是支持逆变的。</p><p>即：左边的泛型类型可以是子类，右边是父类。</p><blockquote><p>逆变的泛型参数只能作为接口成员的传入参数</p></blockquote><p>在泛型形参前面加上in关键字即可,</p><p>示例代码:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IPerson</span><span class="token operator">&lt;</span>in T<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">:</span>IPerson<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">BaseClass</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SonClass</span><span class="token operator">:</span>BaseClass<span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下:</p><pre class="line-numbers language-java"><code class="language-java">IPerson<span class="token operator">&lt;</span>SonClass<span class="token operator">></span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>BaseClass<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>协变和逆变只可以用于泛型接口和泛型委托，只能用于引用类型的转换，当方法的参数使用了<code>ref</code>或<code>out</code>关键字时将禁止协变和逆变。</p><h3 id="泛型的一些实际应用"><a href="#泛型的一些实际应用" class="headerlink" title="泛型的一些实际应用"></a>泛型的一些实际应用</h3><h4 id="泛型用作缓存"><a href="#泛型用作缓存" class="headerlink" title="泛型用作缓存"></a>泛型用作缓存</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericCache</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">static</span> T instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> T Instance    <span class="token punctuation">{</span>        get <span class="token punctuation">{</span> <span class="token keyword">return</span> instance<span class="token punctuation">;</span> <span class="token punctuation">}</span>        set        <span class="token punctuation">{</span>            instance <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>原理</p><p>这运用了C#的一些基础知识:定义为静态的任何东西，永远不可能被回收，除非你自己将其设置为null，将引用去掉了，才可能被GC回收，如果遇到奇怪的现象，请检查代码其它地方。</p></li><li><p>缺点</p><p>无法清除缓存，一个类型只能有一个缓存，不过可以定义为集合。</p></li></ol><h4 id="泛型单例"><a href="#泛型单例" class="headerlink" title="泛型单例"></a>泛型单例</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token operator">&lt;</span>T<span class="token operator">></span> where T <span class="token operator">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 单例实例</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">private</span> <span class="token keyword">static</span> T instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 线程锁</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">private</span> <span class="token keyword">static</span> object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 静态单例</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">static</span> T Instance    <span class="token punctuation">{</span>        get        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">lock</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当其他类继承这个类时，便自动拥有了父类的单例属性。</p><p>缺点：</p><p>  子类的无参构造方法必须是公共的，意味着子类可以被实例化，无法强制让其使用单例。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;msdn中对泛型的描述：&lt;br&gt;泛型是 2.0 版 C# 语言和公共语言运行库 (CLR) 中的一个新功能。泛型将类型参数的概念引入 .NE
      
    
    </summary>
    
      <category term="C#高级编程" scheme="https://taffyblog.github.io/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Oracle触发器及包创建</title>
    <link href="https://taffyblog.github.io/2017/05/16/oracletrigger/"/>
    <id>https://taffyblog.github.io/2017/05/16/oracletrigger/</id>
    <published>2017-05-16T13:02:26.000Z</published>
    <updated>2022-03-08T07:51:05.934Z</updated>
    
    <content type="html"><![CDATA[<p>示例代码如下:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> myTable<span class="token punctuation">(</span>       id <span class="token keyword">integer</span> <span class="token keyword">constraint</span> pk_myTable <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>       userName varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>       userPwd varchar2<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/********创建序列**********/</span><span class="token keyword">create</span> sequence seq_Num<span class="token keyword">start</span> <span class="token keyword">with</span> <span class="token number">1</span>increment <span class="token keyword">by</span> <span class="token number">1</span>nomaxvaluenocache<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**创建触发器***/</span><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">trigger</span> tri_Identitybefore <span class="token keyword">insert</span> <span class="token keyword">on</span> ytf<span class="token punctuation">.</span>mytable <span class="token keyword">for each row</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>new<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">--触发条件(for each row 行触发器)</span><span class="token keyword">begin</span>  <span class="token keyword">select</span> seq_Num<span class="token punctuation">.</span>Nextval <span class="token keyword">into</span>:new<span class="token punctuation">.</span>id <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> myTable<span class="token punctuation">(</span>userName<span class="token punctuation">,</span>userPwd<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> myTable<span class="token punctuation">(</span>userName<span class="token punctuation">,</span>userPwd<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> myTable<span class="token punctuation">(</span>userName<span class="token punctuation">,</span>userPwd<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> myTable<span class="token punctuation">(</span>userName<span class="token punctuation">,</span>userPwd<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'赵六'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myTable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/****创建触发器***/</span><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">trigger</span> tri_testbefore <span class="token keyword">insert</span> <span class="token operator">or</span> <span class="token keyword">update</span> <span class="token operator">or</span> <span class="token keyword">delete</span> <span class="token keyword">on</span> ytf<span class="token punctuation">.</span>mytable<span class="token keyword">begin</span>     <span class="token keyword">case</span>       <span class="token keyword">when</span> inserting <span class="token keyword">then</span>         dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'这是添加操作'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">when</span> updating <span class="token keyword">then</span>         dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span><span class="token string">'这是修改操作'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">when</span> deleting <span class="token keyword">then</span>         raise_application_error<span class="token punctuation">(</span><span class="token string">'-20001'</span><span class="token punctuation">,</span><span class="token string">'不允许删除'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> ytf<span class="token punctuation">.</span>mytable<span class="token punctuation">(</span>userName<span class="token punctuation">,</span>userpwd<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'田七'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">update</span> ytf<span class="token punctuation">.</span>mytable m <span class="token keyword">set</span> m<span class="token punctuation">.</span>userpwd<span class="token operator">=</span><span class="token string">'52565656'</span> <span class="token keyword">where</span> m<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">delete</span>  ytf<span class="token punctuation">.</span>mytable m <span class="token keyword">where</span> m<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ytf<span class="token punctuation">.</span>mytable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*****创建包头*****/</span><span class="token keyword">create</span> <span class="token operator">or</span> replace package pkg_test<span class="token operator">is</span>       <span class="token keyword">procedure</span> proc_test<span class="token punctuation">(</span><span class="token number">ff</span> <span class="token keyword">integer</span><span class="token punctuation">,</span>tt <span class="token keyword">out</span> varchar2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">function</span> func_test<span class="token punctuation">(</span>fu <span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token keyword">return</span> varchar2<span class="token punctuation">;</span><span class="token keyword">end</span> pkg_test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/******创建包体********/</span><span class="token keyword">create</span> <span class="token operator">or</span> replace package body pkg_test<span class="token operator">is</span>    <span class="token keyword">procedure</span> proc_test<span class="token punctuation">(</span><span class="token number">ff</span> <span class="token keyword">integer</span><span class="token punctuation">,</span>tt <span class="token keyword">out</span> varchar2<span class="token punctuation">)</span>      <span class="token operator">is</span>      <span class="token keyword">begin</span>        <span class="token keyword">select</span> m<span class="token punctuation">.</span>username <span class="token keyword">into</span> tt <span class="token keyword">from</span> ytf<span class="token punctuation">.</span>mytable m <span class="token keyword">where</span> m<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">ff</span><span class="token punctuation">;</span>      <span class="token keyword">end</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> func_test<span class="token punctuation">(</span>fu <span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token keyword">return</span> varchar2      <span class="token operator">is</span>      <span class="token keyword">temp</span> varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">begin</span>        <span class="token keyword">select</span> m<span class="token punctuation">.</span>username <span class="token keyword">into</span> <span class="token keyword">temp</span> <span class="token keyword">from</span> ytf<span class="token punctuation">.</span>mytable m <span class="token keyword">where</span> m<span class="token punctuation">.</span>id<span class="token operator">=</span>fu<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">temp</span><span class="token punctuation">;</span>      <span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">end</span> pkg_test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--测试</span><span class="token keyword">select</span>  pkg_test<span class="token punctuation">.</span>func_test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;示例代码如下:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;toke
      
    
    </summary>
    
      <category term="随笔" scheme="https://taffyblog.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Oracle" scheme="https://taffyblog.github.io/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>浅谈lock关键字</title>
    <link href="https://taffyblog.github.io/2017/05/15/lock/"/>
    <id>https://taffyblog.github.io/2017/05/15/lock/</id>
    <published>2017-05-15T14:37:16.000Z</published>
    <updated>2022-03-08T07:51:05.930Z</updated>
    
    <content type="html"><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>标志某个语句模块为临界区，当一个线程进入临界区后，会阻止另一个线程访问该语句模块。？进入等待队列直到被通知等待资源被释放。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>实质上是对Monitor.Enter与Monitor.Exit方法的封装。<br>线程通过获得对象锁来得到对象的访问权力，当一个线程拥有对象锁时，其它线程就会被阻止。</p><blockquote><p>建议定义一个private成员来实现对象锁，或者是private static 对象变量来保护所有实例对共有数据的访问。</p></blockquote><p>示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> object X<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock（X）<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要锁定的代码....</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>X是任意一种引用类型，它在这儿起的作用就是任何线程执行到lock（X）时候，X需要独享才能运行下面的代码,若假定现在有3个线程A,B,C都执行到了lock（X）而ABC因为此时都占有X，这时ABC就要停下来排个队，一个一个使用X，从而起到在下面的代码块内只有一个线程在运行（因为此时只有一个线程独享X，其余两个在排队），所以这个X必须是所有要执行临界区域代码进程必须共有的一个资源，从而起到抑制线程的作用。<br><a href="http://blog.csdn.net/shellwin/article/details/5855504" target="_blank" rel="noopener">参考</a></p><h3 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h3><h5 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h5><p>产生死锁的原因主要是<br>因为系统资源不足。<br>进程运行推进的顺序不合适。<br>资源分配不当等。<br>如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。其次，进程运行推进顺序与速度不同，也可能产生死锁。</p><p>产生死锁的四个必要条件</p><ul><li>互斥条件:一个资源每次只能被一个进程使用。此时若有其他进程请求该资源，则请求进程只能等待。</li><li>请求与保持条件:进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源 已被其他进程占有，此时请求进程被阻塞，但对自己已获得的资源保持不放。</li><li>不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺，即只能 由获得该资源的进程自己来释放（只能是主动释放)。</li><li>循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。存在一种进程资源的循环等待链，链中每一个进程已获得的资源同时被 链中下一个进程所请求。</li></ul><p>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁</p><h5 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h5><h6 id="加锁顺序（线程按照一定的顺序加锁）"><a href="#加锁顺序（线程按照一定的顺序加锁）" class="headerlink" title="加锁顺序（线程按照一定的顺序加锁）"></a>加锁顺序（线程按照一定的顺序加锁）</h6><p>如果能确保所有的线程都是按照相同的顺序获得锁，那么死锁就不会发生。<br>如果一个线程需要一些锁，那么它必须按照确定的顺序获取锁。它只有获得了从顺序上排在前面的锁之后，才能获取后面的锁。</p><h6 id="加锁时限"><a href="#加锁时限" class="headerlink" title="加锁时限"></a>加锁时限</h6><p>线程尝试获取锁的时候加上一定的时限，超过时限则放弃对该锁的请求，并释放自己占有的锁</p><h6 id="死锁检测"><a href="#死锁检测" class="headerlink" title="死锁检测"></a>死锁检测</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h3&gt;&lt;p&gt;标志某个语句模块为临界区，当一个线程进入临界区后，会阻止另一个线程访问该语句模块。？进入等待队列直到被通知等待资源被释放。&lt;/p&gt;
&lt;h3 
      
    
    </summary>
    
      <category term="随笔" scheme="https://taffyblog.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="多线程" scheme="https://taffyblog.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C#多线程</title>
    <link href="https://taffyblog.github.io/2017/05/15/task_async/"/>
    <id>https://taffyblog.github.io/2017/05/15/task_async/</id>
    <published>2017-05-15T12:34:26.000Z</published>
    <updated>2022-03-08T07:51:05.938Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h3><h4 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h4><p>当一个程序开始运行时，它就是一个进程，进程包括运行中的程序和程序所使用到的内存和系统资源。<br>而一个进程又是由多个线程所组成的。</p><h4 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h4><p>线程是程序中的一个执行流，每个线程都有自己的专有寄存器(栈指针、程序计数器等)，但代码区是共享的，即不同的线程可以执行同样的函数。</p><h4 id="多线程的概念"><a href="#多线程的概念" class="headerlink" title="多线程的概念"></a>多线程的概念</h4><p>多线程是指程序中包含多个执行流，即在一个程序中可以同时运行多个不同的线程来执行不同的任务，也就是说允许单个程序创建多个并行执行的线程来完成各自的任务。</p><h4 id="多线程的好处"><a href="#多线程的好处" class="headerlink" title="多线程的好处"></a>多线程的好处</h4><p>可以提高CPU的利用率。在多线程程序中，一个线程必须等待的时候，CPU可以运行其它的线程而不是等待，这样就大大提高了程序的效率。</p><h4 id="多线程的不利方面"><a href="#多线程的不利方面" class="headerlink" title="多线程的不利方面"></a>多线程的不利方面</h4><ul><li>线程也是程序，所以线程需要占用内存，线程越多占用内存也越多； </li><li>多线程需要协调和管理，所以需要CPU时间跟踪线程； </li><li>线程之间对共享资源的访问会相互影响，必须解决竞用共享资源的问题；</li><li>线程太多会导致控制太复杂，最终可能造成很多Bug；</li></ul><h4 id="何时使用多线程"><a href="#何时使用多线程" class="headerlink" title="何时使用多线程"></a>何时使用多线程</h4><p>多线程程序一般被用来在后台执行耗时的任务。主线程保持运行，并且工作线程做它的后台工作。对于Windows Forms程序来说，如果主线程试图执行冗长的操作，键盘和鼠标的操作会变的迟钝，程序也会失去响应。由于这个原因，应该在工作线程中运行一个耗时任务时添加一个工作线程，即使在主线程上有一个有好的提示“处理中…”，以防止工作无法继续。这就避免了程序出现由操作系统提示的“没有相应”，来诱使用户强制结束程序的进程而导致错误。模式对话框还允许实现“取消”功能，允许继续接收事件，而实际的任务已被工作线程完成。BackgroundWorker恰好可以辅助完成这一功能。</p><p>在没有用户界面的程序里，比如说Windows Service， 多线程在当一个任务有潜在的耗时，因为它在等待另台电脑的响应（比如一个应用服务器，数据库服务器，或者一个客户端）的实现特别有意义。用工作线程完成任务意味着主线程可以立即做其它的事情。</p><p>另一个多线程的用途是在方法中完成一个复杂的计算工作。这个方法会在多核的电脑上运行的更快，如果工作量被多个线程分开的话（使用Environment.ProcessorCount属性来侦测处理芯片的数量）。</p><p>一个C#程序称为多线程的可以通过2种方式：明确地创建和运行多线程，或者使用.NET framework的暗中使用了多线程的特性——比如BackgroundWorker类, 线程池，threading timer，远程服务器，或Web Services或ASP.NET程序。在后面的情况，人们别无选择，必须使用多线程；一个单线程的ASP.NET web server不是太酷，即使有这样的事情；幸运的是，应用服务器中多线程是相当普遍的；唯一值得关心的是提供适当锁机制的静态变量问题。</p><h4 id="何时避免使用多线程"><a href="#何时避免使用多线程" class="headerlink" title="何时避免使用多线程"></a>何时避免使用多线程</h4><p>多线程也同样会带来缺点，最大的问题是它使程序变的过于复杂，拥有多线程本身并不复杂，复杂是的线程的交互作用，这带来了无论是否交互是否是有意的，都会带来较长的开发周期，以及带来间歇性和非重复性的bug。因此，要么多线程的交互设计简单一些，要么就根本不使用多线程。除非你有强烈的重写和调试欲望。</p><p>当用户频繁地分配和切换线程时，多线程会带来增加资源和CPU的开销。在某些情况下，太多的I/O操作是非常棘手的，当只有一个或两个工作线程要比有众多的线程在相同时间执行任务快的多。</p><h3 id="使用Parallel类"><a href="#使用Parallel类" class="headerlink" title="使用Parallel类"></a>使用Parallel类</h3><p>Parallel类是对线程的一个很好的抽象，位于System.Threading.Tasks名称空间中，提供了数据和任务的并行性。</p><p>Parallel类定义了并行的for和foreach的静态方法。对于C#的for和foreach语句而言，循环从一个线程中运行。Parallel使用多个任务，因此使用多个线程来完成这个作业。</p><h4 id="Parallel-For-循环"><a href="#Parallel-For-循环" class="headerlink" title="Parallel.For() 循环"></a>Parallel.For() 循环</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    Stopwatch watch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    watch<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//并行循环代码</span>    ParallelLoopResult result <span class="token operator">=</span> Parallel<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    watch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>IsCompleted<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Parallel.For已完成,耗时:"</span> <span class="token operator">+</span> watch<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token operator">+</span><span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    watch<span class="token punctuation">.</span><span class="token function">Restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/********************************************************/</span>    <span class="token comment" spellcheck="true">//普通循环代码</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    watch<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"for已完成,耗时:"</span> <span class="token operator">+</span> watch<span class="token punctuation">.</span>ElapsedMilliseconds <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下:</p><pre class="line-numbers language-bash"><code class="language-bash">8624071359Parallel.For已完成,耗时:45毫秒0123456789for已完成,耗时:132毫秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于Parallel.For是并行循环，所以输出结果是无序的。当Thread.Sleep中的值越大时，并行循环与for的耗时差距越大,在不加Thread.Sleep时,for循环比并行循环耗时更少。</p></blockquote><h4 id="使用Parallel-Invoke-并行调用多个方法"><a href="#使用Parallel-Invoke-并行调用多个方法" class="headerlink" title="使用Parallel.Invoke()并行调用多个方法"></a>使用Parallel.Invoke()并行调用多个方法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 摘要:</span>    <span class="token comment" spellcheck="true">//     尽可能并行执行提供的每个操作。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 参数:</span>    <span class="token comment" spellcheck="true">//   actions:</span>    <span class="token comment" spellcheck="true">//     要执行的 System.Action 数组。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 异常:</span>    <span class="token comment" spellcheck="true">//   T:System.ArgumentNullException:</span>    <span class="token comment" spellcheck="true">//     actions 参数为 null。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">//   T:System.AggregateException:</span>    <span class="token comment" spellcheck="true">//     当 actions 数组中的任何操作引发异常时引发的异常。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">//   T:System.ArgumentException:</span>    <span class="token comment" spellcheck="true">//     actions数组包含 null 个元素。</span>    <span class="token comment" spellcheck="true">//public static void Invoke(params Action[] actions);</span>    Parallel<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>Fone<span class="token punctuation">,</span> Ftwo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Fone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Ftwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><pre class="line-numbers language-bash"><code class="language-bash">045678912<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用Thread类"><a href="#使用Thread类" class="headerlink" title="使用Thread类"></a>使用Thread类</h3><h4 id="创建不带参数线程"><a href="#创建不带参数线程" class="headerlink" title="创建不带参数线程"></a>创建不带参数线程</h4><p>Thread类可以创建和控制线程，Thread类的构造函数重载为接受ThreadStart和ParameterizedThreadStart类型的委托参数。下面我们用一个例子来解释怎样用Thread类来创建一个简单的线程:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    #region Thread无参数举例    Thread th <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ThreadChild<span class="token punctuation">)</span><span class="token punctuation">;</span>    th<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Main Thread Start!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    #endregion<span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ThreadChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Child Thread Start!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下</p><pre class="line-numbers language-bash"><code class="language-bash">Main Thread Start<span class="token operator">!</span>Child Thread Start<span class="token operator">!</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>程序运行的结果不能保证哪个先输出，因为线程是由操作系统调度，每次哪个线程在前面可以不同</p></blockquote><h4 id="创建带参数的线程"><a href="#创建带参数的线程" class="headerlink" title="创建带参数的线程"></a>创建带参数的线程</h4><p>上面的例子演示了怎样用<code>Thread</code>类来创建一个不带传参的线程，下面我门来创建一个带传入参数的线程。给线程传递参数，有两种方式:</p><ul><li>一种是使用带<code>ParameterizedThreadStart</code>委托参数的Thread的构造函数 。</li><li>一种是定义一个自定义类。首先我们使用<code>ParameterizedThreadStart</code>委托来创建有传入参数的类。</li></ul><p>使用<code>ParameterizedThreadStart</code>，线程的入口（线程调用的方法）必须有一个<code>Object</code>类型的参数，使用Object我们首先想到的就是类型不安全。而且在执行线程的时候多半有装箱拆箱操作。我们先用这种方式来创建一个带传入参数的线程：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>         #region 使用parameterizedThreadStart委托执行带参数的委托    Thread th2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>Thread_param<span class="token punctuation">)</span><span class="token punctuation">;</span>    th2<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    #endregion         <span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Thread_param</span><span class="token punctuation">(</span>object msg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>msg<span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Result:{0}"</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash"><code class="language-bash">Result:20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面创建的线程是类型不安全的，那用什么样的方式执行带传入参数的线程的方法是类型安全的呢，答案就是创建一个自定义类，在类中定义一个作为传入参数的字段，将线程的主方法定义为一个类的实例方法。然而使用这种方法就可以使用泛型来解决使用ParameterizedThreadStart的类型不安全:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            #region 使用自定义类实现带参数的线程            MyThread<span class="token operator">&lt;</span>string<span class="token operator">></span> mythread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"Thread_child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread th3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mythread<span class="token punctuation">.</span>ThreadChild<span class="token punctuation">)</span><span class="token punctuation">;</span>            th3<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            #endregion        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ThreadChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Child Thread Start! Result:{0}"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果:</p><pre class="line-numbers language-bash"><code class="language-bash">Child Thread Start<span class="token operator">!</span> Result:Thread_child<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="关于后台线程"><a href="#关于后台线程" class="headerlink" title="关于后台线程"></a>关于后台线程</h4><p>前台线程的概念：</p><ul><li>只要有一个前台线程在运行，应用程序的进程就在运行。如果有多个前台线程在运行，而Main()方法（主线程）结束了，应用程序的进程就仍然是激活的，直到所有前台线程完成其任务为止。</li></ul><p>后台线程的概念：</p><ul><li>和前台线程相反。当主线程结束后，应用程序的进程就终止了，在所有前台线程结束后，后台线程就会被终止。</li></ul><blockquote><p>Thread类默认创建的是前台线程，所以我们前面创建的线程全部都是前台线程。</p></blockquote><p>　　在编码的时候我们可以设置<code>Thread</code>类的<code>IsBackground</code>的属性来确定该线程是前台线程还是后台线程。当<code>IsBackground</code>设置为<code>False</code>的时候，为前台线程，设置为<code>Ture</code>的时候为后台线程，下面我们举例来说明前台线程和后台线程的区别。首先我们创建一个前台线程:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    Thread th_pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>Thread_pre<span class="token punctuation">)</span>    <span class="token punctuation">{</span>Name<span class="token operator">=</span><span class="token string">"Thread_pre"</span><span class="token punctuation">,</span>IsBackground<span class="token operator">=</span>flase<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    th_pre<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"主线程执行完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Thread_pre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"子线程开始执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"子线程执行完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-bash"><code class="language-bash">主线程执行完成！子线程开始执行！子线程执行完成！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从上面的运行结果可以看到，当主线程执行完成后，应用程序终止前就会子线程执行完成。</p><p>后台线程：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>　　　　　　　Thread th_back <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>Thread_back<span class="token punctuation">)</span>　　　　　　　<span class="token punctuation">{</span> Name<span class="token operator">=</span><span class="token string">"Thread_back"</span><span class="token punctuation">,</span>IsBackground<span class="token operator">=</span><span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    th_back<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"主线程执行完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Thread_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"子线程开始执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"子线程执行完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-java"><code class="language-java">主线程执行完成！子线程开始执行！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从运行结果可以看出，当主线程结束后，进程就终止了，后台线程也被终止，所以没有后台线程结束的输出信息</p><h4 id="控制线程"><a href="#控制线程" class="headerlink" title="控制线程"></a>控制线程</h4><p>我们使用Thread创建线程后，我们需要对线程进行控制。<br>　　1、  使用Start()方法使线程处于Running状态，线程开始执行。<br>　　2、  使用Join（）方法使线程处于WaitSleepJoin状态，在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻塞调用线程，直到某个线程终止或经过了指定时   间为止。<br>　　3、  使用Sleep()方法，也会使线程处于WaitSleepJoin状态，在经历Sleep()方法定义的时间段后，线程就会被再次唤醒。、<br>　　4、  使用Abort()方法，会使线程处于ResetAbort()状态，线程在接到这个命令的时候，会抛出一个ThradAbordException类型的异常。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"mainThread Start!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread th <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>newThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        th<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将当前实例的状态更改为 ThreadState.Running。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"newThread State:{0}"</span><span class="token punctuation">,</span>th<span class="token punctuation">.</span>ThreadState<span class="token punctuation">)</span><span class="token punctuation">;</span>        th<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻塞调用线程，直到某个线程终止或经过了指定时间为止。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"newThread State:{0}"</span><span class="token punctuation">,</span> th<span class="token punctuation">.</span>ThreadState<span class="token punctuation">)</span><span class="token punctuation">;</span>        th<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在调用此方法的线程上引发 ThreadAbortException，以开始终止此线程的过程。 调用此方法通常会终止线程。</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"newThread State:{0}"</span><span class="token punctuation">,</span> th<span class="token punctuation">.</span>ThreadState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"newThread Start!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"newThread Complete!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://www.cnblogs.com/lvcy/archive/2012/06/16/2551539.html" target="_blank" rel="noopener">参考链接</a></p><h3 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h3><h4 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h4><p>线程池使用<code>ThreadPool</code>类的<code>QueueUserWorkItem</code>方法创建线程，此方法可传递一个委托：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 一个比较耗时耗资源的私有方法</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;param name="name">&lt;/param></span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">DoSomethingLong</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"****************DoSomethingLong Start {name} {Thread.CurrentThread.ManagedThreadId} {DateTime.Now.ToString("</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token operator">:</span>mm<span class="token operator">:</span>ss fff<span class="token string">")}***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> lResult <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2000000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        lResult <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Thread.Sleep(2000);</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"****************DoSomethingLong   End  {name} {Thread.CurrentThread.ManagedThreadId} {DateTime.Now.ToString("</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token operator">:</span>mm<span class="token operator">:</span>ss fff<span class="token string">")}***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">DoSomethingLong</span><span class="token punctuation">(</span><span class="token string">"btnThreadPool_Click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//耗时操作</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异步编程模型（APM）"><a href="#异步编程模型（APM）" class="headerlink" title="异步编程模型（APM）"></a>异步编程模型（APM）</h3><p>异步编程模型 (APM)是.NET1.0的时候就已经推出的古老异步编程模式，此模式基于IAsyncResult接口实现。</p><p><code>BeginInvoke</code>:开始异步执行委托。<br><code>EndInvoke</code>:获取异步执行结果。</p><h4 id="使用BeginInvoke异步执行无返回值委托"><a href="#使用BeginInvoke异步执行无返回值委托" class="headerlink" title="使用BeginInvoke异步执行无返回值委托"></a>使用<code>BeginInvoke</code>异步执行无返回值委托</h4><p>示例：</p><pre class="line-numbers language-java"><code class="language-java">Action myNoParAction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"无参数委托方法体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">;</span>myNoParAction<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这是回调"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>AsyncState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"这是回调参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"主线程***********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-bash"><code class="language-bash">主线程***********无参数委托方法体这是回调这是回调参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>异步执行带参数的委托：</p><pre class="line-numbers language-java"><code class="language-java">Action<span class="token operator">&lt;</span>string<span class="token operator">></span> myAction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action</span><span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"委托方法体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">;</span>myAction<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span><span class="token string">"参数来了"</span><span class="token punctuation">,</span> t <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这是回调"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>AsyncState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"主线程*************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-bash"><code class="language-bash">主线程*************委托方法体参数来了这是回调<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>回调方法的参数使用<code>AsyncState</code>来接收，无参数则为<code>null</code>。</p></blockquote><h4 id="使用EndInvoke获取异步执行的返回结果"><a href="#使用EndInvoke获取异步执行的返回结果" class="headerlink" title="使用EndInvoke获取异步执行的返回结果"></a>使用<code>EndInvoke</code>获取异步执行的返回结果</h4><p>示例如下：</p><pre class="line-numbers language-java"><code class="language-java"> Func<span class="token operator">&lt;</span>string<span class="token operator">></span> myAction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Func</span><span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"委托方法体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token string">"这是委托返回值"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">;</span>IAsyncResult asyncResult <span class="token operator">=</span> myAction<span class="token punctuation">.</span><span class="token function">BeginInvoke</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"这是回调"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>AsyncState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>string result <span class="token operator">=</span>  myAction<span class="token punctuation">.</span><span class="token function">EndInvoke</span><span class="token punctuation">(</span>asyncRes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-bash"><code class="language-bash">委托方法体这是回调这是委托返回值主线程*************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从返回结果可以看出，在调用<code>EndInvoke</code>时会等待异步操作完成，阻塞主线程。</p></blockquote><h3 id="基于任务的异步模式（TAP）"><a href="#基于任务的异步模式（TAP）" class="headerlink" title="基于任务的异步模式（TAP）"></a>基于任务的异步模式（TAP）</h3><h4 id="任务的创建"><a href="#任务的创建" class="headerlink" title="任务的创建"></a>任务的创建</h4><p>示例代码如下:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//创建方式1</span>    TaskFactory tf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tf<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span>TaskMethod <span class="token punctuation">,</span><span class="token string">"使用new TaskFactory()创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建方式2</span>    Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span>TaskMethod<span class="token punctuation">,</span> <span class="token string">"使用Task.Factory创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建方式3</span>    Task task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>TaskMethod<span class="token punctuation">,</span> <span class="token string">"使用new Task创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    task<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//线程锁</span><span class="token keyword">static</span> object tasklock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">TaskMethod</span><span class="token punctuation">(</span>object title<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">lock</span> <span class="token punctuation">(</span>tasklock<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Task Id :{0},Thread:{1}"</span><span class="token punctuation">,</span> Task<span class="token punctuation">.</span>CurrentId<span class="token operator">==</span>null<span class="token operator">?</span><span class="token string">"no task"</span><span class="token operator">:</span>Task<span class="token punctuation">.</span>CurrentId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"是否属于线程池:{0}\n"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>IsThreadPoolThread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下:</p><pre class="line-numbers language-bash"><code class="language-bash">使用Task.Factory创建Task Id :1,Thread:5是否属于线程池:True使用new TaskFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>创建Task Id :2,Thread:4是否属于线程池:True使用new Task创建Task Id :3,Thread:3是否属于线程池:True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上示例中的三种方式均可创建异步任务,并且都在线程池中运行。</p></blockquote><h4 id="任务等待和回调的异步任务"><a href="#任务等待和回调的异步任务" class="headerlink" title="任务等待和回调的异步任务"></a>任务等待和回调的异步任务</h4><ol><li><code>WaitAll</code>等待集合中所有任务执行完后继续。</li><li><code>WaitAny</code>等待集合中任一任务执行完成。</li><li><code>ContinueWhenAny</code>任意一个任务完成后要执行的异步任务。</li><li><code>ContinueWhenAll</code>所有任务完成后要执行的异步任务。</li></ol><blockquote><p>1、2会阻塞主线程，3、4不会</p></blockquote><p>示例代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//任务集合</span>    List<span class="token operator">&lt;</span>Task<span class="token operator">></span> taskList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Task<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建5个任务</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string name <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"btnTask_Click_"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        Task task <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">DoSomethingLong</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        taskList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//taskList中任意一个任务完成后执行的任务 并将自身加入集合</span>    taskList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">ContinueWhenAny</span><span class="token punctuation">(</span>taskList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>IsCompleted<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ContinueWhenAny"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//taskList中所有任务完成任务完成后执行的任务 并将自身加入集合</span>    taskList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">ContinueWhenAll</span><span class="token punctuation">(</span>taskList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tList <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>tList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>IsCompleted<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"ContinueWhenAll"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//回调形式的，全部任务完成后执行的后续动作</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"before WaitAny"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Task<span class="token punctuation">.</span><span class="token function">WaitAny</span><span class="token punctuation">(</span>taskList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前线程等待某个任务的完成  </span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"after WaitAny"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"before WaitAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>taskList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前线程等待全部任务的完成  </span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"after WaitAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 一个比较耗时耗资源的私有方法</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;param name="name">&lt;/param></span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">DoSomethingLong</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"****************DoSomethingLong Start "</span> <span class="token operator">+</span> name <span class="token operator">+</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId <span class="token operator">+</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss fff"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> lResult <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2000000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        lResult <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Thread.Sleep(2000);</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"****************DoSomethingLong   End  "</span> <span class="token operator">+</span> name <span class="token operator">+</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId <span class="token operator">+</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss fff"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"***************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="同步任务"><a href="#同步任务" class="headerlink" title="同步任务"></a>同步任务</h4><p>使用Task类的实例方法RunSynchronously()可以让任务同步运行，示例代码:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    Task task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>TaskMethod<span class="token punctuation">,</span> <span class="token string">"使用new Task创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 摘要:</span>    <span class="token comment" spellcheck="true">//     对当前的 System.Threading.Tasks.TaskScheduler 同步运行 System.Threading.Tasks.Task。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 异常:</span>    <span class="token comment" spellcheck="true">//   T:System.ObjectDisposedException:</span>    <span class="token comment" spellcheck="true">//     已释放 System.Threading.Tasks.Task 实例。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">//   T:System.InvalidOperationException:</span>    <span class="token comment" spellcheck="true">//     System.Threading.Tasks.Task 未处于有效状态，无法启动。它可能已启动、已执行或已取消，或者可能已经以不支持直接计划的方式创建。</span>    task<span class="token punctuation">.</span><span class="token function">RunSynchronously</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//线程锁</span><span class="token keyword">static</span> object tasklock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">TaskMethod</span><span class="token punctuation">(</span>object title<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">lock</span> <span class="token punctuation">(</span>tasklock<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Task Id :{0},Thread:{1}"</span><span class="token punctuation">,</span> Task<span class="token punctuation">.</span>CurrentId<span class="token operator">==</span>null<span class="token operator">?</span><span class="token string">"no task"</span><span class="token operator">:</span>Task<span class="token punctuation">.</span>CurrentId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"是否属于线程池:{0}\n"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>IsThreadPoolThread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下:</p><pre class="line-numbers language-bash"><code class="language-bash">使用new Task创建Task Id :1,Thread:1是否属于线程池:FalseHello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对长时间运行的任务使用单独线程"><a href="#对长时间运行的任务使用单独线程" class="headerlink" title="对长时间运行的任务使用单独线程"></a>对长时间运行的任务使用单独线程</h4><p>如果任务的代码需要长时间运行，就应该使用TaskCreationOptions.LongRunning告诉任务调度器创建一个新线程来运行此任务，而不是使用线程池中的线程。因为在线程池中，任务调度器可能会在创建其他任务时等待当前任务完成。<br>示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 摘要:</span>    <span class="token comment" spellcheck="true">//     指定任务将是长时间运行的、粗粒度的操作，涉及比细化的系统更少、更大的组件。它会向 System.Threading.Tasks.TaskScheduler</span>    <span class="token comment" spellcheck="true">//     提示，过度订阅可能是合理的。您可以通过过度订阅创建比可用硬件线程数更多的线程。</span>    Task task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>TaskMethod<span class="token punctuation">,</span> <span class="token string">"使用new Task创建"</span><span class="token punctuation">,</span> TaskCreationOptions<span class="token punctuation">.</span>LongRunning<span class="token punctuation">)</span><span class="token punctuation">;</span>    task<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Task Id :{0},Thread:{1}\n"</span><span class="token punctuation">,</span> Task<span class="token punctuation">.</span>CurrentId <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"no task"</span> <span class="token operator">:</span> Task<span class="token punctuation">.</span>CurrentId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">TaskMethod</span><span class="token punctuation">(</span>object title<span class="token punctuation">)</span><span class="token punctuation">{</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Task Id :{0},Thread:{1}"</span><span class="token punctuation">,</span> Task<span class="token punctuation">.</span>CurrentId <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"no task"</span> <span class="token operator">:</span> Task<span class="token punctuation">.</span>CurrentId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"是否属于线程池:{0}\n"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>IsThreadPoolThread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><pre class="line-numbers language-bash"><code class="language-bash">HelloTask Id :no task,Thread:1使用new Task创建Task Id :1,Thread:3是否属于线程池:False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建具有返回值的异步任务"><a href="#创建具有返回值的异步任务" class="headerlink" title="创建具有返回值的异步任务"></a>创建具有返回值的异步任务</h4><p>使用泛型Task<tresult>可创建具有返回值的异步任务，示例代码如下:</tresult></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 摘要:</span>    <span class="token comment" spellcheck="true">//     使用指定的函数和状态初始化新的 System.Threading.Tasks.Task`1。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 参数:</span>    <span class="token comment" spellcheck="true">//   function:</span>    <span class="token comment" spellcheck="true">//     表示要在任务中执行的代码的委托。在完成此函数后，该任务的 System.Threading.Tasks.Task`1.Result 属性将设置为返回此函数的结果值。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">//   state:</span>    <span class="token comment" spellcheck="true">//     一个表示由该操作使用的数据的对象。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 异常:</span>    <span class="token comment" spellcheck="true">//   T:System.ArgumentNullException:</span>    <span class="token comment" spellcheck="true">//     function 参数为 null。</span>    Task<span class="token operator">&lt;</span>string<span class="token operator">></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span>TaskMethod<span class="token punctuation">,</span><span class="token string">"来自Main的参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    task<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    task<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等待任务执行完成</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"执行完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> string <span class="token function">TaskMethod</span><span class="token punctuation">(</span>object title<span class="token punctuation">)</span><span class="token punctuation">{</span>    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Task Id :{0},Thread:{1}"</span><span class="token punctuation">,</span> Task<span class="token punctuation">.</span>CurrentId <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"no task"</span> <span class="token operator">:</span> Task<span class="token punctuation">.</span>CurrentId<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"是否属于线程池:{0}\n"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>IsThreadPoolThread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"来自TaskMethod的返回值"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为:</p><pre class="line-numbers language-bash"><code class="language-bash">来自Main的参数Task Id :1,Thread:3是否属于线程池:True来自TaskMethod的返回值执行完成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等待任务执行完成的方法:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//等待当前 System.Threading.Tasks.Task 完成执行过程。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等待传入的所有任务完成  </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">WaitAll</span><span class="token punctuation">(</span>params Task<span class="token punctuation">[</span><span class="token punctuation">]</span> tasks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等待传入的任意一个任务完成</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">WaitAny</span><span class="token punctuation">(</span>params Task<span class="token punctuation">[</span><span class="token punctuation">]</span> tasks<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在获取任务的返回值时，如果任务尚未执行完成，则Result属性将被禁用并会等待任务执行完成，所以示例中不加task.Wait()执行结果也一样。</p></blockquote><h4 id="延续的任务"><a href="#延续的任务" class="headerlink" title="延续的任务"></a>延续的任务</h4><p>在任务上调用ContinueWith()方法来启动当前任务完成后的任务。<br>示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    Task t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>One<span class="token punctuation">)</span><span class="token punctuation">;</span>    Task t1<span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>Two<span class="token punctuation">)</span><span class="token punctuation">;</span>    Task t2 <span class="token operator">=</span> t1<span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>Two<span class="token punctuation">)</span><span class="token punctuation">;</span>    Task t3 <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>Two<span class="token punctuation">)</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">One</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"TaskID:{0}"</span> <span class="token punctuation">,</span> Task<span class="token punctuation">.</span>CurrentId<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"this is One\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Two</span><span class="token punctuation">(</span>Task t<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"t Id:{0}"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"TaskID:{0}"</span><span class="token punctuation">,</span>Task<span class="token punctuation">.</span>CurrentId<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"this is Two\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><pre class="line-numbers language-bash"><code class="language-bash">TaskID:1this is Onet Id:1TaskID:2this is Twot Id:2TaskID:3this is Twot Id:3TaskID:4this is Two<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用ContinueWith()方法时，无论前面一个任务是如何结束的，哪怕是发生异常，也会在结束时启动下一个任务，使用TaskContinuationOptions中的枚举值来指定如何启动延续任务，TaskContinuationOptions中指定延续任务启动条件的值如下:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     Default = "Continue on any, no task options, run asynchronously" 指定应使用默认行为。默认情况下，完成前面的任务之后将安排运行延续任务，而不考虑前面任务的最终</span><span class="token comment" spellcheck="true">//     System.Threading.Tasks.TaskStatus。</span>None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     提示 System.Threading.Tasks.TaskScheduler 以一种尽可能公平的方式安排任务，这意味着较早安排的任务将更可能较早运行，而较晚安排运行的任务将更可能较晚运行。</span>PreferFairness <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     指定某个任务将是运行时间长、粗粒度的操作。它会向 System.Threading.Tasks.TaskScheduler 提示，过度订阅可能是合理的。</span>LongRunning <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     指定将任务附加到任务层次结构中的某个父级。</span>AttachedToParent <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     如果尝试附有子任务到创建的任务，指定 System.InvalidOperationException 将被引发。</span>DenyChildAttach <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     防止环境计划程序被视为已创建任务的当前计划程序。这意味着像 StartNew 或 ContinueWith 创建任务的执行操作将被视为 System.Threading.Tasks.TaskScheduler.Default</span><span class="token comment" spellcheck="true">//     当前计划程序。</span>HideScheduler <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     在延续取消的情况下，防止延续的完成直到完成先前的任务。</span>LazyCancellation <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     指定不应在延续任务前面的任务已完成运行的情况下安排延续任务。此选项对多任务延续无效。</span>NotOnRanToCompletion <span class="token operator">=</span> <span class="token number">65536</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     指定不应在延续任务前面的任务引发了未处理异常的情况下安排延续任务。此选项对多任务延续无效。</span>NotOnFaulted <span class="token operator">=</span> <span class="token number">131072</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     指定只应在延续任务前面的任务已取消的情况下安排延续任务。此选项对多任务延续无效。</span>OnlyOnCanceled <span class="token operator">=</span> <span class="token number">196608</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     指定不应在延续任务前面的任务已取消的情况下安排延续任务。此选项对多任务延续无效。</span>NotOnCanceled <span class="token operator">=</span> <span class="token number">262144</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     指定只有在延续任务前面的任务引发了未处理异常的情况下才应安排延续任务。此选项对多任务延续无效。</span>OnlyOnFaulted <span class="token operator">=</span> <span class="token number">327680</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     指定只应在延续任务前面的任务已完成运行的情况下才安排延续任务。此选项对多任务延续无效。</span>OnlyOnRanToCompletion <span class="token operator">=</span> <span class="token number">393216</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// 摘要:</span><span class="token comment" spellcheck="true">//     指定应同步执行延续任务。指定此选项后，延续任务将在导致前面的任务转换为其最终状态的相同线程上运行。如果在创建延续任务时已经完成前面的任务，则延续任务将在创建此延续任务的线程上运行。只应同步执行运行时间非常短的延续任务。</span>ExecuteSynchronously <span class="token operator">=</span> <span class="token number">524288</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="任务的层次结构（父-子任务）"><a href="#任务的层次结构（父-子任务）" class="headerlink" title="任务的层次结构（父/子任务）"></a>任务的层次结构（父/子任务）</h4><p>在一个任务的内部启动另一个任务时，任务便会形成一种层次结构，如果父任务在子任务之前结束，父任务的状态为:WaitingForChildrenToComplete,可在子任务创建时使用TaskCreationOptions指定父子任务如何运行。</p><h3 id="线程等待、取消和异常处理"><a href="#线程等待、取消和异常处理" class="headerlink" title="线程等待、取消和异常处理"></a>线程等待、取消和异常处理</h3><h4 id="线程取消和异常处理"><a href="#线程取消和异常处理" class="headerlink" title="线程取消和异常处理"></a>线程取消和异常处理</h4><p>线程间都是通过共有变量：都能访问局部变量/全局变量/数据库的一个值/硬盘文件来通信。<br>线程不能被外部停止，只能自身停止自身；或者在任务启动前停止，会抛出<code>AggregateException</code>异常的</p><p>步骤：</p><ol><li>使用<code>CancellationTokenSource</code>类的实例作为公共变量</li><li><code>CancellationTokenSource</code>类的<code>Cancel</code>方法指示线程取消。</li><li><code>IsCancellationRequested</code>属性判断是否被取消。</li></ol><p>示例代码如下：</p><pre class="line-numbers language-java"><code class="language-java">TaskFactory taskFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Task<span class="token operator">></span> taskList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>Task<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CancellationTokenSource cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string name <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"btnThreadCore_Click{0}"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    Action<span class="token operator">&lt;</span>object<span class="token operator">></span> act <span class="token operator">=</span> t <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//if (cts.IsCancellationRequested)</span>            <span class="token comment" spellcheck="true">//{</span>            <span class="token comment" spellcheck="true">//    Console.WriteLine("{0} 取消一个任务的执行", t);</span>            <span class="token comment" spellcheck="true">//}</span>            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"btnThreadCore_Click11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"{0} 执行失败"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"btnThreadCore_Click12"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"{0} 执行失败"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cts<span class="token punctuation">.</span>IsCancellationRequested<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//检查信号量</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} 放弃执行"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"{0} 执行成功"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cts<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示修改了信号量  让大家取消执行</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    taskList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>taskFactory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span>act<span class="token punctuation">,</span> name<span class="token punctuation">,</span> cts<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有启动的任务  在Cancel后放弃启动</span><span class="token punctuation">}</span>Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>taskList<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-bash"><code class="language-bash">btnThreadCore_Click1 执行成功btnThreadCore_Click0 执行成功btnThreadCore_Click3 执行成功btnThreadCore_Click2 执行成功btnThreadCore_Click4 执行成功btnThreadCore_Click5 执行成功btnThreadCore_Click7 执行成功btnThreadCore_Click6 执行成功btnThreadCore_Click8 执行成功btnThreadCore_Click9 执行成功btnThreadCore_Click10 执行成功btnThreadCore_Click11 执行失败btnThreadCore_Click13 放弃执行btnThreadCore_Click12 执行失败btnThreadCore_Click14 放弃执行btnThreadCore_Click15 放弃执行btnThreadCore_Click16 放弃执行btnThreadCore_Click17 放弃执行btnThreadCore_Click18 放弃执行btnThreadCore_Click19 放弃执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码在执行到WaitAll时会抛出<code>AggregateException</code>异常。</p><p>这就引出了多线程中的异常处理问题，在多线程的代码块中所有抛出的异常都不会被主线程截获到，只有在任务WaitAll时才会抛出异常，所以应该在异步任务中使用try-catch语句块记录日志，在WaitAll外处理异常。</p><h4 id="线程等待：给Thread、ThreadPool封装异步回调方法"><a href="#线程等待：给Thread、ThreadPool封装异步回调方法" class="headerlink" title="线程等待：给Thread、ThreadPool封装异步回调方法"></a>线程等待：给Thread、ThreadPool封装异步回调方法</h4><p>封装示例如下:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 无返回值，支持回调</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;param name="action">&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;param name="callBack">&lt;/param></span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">CallBack</span><span class="token punctuation">(</span>Action action<span class="token punctuation">,</span> Action callBack<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 摘要:</span>    <span class="token comment" spellcheck="true">//     用一个指示是否将初始状态设置为终止的布尔值初始化 System.Threading.ManualResetEvent 类的新实例。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 参数:</span>    <span class="token comment" spellcheck="true">//   initialState:</span>    <span class="token comment" spellcheck="true">//     如果为 true，则将初始状态设置为终止；如果为 false，则将初始状态设置为非终止。</span>    ManualResetEvent mre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManualResetEvent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    WaitCallback act <span class="token operator">=</span> state <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//执行主方法</span>        action<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//主方法执行完  可以执行回调方法了</span>        mre<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//回调方法的线程</span>        WaitCallback call <span class="token operator">=</span> t <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等待收到Set信号</span>            mre<span class="token punctuation">.</span><span class="token function">WaitOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行回调方法</span>            callBack<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span>act<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">CallBack</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"异步方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"回调方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-bash"><code class="language-bash">主线程异步方法回调方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对Thread的封装如下:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 无返回值，支持回调</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;param name="action">&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;param name="callBack">&lt;/param></span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">CallBack</span><span class="token punctuation">(</span>Action action<span class="token punctuation">,</span> Action callBack<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 摘要:</span>    <span class="token comment" spellcheck="true">//     用一个指示是否将初始状态设置为终止的布尔值初始化 System.Threading.ManualResetEvent 类的新实例。</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// 参数:</span>    <span class="token comment" spellcheck="true">//   initialState:</span>    <span class="token comment" spellcheck="true">//     如果为 true，则将初始状态设置为终止；如果为 false，则将初始状态设置为非终止。</span>    ManualResetEvent mre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManualResetEvent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ThreadStart act <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//执行主方法</span>        action<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//主方法执行完  可以执行回调方法了</span>        mre<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//回调方法的线程</span>        ThreadStart call <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等待收到Set信号</span>            mre<span class="token punctuation">.</span><span class="token function">WaitOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行回调方法</span>            callBack<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>act<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方式和线程池一样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;多线程基础&quot;&gt;&lt;a href=&quot;#多线程基础&quot; class=&quot;headerlink&quot; title=&quot;多线程基础&quot;&gt;&lt;/a&gt;多线程基础&lt;/h3&gt;&lt;h4 id=&quot;进程的概念&quot;&gt;&lt;a href=&quot;#进程的概念&quot; class=&quot;headerlink&quot; title=&quot;进程的
      
    
    </summary>
    
      <category term="C#高级编程" scheme="https://taffyblog.github.io/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>反射的简单使用</title>
    <link href="https://taffyblog.github.io/2017/05/14/reflection/"/>
    <id>https://taffyblog.github.io/2017/05/14/reflection/</id>
    <published>2017-05-14T13:26:13.000Z</published>
    <updated>2022-03-08T07:51:05.935Z</updated>
    
    <content type="html"><![CDATA[<h3 id="反射的用途"><a href="#反射的用途" class="headerlink" title="反射的用途"></a>反射的用途</h3><ol><li>使用 Assembly 定义和加载程序集，加载在程序集清单中列出的模块，以及从此程序集中查找类型并创建该类型的实例。<br><code>`</code>java<br>Assembly ass = Assembly.Load(“程序集完全限定名”);</li></ol><p>Assembly ass = Assembly.LoadFile(“程序集绝对路径”);</p><pre><code>2. 使用 Module 了解如下的类似信息:包含模块的程序集以及模块中的类等。您还可以获取在模块上定义的所有全局方法或其他特定的非全局方法。3. 使用 ConstructorInfo 了解如下的类似信息:构造函数的名称、参数、访问修饰符(如 public 或 private)和实现详细信息(如 abstract 或 virtual)等。4. 使用 Type 的 GetConstructors 或 GetConstructor 方法来调用特定的构造函数。5. 使用 MethodInfo 来了解如下的类似信息:方法的名称、返回类型、参数、访问修饰符(如 public 或 private)和实现详细信 息(如 abstract 或 virtual)等。使用 Type 的 GetMethods 或 GetMethod 方法来调用特定的方法。6. 使用 FieldInfo 来了解如下的类似信息:字段的名称、访问修饰符(如 public 或 private)和实现详细信息(如 static)等;并获取或设置字段值。7. 使用 EventInfo 来了解如下的类似信息:事件的名称、事件处理程序数据类型、自定义属性、声明类型和反射类型等;并添加或移除事件处理程序。8. 使用 PropertyInfo 来了解如下的类似信息:属性的名称、数据类型、声明类型、反射类型和只读或可写状态等;并获取或设置属性值。9. 使用 ParameterInfo 来了解如下的类似信息:参数的名称、数据类型、参数是输入参数还是输出参数，以及参数在方法签名中的位置等。### 反射获取属性关键代码如下:```javastatic void Main(string[] args){    Type type = typeof(Person);    object person = Activator.CreateInstance(type);//创建对象    //GetProperties()    // 摘要:    //     返回当前 System.Type 的所有公共属性。    //    // 返回结果:    //     表示当前 System.Type 的所有公共属性的 System.Reflection.PropertyInfo 对象数组。- 或 -如果当前 System.Type    //     没有公共属性，则为 System.Reflection.PropertyInfo 类型的空数组。    foreach (var prop in type.GetProperties())    {        if (prop.Name.Equals(&quot;name&quot;))        {            //            // 摘要:            //     设置指定对象的属性值。            //            // 参数:            //   obj:            //     将设置其属性值的对象。            //            //   value:            //     新的属性值。            prop.SetValue(person,&quot;李四&quot;);        }        if (prop.Name.Equals(&quot;age&quot;))        {            prop.SetValue(person,12);        }        Console.WriteLine(&quot;属性名为:&quot;+prop.Name+&quot;值为:&quot;+prop.GetValue(person));    }    Console.ReadKey();}</code></pre><p>Person类的代码如下:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> string name <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"My name is "</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span>string par<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Show方法的重载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">privateShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is privateShow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> GenericShow<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is GenericShow "</span><span class="token operator">+</span>t<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为:</p><pre class="line-numbers language-bash"><code class="language-bash">属性名为:name值为:李四属性名为:age值为:12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="反射加载泛型类"><a href="#反射加载泛型类" class="headerlink" title="反射加载泛型类"></a>反射加载泛型类</h3><p>使用反射加载泛型类时必须在后面加上”`1”,示例如下：</p><p>用于反射加载的程序集：MyReflection.dll,在此dll中定义了一个泛型类：</p><pre class="line-numbers language-java"><code class="language-java">namespace MyReflection<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DbHelper</span><span class="token operator">&lt;</span>T<span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">DbHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加载泛型类示例：</p><pre class="line-numbers language-java"><code class="language-java">Assembly ass <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"MyReflection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Type type<span class="token operator">=</span> ass<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"MyReflection.DbHelper`1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出结果为:</p><pre class="line-numbers language-bash"><code class="language-bash">DbHelper`1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>当需要创建泛型类型的实例时则需要使用MakeGenericMethod指定泛型的类型</p></blockquote><h3 id="反射调用方法"><a href="#反射调用方法" class="headerlink" title="反射调用方法"></a>反射调用方法</h3><h5 id="调用普通实例方法"><a href="#调用普通实例方法" class="headerlink" title="调用普通实例方法"></a>调用普通实例方法</h5><p>关键代码如下:</p><pre class="line-numbers language-java"><code class="language-java">var show<span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"Show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>show<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果为:</p><pre class="line-numbers language-bash"><code class="language-bash">My name is 李四<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="调用私有实例方法"><a href="#调用私有实例方法" class="headerlink" title="调用私有实例方法"></a>调用私有实例方法</h5><pre class="line-numbers language-java"><code class="language-java">Assembly ass <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"MyReflection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Type type<span class="token operator">=</span> ass<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"MyReflection.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var person <span class="token operator">=</span>  Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>var method <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"privateShow"</span><span class="token punctuation">,</span>BindingFlags<span class="token punctuation">.</span>Instance<span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>NonPublic<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为:</p><pre class="line-numbers language-bash"><code class="language-bash">This is privateShow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="调用私有构造方法"><a href="#调用私有构造方法" class="headerlink" title="调用私有构造方法"></a>调用私有构造方法</h5><pre class="line-numbers language-java"><code class="language-java">Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="调用重载方法"><a href="#调用重载方法" class="headerlink" title="调用重载方法"></a>调用重载方法</h5><pre class="line-numbers language-C#"><code class="language-C#">Assembly ass = Assembly.Load("MyReflection");Type type= ass.GetType("MyReflection.Person");var person =  Activator.CreateInstance(type);var method1 = type.GetMethod("Show",new Type[] { });var method2 = type.GetMethod("Show", new Type[] { typeof(string) });Console.WriteLine(method1.Invoke(person,null));Console.WriteLine(method2.Invoke(person,new object[] { "d"}));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为:</p><pre class="line-numbers language-bash"><code class="language-bash">My name isShow方法的重载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即调用有重载的方法时，必须指定方法的参数列表对应的Type数组。即使是无参也必须指定，不能写null。</p><h5 id="调用泛型方法"><a href="#调用泛型方法" class="headerlink" title="调用泛型方法"></a>调用泛型方法</h5><pre class="line-numbers language-java"><code class="language-java">Assembly ass <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"MyReflection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Type type<span class="token operator">=</span> ass<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"MyReflection.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var person <span class="token operator">=</span>  Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>var method <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"GenericShow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>method <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">MakeGenericMethod</span><span class="token punctuation">(</span><span class="token function">typeof</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"哈哈哈"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为:</p><pre class="line-numbers language-bash"><code class="language-bash">This is GenericShow 哈哈哈<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>即调用泛型方法需要使用Method的<code>MakeGenericMethod</code>指定泛型的类型。</p></blockquote><h5 id="调用静态方法"><a href="#调用静态方法" class="headerlink" title="调用静态方法"></a>调用静态方法</h5><pre class="line-numbers language-java"><code class="language-java">Assembly ass <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"MyReflection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Type type<span class="token operator">=</span> ass<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">"MyReflection.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var method <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">"staticShow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>null<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为:</p><pre class="line-numbers language-bash"><code class="language-bash">This is staticShow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>调用静态方法就是在Invoke时将类型实例指定为null即可。</p></blockquote><h3 id="反射的优缺点"><a href="#反射的优缺点" class="headerlink" title="反射的优缺点"></a>反射的优缺点</h3><p>优点：</p><ol><li>反射提高了程序的灵活性和扩展性。</li><li>降低耦合性，提高自适应能力。</li><li>它允许程序创建和控制任何类的对象，无需提前硬编码目标类。</li></ol><p>缺点：</p><ol><li>性能问题：使用反射基本上是一种解释操作，用于字段和方法接入时要远慢于直接代码。因此反射机制主要应用在对灵活性和拓展性要求很高的系统框架上，普通程序不建议使用。</li><li>使用反射会模糊程序内部逻辑；程序员希望在源代码中看到程序的逻辑，反射却绕过了源代码的技术，因而会带来维护的问题，反射代码比相应的直接代码更复杂。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;反射的用途&quot;&gt;&lt;a href=&quot;#反射的用途&quot; class=&quot;headerlink&quot; title=&quot;反射的用途&quot;&gt;&lt;/a&gt;反射的用途&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;使用 Assembly 定义和加载程序集，加载在程序集清单中列出的模块，以及从此程序集中查找类型并创建该
      
    
    </summary>
    
      <category term="C#高级编程" scheme="https://taffyblog.github.io/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Http请求头参数</title>
    <link href="https://taffyblog.github.io/2017/05/14/httprequestheader/"/>
    <id>https://taffyblog.github.io/2017/05/14/httprequestheader/</id>
    <published>2017-05-14T04:08:13.000Z</published>
    <updated>2022-03-08T07:51:05.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Http协议请求头参数"><a href="#Http协议请求头参数" class="headerlink" title="Http协议请求头参数"></a>Http协议请求头参数</h2><h4 id="1Accept-Language"><a href="#1Accept-Language" class="headerlink" title="1Accept-Language"></a>1Accept-Language</h4><pre class="line-numbers language-S"><code class="language-S">Accept-Language: zh-cn,zh;q=0.5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　意思：浏览器支持的语言分别是中文和简体中文，优先支持简体中文。</p><p>　　详解：</p><p>　　Accept-Language表示浏览器所支持的语言类型；</p><p>　　zh-cn表示简体中文；zh 表示中文；</p><p>　　q是权重系数，范围 0 =&lt; q &lt;= 1，q 值越大，请求越倾向于获得其“;”之前的类型表示的内容，若没有指定 q 值，则默认为1，若被赋值为0，则用于提醒服务器哪些是浏览器不接受的内容类型。</p><h4 id="2-Accept-Charset"><a href="#2-Accept-Charset" class="headerlink" title="2.Accept-Charset"></a>2.Accept-Charset</h4><pre class="line-numbers language-S"><code class="language-S">Accept-Charset: GB2312,utf-8;q=0.7,*;q=0.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>意思：浏览器支持的字符编码分别是 GB2312、utf-8 和任意字符，优先顺序是 GB2312、utf-8、*。</p><p>　　详解：</p><p>　　Accept-Charset告诉 Web 服务器，浏览器可以接受哪些字符编码；</p><p>　　GB2312是中国国家标准简体中文字符集，全称《信息交换用汉字编码字符集·基本集》，又称GB0，由中国国家标准总局发布，1981年5月1日实施。GB2312 编码通行于中国大陆；新加坡等地也采用此编码。</p><p>　　utf-8是 Unicode 的一种变长字符编码又称万国码，由 Ken Thompson 于1992年创建，现在已经标准化为 RFC 3629。</p><p>　　<em>表示任意字符编码，虽然 q 都是等于 0.7，但明确指定的 GB2312,utf-8 比 </em> 具有更高的优先级。</p><h4 id="3-Accept"><a href="#3-Accept" class="headerlink" title="3.Accept"></a>3.Accept</h4><pre class="line-numbers language-S"><code class="language-S">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　意思：浏览器支持的 MIME 类型分别是 text/html、application/xhtml+xml、application/xml 和 <em>/</em>，优先顺序是它们从左到右的排列顺序。</p><p>　　详解：</p><p>　　Accept表示浏览器支持的 MIME 类型；</p><p>　　MIME的英文全称是 Multipurpose Internet Mail Extensions（多功能 Internet 邮件扩充服务），它是一种多用途网际邮件扩充协议，在1992年最早应用于电子邮件系统，但后来也应用到浏览器。</p><p>　　text/html,application/xhtml+xml,application/xml 都是 MIME 类型，也可以称为媒体类型和内容类型，斜杠前面的是 type（类型），斜杠后面的是 subtype（子类型）；type 指定大的范围，subtype 是 type 中范围更明确的类型，即大类中的小类。</p><p>　　Text：用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的；</p><p>　　text/html表示 html 文档；</p><p>　　Application：用于传输应用程序数据或者二进制数据；</p><p>　　application/xhtml+xml表示 xhtml 文档；</p><p>　　application/xml表示 xml 文档。</p><p>  application/json表示 json 文档。</p><h4 id="4-Accept-Encoding"><a href="#4-Accept-Encoding" class="headerlink" title="4.Accept-Encoding"></a>4.Accept-Encoding</h4><pre class="line-numbers language-S"><code class="language-S">Accept-Encoding: gzip, deflate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　意思：浏览器支持的压缩编码是 gzip 和 deflate。</p><p>　　详解：</p><p>　　Accept-Encoding表示浏览器有能力解码的编码类型；</p><p>　　gzip是 GNU zip 的缩写，它是一个 GNU 自由软件的文件压缩程序，也经常用来表示 gzip 这种文件格式。</p><p>　　deflate是同时使用了 LZ77 算法与哈夫曼编码（Huffman Coding）的一个无损数据压缩算法。</p><h4 id="5-User-Agent"><a href="#5-User-Agent" class="headerlink" title="5.User-Agent"></a>5.User-Agent</h4><pre class="line-numbers language-S"><code class="language-S">User-Agent: Mozilla/5.0 (compatible;域名)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　意思：使用的用户代理是 Mozilla/5.0 (compatible; 域名)。</p><p>　　详解：</p><p>　　User-Agent（用户代理），简称 UA，它是一个特殊字符串头，使得服务器能够识别客户端使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</p><p>　　Mozilla/5.0：Mozilla 是浏览器名，版本是 5.0；</p><p>　　compatible（兼容的）表示平台是兼容模式；</p><h4 id="6-Host"><a href="#6-Host" class="headerlink" title="6.Host"></a>6.Host</h4><pre class="line-numbers language-S"><code class="language-S">    Host: 域名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　Host表示请求的服务器网址；</p><h4 id="7-Connection"><a href="#7-Connection" class="headerlink" title="7.Connection"></a>7.Connection</h4><pre class="line-numbers language-S"><code class="language-S">Connection: Keep-Alive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　Connection表示客户端与服务连接类型；</p><p>　　Keep-Alive表示持久连接；</p><blockquote><p>除协议的请求头外，还可以添加自定义请求头</p></blockquote><p><a href="http://www.cnblogs.com/MCHang/archive/2013/03/19/2968827.html" target="_blank" rel="noopener">原文地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Http协议请求头参数&quot;&gt;&lt;a href=&quot;#Http协议请求头参数&quot; class=&quot;headerlink&quot; title=&quot;Http协议请求头参数&quot;&gt;&lt;/a&gt;Http协议请求头参数&lt;/h2&gt;&lt;h4 id=&quot;1Accept-Language&quot;&gt;&lt;a href=&quot;#1
      
    
    </summary>
    
      <category term="C#高级编程" scheme="https://taffyblog.github.io/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>HttpClient类的使用</title>
    <link href="https://taffyblog.github.io/2017/05/14/httpclient/"/>
    <id>https://taffyblog.github.io/2017/05/14/httpclient/</id>
    <published>2017-05-14T04:00:13.000Z</published>
    <updated>2022-03-08T07:51:05.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用HttpClient异步调用Web服务"><a href="#使用HttpClient异步调用Web服务" class="headerlink" title="使用HttpClient异步调用Web服务"></a>使用HttpClient异步调用Web服务</h2><h4 id="简单的调用示例"><a href="#简单的调用示例" class="headerlink" title="简单的调用示例"></a>简单的调用示例</h4><p>代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"调用了GetData"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> async <span class="token keyword">void</span> <span class="token function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    HttpClient httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HttpResponseMessage response <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//异步发送Get请求，此地址为微软示例Web服务</span>    response <span class="token operator">=</span> await httpClient<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">"http://services.odata.org/Northwind/Northwind.svc/Regions"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>IsSuccessStatusCode<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//输出响应状态</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Response Status Code:"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>StatusCode <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>ReasonPhrase<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取响应结果</span>        string responseBodyAsText <span class="token operator">=</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Result<span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Received payload of "</span> <span class="token operator">+</span> responseBodyAsText<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token string">" characters"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><pre class="line-numbers language-S"><code class="language-S">调用了GetDataResponse Status Code:OK OKReceived payload of 3379 characters<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为HttpClient类使用GetAsync方法调用，且使用了await关键字，所以Main方法可以在GetAsync方法调用Web服务的同时执行完毕。<br>因此Main方法输出到屏幕上的消息先显示。</p><blockquote><p>HttpClient对象是线程安全的，所以一个HttpClient对象就可以用于处理多个请求。HttpClient的每个实例都维护它自己的线程池.</p></blockquote><h4 id="请求和响应头"><a href="#请求和响应头" class="headerlink" title="请求和响应头"></a>请求和响应头</h4><p>前面的示例中，发出请求没有设置或改变任何标题，HttpClient的DefaultRequestHeaders属性允许设置或改变标题。</p><p>另一篇文章列举了部分常用Http请求头参数：<a href="http://TaffyBlog.github.io/2017/05/14/httprequestheader">Http请求头参数</a></p><pre class="line-numbers language-S"><code class="language-S">static void Main(string[] args){    GetData();    Console.WriteLine("调用了GetData");    Console.ReadKey();}private static async void GetData(){    HttpClient httpClient = new HttpClient();    //设置请求头    httpClient.DefaultRequestHeaders.Add("Accept","application/json;odata=verbose");    HttpResponseMessage response = null;    //异步发送Get请求，此地址为微软示例Web服务    response = await httpClient.GetAsync("http://services.odata.org/Northwind/Northwind.svc/Regions");    if (response.IsSuccessStatusCode)    {        //输出响应状态        Console.WriteLine("Response Status Code:" + response.StatusCode + " " + response.ReasonPhrase);        //获取响应结果        string responseBodyAsText = response.Content.ReadAsStringAsync().Result;        Console.WriteLine("Received payload of " + responseBodyAsText.Length + " characters");        Console.WriteLine("请求头如下:");        EnumerateHeaders(httpClient.DefaultRequestHeaders);        Console.WriteLine("响应头如下:");        EnumerateHeaders(response.Headers);    }}private static void EnumerateHeaders(HttpHeaders headers){    foreach (var header in headers)    {        var value = "";        foreach (var val in header.Value)        {            value = val + " ";        }        Console.WriteLine("Header:" + header.Key + " Value:" + value);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HttpContent"><a href="#HttpContent" class="headerlink" title="HttpContent"></a>HttpContent</h4><p>表示 HTTP 实体正文和内容标头的基类。</p><p>响应中的Conten属性返回一个HttpContent对象。前面的例子中使用ReadAsStringAsync方法来获取其内容。</p><h4 id="HttpMessageHandler"><a href="#HttpMessageHandler" class="headerlink" title="HttpMessageHandler"></a>HttpMessageHandler</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用HttpClient异步调用Web服务&quot;&gt;&lt;a href=&quot;#使用HttpClient异步调用Web服务&quot; class=&quot;headerlink&quot; title=&quot;使用HttpClient异步调用Web服务&quot;&gt;&lt;/a&gt;使用HttpClient异步调用Web服务&lt;/
      
    
    </summary>
    
      <category term="C#高级编程" scheme="https://taffyblog.github.io/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>dynamic类型</title>
    <link href="https://taffyblog.github.io/2017/05/13/dynamic/"/>
    <id>https://taffyblog.github.io/2017/05/13/dynamic/</id>
    <published>2017-05-13T03:00:13.000Z</published>
    <updated>2022-03-08T07:51:05.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h2><h4 id="忽略编译时类型检查"><a href="#忽略编译时类型检查" class="headerlink" title="忽略编译时类型检查"></a>忽略编译时类型检查</h4><p>dynamic类型允许编写忽略编译期间的类型检查代码。编译器假定，给dynamic类型的对象的任何操作都是有效的。如果该操作无效，则在代码运行之前不会检测该错误。<br>示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        var varPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dynamic dynamicPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        varPerson<span class="token punctuation">.</span><span class="token function">GetStr</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误 CS1501    “GetStr”方法没有采用 1 个参数的重载</span>        dynamicPerson<span class="token punctuation">.</span><span class="token function">GetStr</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无异常</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> string <span class="token function">GetStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行期间改变类型"><a href="#运行期间改变类型" class="headerlink" title="运行期间改变类型"></a>运行期间改变类型</h4><p>与var关键字不同,定义为dynamic的对象可以在运行期间改变其类型。<br>例如：不能把int类型强制转换为Person对象，如果对象是动态对象，就可以把它从int变成Person类型。<br>示例如下:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        dynamic dyn<span class="token punctuation">;</span>        dyn <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>dyn<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>dyn<span class="token punctuation">)</span><span class="token punctuation">;</span>        dyn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>dyn<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>dyn<span class="token punctuation">.</span><span class="token function">GetStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> string <span class="token function">GetStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><pre class="line-numbers language-bash"><code class="language-bash">System.Int32100ConsoleApplication2.PersonHello World<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ASP.NET MVC中的ViewBag即是dynamic类型</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用规则&quot;&gt;&lt;a href=&quot;#使用规则&quot; class=&quot;headerlink&quot; title=&quot;使用规则&quot;&gt;&lt;/a&gt;使用规则&lt;/h2&gt;&lt;h4 id=&quot;忽略编译时类型检查&quot;&gt;&lt;a href=&quot;#忽略编译时类型检查&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="C#高级编程" scheme="https://taffyblog.github.io/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>ASP.NET断点续传大文件</title>
    <link href="https://taffyblog.github.io/2017/05/12/aspdownbigfile/"/>
    <id>https://taffyblog.github.io/2017/05/12/aspdownbigfile/</id>
    <published>2017-05-12T02:42:19.000Z</published>
    <updated>2022-03-08T07:51:05.897Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载而来，但忘了从哪转的了</p></blockquote><p>IE的自带下载功能中没有断点续传功能，要实现断点续传功能，需要用到HTTP协议中鲜为人知的几个响应头和请求头。<br>一. 两个必要响应头Accept-Ranges、ETag<br>        客户端每次提交下载请求时，服务端都要添加这两个响应头，以保证客户端和服务端将此下载识别为可以断点续传的下载：<br>Accept-Ranges：告知下载客户端这是一个可以恢复续传的下载，存放本次下载的开始字节位置、文件的字节大小；<br>ETag：保存文件的唯一标识（我在用的文件名+文件最后修改时间，以便续传请求时对文件进行验证）；<br>Last-Modified：可选响应头，存放服务端文件的最后修改时间，用于验证</p><p>二. 一个重要请求头Range<br>Range：首次下载时，Range头为null，此时服务端的响应头中必须添加响应头Accept-Ranges、ETag；<br>              续传请求时，其值表示客户端已经收到的字节数，即本次下载的开始字节位置，服务端依据这个 值从相应位置读取数据发送到客户端。</p><p>三. 用于验证的请求头If-Range、<br>       当响应头中包含有Accept-Ranges、ETag时，续传请求时，将包含这些请求头：<br>If-Range：对应响应头ETag的值；<br>Unless-Modified-Since：对应响应头Last-Modified的值。<br>        续传请求时，为了保证客户端与服务端的文件的一致性和正确性，有必要对文件进行验证，验证需要自己写验证代码，就根据解析这两个请求头的值，将客户端已下载的部分与服务端的文件进行对比，如果不吻合，则从头开始下载，如果吻合，则断点续传。</p><p>四.  速度限制<br>        程序中加入了速度限制，用于对客户端进行权限控制的流量限制。</p><p>五. 其它注意事项<br>      如：文件名乱码的问题、文件名中空格变加号、强制客户端显示下载对话框等，详见源码注释：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//// &lt;summary></span><span class="token comment" spellcheck="true">/// 下载文件，支持大文件、续传、速度限制。支持续传的响应头Accept-Ranges、ETag，请求头Range 。</span><span class="token comment" spellcheck="true">/// Accept-Ranges：响应头，向客户端指明，此进程支持可恢复下载.实现后台智能传输服务（BITS），值为：bytes；</span><span class="token comment" spellcheck="true">/// ETag：响应头，用于对客户端的初始（200）响应，以及来自客户端的恢复请求，</span><span class="token comment" spellcheck="true">/// 必须为每个文件提供一个唯一的ETag值（可由文件名和文件最后被修改的日期组成），这使客户端软件能够验证它们已经下载的字节块是否仍然是最新的。</span><span class="token comment" spellcheck="true">/// Range：续传的起始位置，即已经下载到客户端的字节数，值如：bytes=1474560- 。</span><span class="token comment" spellcheck="true">/// 另外：UrlEncode编码后会把文件名中的空格转换中+（+转换为%2b），但是浏览器是不能理解加号为空格的，所以在浏览器下载得到的文件，空格就变成了加号；</span><span class="token comment" spellcheck="true">/// 解决办法：UrlEncode 之后, 将 "+" 替换成 "%20"，因为浏览器将%20转换为空格</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;param name="httpContext">当前请求的HttpContext&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;param name="filePath">下载文件的物理路径，含路径、文件名&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;param name="speed">下载速度：每秒允许下载的字节数&lt;/param></span><span class="token comment" spellcheck="true">/// &lt;returns>true下载成功，false下载失败&lt;/returns></span><span class="token keyword">public</span> <span class="token keyword">static</span> bool <span class="token function">DownloadFile</span><span class="token punctuation">(</span>HttpContext httpContext<span class="token punctuation">,</span> string filePath<span class="token punctuation">,</span> <span class="token keyword">long</span> speed<span class="token punctuation">)</span><span class="token punctuation">{</span>   bool ret <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token keyword">try</span>   <span class="token punctuation">{</span>       <span class="token operator">--</span>验证：HttpMethod，请求的文件是否存在#region<span class="token operator">--</span>验证：HttpMethod，请求的文件是否存在       <span class="token keyword">switch</span> <span class="token punctuation">(</span>httpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>HttpMethod<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//目前只支持GET和HEAD方法</span>          <span class="token keyword">case</span> <span class="token string">"GET"</span><span class="token operator">:</span>           <span class="token keyword">case</span> <span class="token string">"HEAD"</span><span class="token operator">:</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">default</span><span class="token operator">:</span>               httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token number">501</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       #endregion       定义局部变量#region 定义局部变量       <span class="token keyword">long</span> startBytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> packSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分块读取，每块10K bytes</span>       string fileName <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>       FileStream myFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">,</span> FileAccess<span class="token punctuation">.</span>Read<span class="token punctuation">,</span> FileShare<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>       BinaryReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryReader</span><span class="token punctuation">(</span>myFile<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">long</span> fileLength <span class="token operator">=</span> myFile<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>       <span class="token keyword">int</span> sleep <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">Ceiling</span><span class="token punctuation">(</span><span class="token number">1000.0</span> <span class="token operator">*</span> packSize <span class="token operator">/</span> speed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//毫秒数：读取下一数据块的时间间隔</span>       string lastUpdateTiemStr <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">GetLastWriteTimeUtc</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       string eTag <span class="token operator">=</span> HttpUtility<span class="token punctuation">.</span><span class="token function">UrlEncode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span> <span class="token operator">+</span> lastUpdateTiemStr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//便于恢复下载时提取请求头;</span>       #endregion <span class="token operator">--</span>验证：文件是否太大，是否是续传，且在上次被请求的日期之后是否被修改过<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>#region<span class="token operator">--</span>验证：文件是否太大，是否是续传，且在上次被请求的日期之后是否被修改过<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>myFile<span class="token punctuation">.</span>Length <span class="token operator">></span> Int32<span class="token punctuation">.</span>MaxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//-------文件太大了-------</span>     httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token number">413</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//请求实体太大</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>httpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">"If-Range"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//对应响应头ETag：文件名+文件最后修改时间</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//----------上次被请求的日期之后被修改过--------------</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>httpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">"If-Range"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">!=</span> eTag<span class="token punctuation">)</span>     <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//文件修改过</span>         httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token number">412</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//预处理失败</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> #endregion         <span class="token keyword">try</span>         <span class="token punctuation">{</span>             <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>添加重要响应头、解析请求头、相关验证<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>#region <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>添加重要响应头、解析请求头、相关验证<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>             httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Buffer <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>             httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AddHeader</span><span class="token punctuation">(</span><span class="token string">"Content-MD5"</span><span class="token punctuation">,</span> <span class="token function">GetMD5Hash</span><span class="token punctuation">(</span>myFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于验证文件</span>             httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AddHeader</span><span class="token punctuation">(</span><span class="token string">"Accept-Ranges"</span><span class="token punctuation">,</span> <span class="token string">"bytes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重要：续传必须</span>             httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AppendHeader</span><span class="token punctuation">(</span><span class="token string">"ETag"</span><span class="token punctuation">,</span> <span class="token string">"\""</span> <span class="token operator">+</span> eTag <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重要：续传必须</span>             httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AppendHeader</span><span class="token punctuation">(</span><span class="token string">"Last-Modified"</span><span class="token punctuation">,</span> lastUpdateTiemStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把最后修改日期写入响应                </span>             httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">"application/octet-stream"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//MIME类型：匹配任意文件类型</span>             httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AddHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> HttpUtility<span class="token punctuation">.</span><span class="token function">UrlEncode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AddHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Length"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>fileLength <span class="token operator">-</span> startBytes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AddHeader</span><span class="token punctuation">(</span><span class="token string">"Connection"</span><span class="token punctuation">,</span> <span class="token string">"Keep-Alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>ContentEncoding <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>httpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">"Range"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>             <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//------如果是续传请求，则获取续传的起始位置，即已经下载到客户端的字节数------</span>                 httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> <span class="token number">206</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重要：续传必须，表示局部范围响应。初始下载时默认为200</span>                 string<span class="token punctuation">[</span><span class="token punctuation">]</span> range <span class="token operator">=</span> httpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">"Range"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">'-'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"bytes=1474560-"</span>                 startBytes <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt64</span><span class="token punctuation">(</span>range<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//已经下载的字节数，即本次下载的开始位置  </span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>startBytes <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> startBytes <span class="token operator">>=</span> fileLength<span class="token punctuation">)</span>                 <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//无效的起始位置</span>                     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>startBytes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//------如果是续传请求，告诉客户端本次的开始字节数，总长度，以便客户端将续传数据追加到startBytes位置后----------</span>                 httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">AddHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Range"</span><span class="token punctuation">,</span> string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">" bytes {0}-{1}/{2}"</span><span class="token punctuation">,</span> startBytes<span class="token punctuation">,</span> fileLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> fileLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             #endregion             <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>向客户端发送数据块<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>#region <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>向客户端发送数据块<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>             br<span class="token punctuation">.</span>BaseStream<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span>startBytes<span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> maxCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">Ceiling</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fileLength <span class="token operator">-</span> startBytes <span class="token operator">+</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> packSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分块下载，剩余部分可分成的块数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxCount <span class="token operator">&amp;&amp;</span> httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>IsClientConnected<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//客户端中断连接，则暂停</span>                httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">BinaryWrite</span><span class="token punctuation">(</span>br<span class="token punctuation">.</span><span class="token function">ReadBytes</span><span class="token punctuation">(</span>packSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sleep <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>sleep<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            #endregion        <span class="token punctuation">}</span>        <span class="token keyword">catch</span>        <span class="token punctuation">{</span>            ret <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            br<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myFile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token punctuation">}</span>   <span class="token keyword">catch</span>    <span class="token punctuation">{</span>        ret <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span>httpContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此句可以省略...</span><span class="token comment" spellcheck="true">//调用惯例:</span>Page<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bool success <span class="token operator">=</span> <span class="token function">ResponseFile</span><span class="token punctuation">(</span>Page<span class="token punctuation">.</span>Request<span class="token punctuation">,</span>Page<span class="token punctuation">.</span>Response<span class="token punctuation">,</span> <span class="token string">"filename"</span><span class="token punctuation">,</span> @<span class="token string">"C:\download.date"</span><span class="token punctuation">,</span> <span class="token number">1024000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"下载文件出错!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Page<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">End</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转载而来，但忘了从哪转的了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;IE的自带下载功能中没有断点续传功能，要实现断点续传功能，需要用到HTTP协议中鲜为人知的几个响应头和请求头。&lt;br&gt;一. 两个必要响应头Accept-Ranges、ETag&lt;b
      
    
    </summary>
    
      <category term="随笔" scheme="https://taffyblog.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="代码段" scheme="https://taffyblog.github.io/tags/%E4%BB%A3%E7%A0%81%E6%AE%B5/"/>
    
      <category term="ASP.NET" scheme="https://taffyblog.github.io/tags/ASP-NET/"/>
    
  </entry>
  
  <entry>
    <title>从富文本(HTML字符串)中获取图片</title>
    <link href="https://taffyblog.github.io/2017/05/12/gethtmlimg/"/>
    <id>https://taffyblog.github.io/2017/05/12/gethtmlimg/</id>
    <published>2017-05-12T02:19:13.000Z</published>
    <updated>2022-03-08T07:51:05.908Z</updated>
    
    <content type="html"><![CDATA[<p>示例代码如下:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--从富文本(HTML字符串)中获取图片--></span><span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  var str = '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>hehehe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a.jpg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b.jpg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c.jpg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>';  function Getarticleimg() {  var reg =/\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img[^\</span><span class="token punctuation">></span></span>]*[\/]?\>/ig;  var result = str.match(reg);  if(result)  {      for (i = 0; i &lt; result.length; i++)       {             result[i].replace( /src=(\"|\')?([^\"\>]*)(\"|\')?( |>|\/)/ig, function( $1,$2,$3,$4 ){                     result[i] = $3; } );          }        return result;  }  else  {     return "文章中没有找到图片！请您上传图片。";  }  //-->  }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:Getarticleimg()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;示例代码如下:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;&amp;lt;!--从富文本
      
    
    </summary>
    
      <category term="随笔" scheme="https://taffyblog.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="javascript" scheme="https://taffyblog.github.io/tags/javascript/"/>
    
      <category term="正则表达式" scheme="https://taffyblog.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>WinForm启动时自动以管理员身份运行</title>
    <link href="https://taffyblog.github.io/2017/05/12/identityrun/"/>
    <id>https://taffyblog.github.io/2017/05/12/identityrun/</id>
    <published>2017-05-12T02:16:13.000Z</published>
    <updated>2022-03-08T07:51:05.910Z</updated>
    
    <content type="html"><![CDATA[<p>关键部分代码如下:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 应用程序的主入口点。</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token punctuation">[</span>STAThread<span class="token punctuation">]</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//获得当前windows登录用户标识</span>   System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span>WindowsIdentity identity <span class="token operator">=</span> System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span>WindowsIdentity<span class="token punctuation">.</span><span class="token function">GetCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建Windows用户主题</span>    Application<span class="token punctuation">.</span><span class="token function">EnableVisualStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span>WindowsPrincipal principal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span>WindowsPrincipal</span><span class="token punctuation">(</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断登录用户是否为管理员</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">IsInRole</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Security<span class="token punctuation">.</span>Principal<span class="token punctuation">.</span>WindowsBuiltInRole<span class="token punctuation">.</span>Administrator<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Application<span class="token punctuation">.</span><span class="token function">EnableVisualStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Application<span class="token punctuation">.</span><span class="token function">SetCompatibleTextRenderingDefault</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Application<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Loign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建启动对象</span>        System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>ProcessStartInfo startInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>ProcessStartInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置运行文件</span>        startInfo<span class="token punctuation">.</span>FileName <span class="token operator">=</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>ExecutablePath<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置启动参数</span>        startInfo<span class="token punctuation">.</span>Arguments <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        startInfo<span class="token punctuation">.</span>Verb <span class="token operator">=</span> <span class="token string">"runas"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不是管理员则启动UAC</span>        System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>Process<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>startInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Forms<span class="token punctuation">.</span>Application<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关键部分代码如下:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;/// &amp;lt;s
      
    
    </summary>
    
      <category term="随笔" scheme="https://taffyblog.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="WinForm" scheme="https://taffyblog.github.io/tags/WinForm/"/>
    
  </entry>
  
  <entry>
    <title>使用operator进行运算符重载</title>
    <link href="https://taffyblog.github.io/2017/05/11/operator/"/>
    <id>https://taffyblog.github.io/2017/05/11/operator/</id>
    <published>2017-05-11T13:47:13.000Z</published>
    <updated>2022-03-08T07:51:05.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用operator关键字"><a href="#使用operator关键字" class="headerlink" title="使用operator关键字"></a>使用operator关键字</h2><p> 运算符重载的声明方式与方法相同，但operator关键字告诉编译器，它实际上是一个自定义的运算符重载,后面是相关运算符的实际符号。    </p><blockquote><p>C#要求所有的运算符重载都声明为public和static,这表示它们与它们的类或结构相关联，而不是与某个特定实例相关联，所以运算符重载的代码体不能访问非静态类成员，也不能访问this标识符。</p></blockquote><p> 下面实现了一个重载自定义类型Point的’+’运算符和’*’运算符：</p><pre class="line-numbers language-c#"><code class="language-c#">class Program{    static void Main(string[] args)    {        Point p1 = new Point(1.0,2.0);        Point p2 = new Point(4.0,5.0);        var pSum = p1 + p2;        Console.WriteLine(pSum.X+","+pSum.Y);        var p = p1 * 2;        Console.WriteLine(p.X+","+p.Y);    }}/// <summary>/// 定义Point类/// </summary>class Point{    public Point()    {     }    public Point(double x,double y)    {        this._x = x;        this._y = y;    }    private double _x;    public double X    {        get { return _x; }        set { _x = value; }    }    private double _y;    public double Y    {        get { return _y; }        set { _y = value; }    }    /// <summary>    /// 将两个Point值相加    /// </summary>    /// <param name="lhs"></param>    /// <param name="rhs"></param>    /// <returns></returns>    public static Point operator +(Point lhs,Point rhs)    {        return new Point(lhs.X+rhs.X,lhs.Y+rhs.Y);    }    /// <summary>    /// 将Point扩大rhs倍    /// </summary>    /// <param name="lhs"></param>    /// <param name="rhs"></param>    /// <returns></returns>    public static Point operator *(Point lhs,int rhs)    {        return new Point(lhs.X*Math.Abs(rhs),lhs.Y*Math.Abs(rhs));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>C#不允许重载”=”运算符，但如果重载了”+”运算符，编译器就会自动使用“+”运算符的重载来执行“+=”运算符的操作，其他运算符类似。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用operator关键字&quot;&gt;&lt;a href=&quot;#使用operator关键字&quot; class=&quot;headerlink&quot; title=&quot;使用operator关键字&quot;&gt;&lt;/a&gt;使用operator关键字&lt;/h2&gt;&lt;p&gt; 运算符重载的声明方式与方法相同，但operator
      
    
    </summary>
    
      <category term="C#高级编程" scheme="https://taffyblog.github.io/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>程序集和应用程序域</title>
    <link href="https://taffyblog.github.io/2017/05/10/assemblies/"/>
    <id>https://taffyblog.github.io/2017/05/10/assemblies/</id>
    <published>2017-05-10T14:47:13.000Z</published>
    <updated>2022-03-08T07:51:05.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序集的概念"><a href="#程序集的概念" class="headerlink" title="程序集的概念"></a>程序集的概念</h2><p>程序集是.NET应用程序的部署单元。.NET应用程序包含一个或者多个程序集。通常扩展名是EXE或者DLL的.NET可执行程序称为程序集。</p><h2 id="程序集的结构"><a href="#程序集的结构" class="headerlink" title="程序集的结构"></a>程序集的结构</h2><p>程序集由描述它的程序集元数据、描述导出类型和方法的类型元数据、MSIL代码和资源组成。所有这些部分都在一个文件中，或者分布在几个文件中。</p><h2 id="程序集清单"><a href="#程序集清单" class="headerlink" title="程序集清单"></a>程序集清单</h2><ul><li>是元数据的一部分，描述了程序集和引用它所需要的所有信息。由以下部分组成</li><li>标识(名称，版本，文化和公钥)</li><li>属于该程序集的一个文件列表。</li><li>被引用程序集的列表</li><li>一组许可请求，即运行这个程序集需要的许可。</li><li>导出的类型</li></ul><h2 id="程序集的特性"><a href="#程序集的特性" class="headerlink" title="程序集的特性"></a>程序集的特性</h2><p>在AssemblyInfo.cs中。System.Reflection名称空间定义的特性列表如下:<br>|Method | 含义 |<br>| :———: | :———–: |<br>|AssemblyCompany | 指定公司名 |<br>| AssemblyConfiguration| 指定构建信息，例如调试或零售信息|<br>| AssemblyCopyright and AssemblyTrademark | 包含版权和商标信息 |<br>| AssemblyDefaultAlias   | 为程序集指定别名     |<br>| AssemblyDescription | 描述程序集或产品|<br>| AssemblyProduct | 描述程序所属的产品名称|<br>| AssemblyTitle | 为程序集提供一个友好的名称|<br>| AssemblyCulture | 定义程序集文化 |<br>| AssemblyInfomationalVersion | 版本信息,不用于版本检查|<br>| AssemblyVersion| 程序集版本号    |<br>| AssemblyFileVersion|文件版本，显示在Windows属性窗口中，对.NET行为无影响 |</p><h2 id="应用程序域"><a href="#应用程序域" class="headerlink" title="应用程序域"></a>应用程序域</h2><p>在.NET之前的技术中，进程作为独立的边界来使用，每个进程都有其私有的虚拟内存；运行在一个进程中的应用程序不能写入另一个应用程序的内存，也不会因为这种方式破坏其他应用程序。该进程用作应用程序之间的一个独立而安全的边界。在.NET体系结构中，应用程序有一个新的边界：应用程序域。</p><p>使用.NET建立的可执行程序 *.exe，并没有直接承载到进程当中，而是承载到应用程序域（AppDomain）当中。应用程序域是.NET引入的一个新概念，它比进程所占用的资源要少，可以被看作是一个轻量级的进程。<br>在一个进程中可以包含多个应用程序域，一个应用程序域可以装载一个可执行程序（*.exe）或者多个程序集（*.dll）。这样可以使应用程序域之间实现深度隔离，即使进程中的某个应用程序域出现错误，也不会影响其他应用程序域的正常运作。</p><h3 id="通过CreateDomain方法可以建立一个新的应用程序域。"><a href="#通过CreateDomain方法可以建立一个新的应用程序域。" class="headerlink" title="通过CreateDomain方法可以建立一个新的应用程序域。"></a>通过CreateDomain方法可以建立一个新的应用程序域。</h3><p>下面的例子将使用CreateDomain建立一个应用程序域，并使用Load方法加载程序集Model.dll。最后使用GetAssemblies方法，列举此应用程序域中的所有程序集。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    var appDomain <span class="token operator">=</span> AppDomain<span class="token punctuation">.</span><span class="token function">CreateDomain</span><span class="token punctuation">(</span><span class="token string">"NewAppDomain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    appDomain<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"Model"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foreach</span> <span class="token punctuation">(</span>var assembly in appDomain<span class="token punctuation">.</span><span class="token function">GetAssemblies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"{0}\n----------------------------"</span><span class="token punctuation">,</span>            assembly<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：当加载程序集后，就无法把它从AppDomain中卸载，只能把整个AppDomain卸载。</p></blockquote><p>当需要在AppDomain加载可执行程序时，可以使用ExecuteAssembly方法。</p><pre class="line-numbers language-java"><code class="language-java">AppDomain<span class="token punctuation">.</span><span class="token function">ExecuteAssembly</span><span class="token punctuation">(</span><span class="token string">"Example.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="卸载AppDomain"><a href="#卸载AppDomain" class="headerlink" title="卸载AppDomain"></a>卸载AppDomain</h3><p>通过Unload方法可以卸载AppDomain，在AppDomain卸载时将会触发DomainUnload事件。</p><h3 id="在AppDomain中建立程序集中指定类的对象"><a href="#在AppDomain中建立程序集中指定类的对象" class="headerlink" title="在AppDomain中建立程序集中指定类的对象"></a>在AppDomain中建立程序集中指定类的对象</h3><p>使用CreateInstance方法，能建立程序集中指定类的对像。但使用此方法将返回一个ObjectHandle对象，若要将此值转化为原类型，可调用Unwrap方法。</p><pre class="line-numbers language-java"><code class="language-java">namespace Test<span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">{</span>         <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             var person<span class="token operator">=</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>AppDomain<span class="token punctuation">.</span>CurrentDomain                          <span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span><span class="token string">"Model"</span><span class="token punctuation">,</span><span class="token string">"Model.Person"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             person<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>             person<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Leslie"</span><span class="token punctuation">;</span>             person<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>             Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"{0}'s age is {1}!"</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>person<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>namespace Model<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>    <span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">int</span> ID          <span class="token punctuation">{</span>              get<span class="token punctuation">;</span>              set<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">public</span> string Name          <span class="token punctuation">{</span>               get<span class="token punctuation">;</span>               set<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">public</span> <span class="token keyword">int</span> Age          <span class="token punctuation">{</span>               get<span class="token punctuation">;</span>               set<span class="token punctuation">;</span>          <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="共享程序集"><a href="#共享程序集" class="headerlink" title="共享程序集"></a>共享程序集</h2><p>即GAC(全局程序集缓存)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;程序集的概念&quot;&gt;&lt;a href=&quot;#程序集的概念&quot; class=&quot;headerlink&quot; title=&quot;程序集的概念&quot;&gt;&lt;/a&gt;程序集的概念&lt;/h2&gt;&lt;p&gt;程序集是.NET应用程序的部署单元。.NET应用程序包含一个或者多个程序集。通常扩展名是EXE或者DLL的.
      
    
    </summary>
    
      <category term="C#高级编程" scheme="https://taffyblog.github.io/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="程序集" scheme="https://taffyblog.github.io/tags/%E7%A8%8B%E5%BA%8F%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>使用yield语句创建枚举器</title>
    <link href="https://taffyblog.github.io/2017/05/10/yield/"/>
    <id>https://taffyblog.github.io/2017/05/10/yield/</id>
    <published>2017-05-10T13:47:13.000Z</published>
    <updated>2022-03-08T07:51:05.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建枚举器"><a href="#创建枚举器" class="headerlink" title="创建枚举器"></a>创建枚举器</h2><p>yield return 语句返回集合的一个元素，并移动到下一个元素上。yield break可停止迭代</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        TestCollection c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">foreach</span> <span class="token punctuation">(</span>var item in c<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 自定义集合类</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">class</span> <span class="token class-name">TestCollection</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>string<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Add</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> IEnumerator<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">foreach</span> <span class="token punctuation">(</span>var item in list<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            yield <span class="token keyword">return</span> item<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类支持的默认迭代是定义为返回IEnumerator的GetEnumerator方法。自定义命名的迭代返回IEnumerable(如：将数组逆序迭代)</p><h2 id="yield-return语句返回一个枚举器"><a href="#yield-return语句返回一个枚举器" class="headerlink" title="yield return语句返回一个枚举器"></a>yield return语句返回一个枚举器</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        TestCollection c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IEnumerator enumerator <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Cross</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>enumerator<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            enumerator <span class="token operator">=</span> enumerator<span class="token punctuation">.</span>Current as IEnumerator<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将enumerator的值设为当前的枚举器，用于下一次循环</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// 自定义集合类</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token keyword">class</span> <span class="token class-name">TestCollection</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> IEnumerator cross<span class="token punctuation">;</span>    <span class="token keyword">private</span> IEnumerator circle<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> move <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxmove <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TestCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cross <span class="token operator">=</span> <span class="token function">Cross</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circle <span class="token operator">=</span> <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义两个IEnumerator的方法，各自返回对方的枚举器</span>    <span class="token keyword">public</span> IEnumerator <span class="token function">Cross</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Corross, move {0}"</span><span class="token punctuation">,</span>move<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>move<span class="token operator">>=</span>maxmove<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                yield <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            yield <span class="token keyword">return</span> circle<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> IEnumerator <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Circle, move {0}"</span><span class="token punctuation">,</span>move<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>move<span class="token operator">>=</span>maxmove<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                yield <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            yield <span class="token keyword">return</span> cross<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:交替输出1-8</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建枚举器&quot;&gt;&lt;a href=&quot;#创建枚举器&quot; class=&quot;headerlink&quot; title=&quot;创建枚举器&quot;&gt;&lt;/a&gt;创建枚举器&lt;/h2&gt;&lt;p&gt;yield return 语句返回集合的一个元素，并移动到下一个元素上。yield break可停止迭代&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="C#高级编程" scheme="https://taffyblog.github.io/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
</feed>
